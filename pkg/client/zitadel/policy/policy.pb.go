// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: zitadel/policy.proto

package policy

import (
	object "github.com/caos/zitadel-go/pkg/client/zitadel/object"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SecondFactorType int32

const (
	SecondFactorType_SECOND_FACTOR_TYPE_UNSPECIFIED SecondFactorType = 0
	SecondFactorType_SECOND_FACTOR_TYPE_OTP         SecondFactorType = 1
	SecondFactorType_SECOND_FACTOR_TYPE_U2F         SecondFactorType = 2
)

// Enum value maps for SecondFactorType.
var (
	SecondFactorType_name = map[int32]string{
		0: "SECOND_FACTOR_TYPE_UNSPECIFIED",
		1: "SECOND_FACTOR_TYPE_OTP",
		2: "SECOND_FACTOR_TYPE_U2F",
	}
	SecondFactorType_value = map[string]int32{
		"SECOND_FACTOR_TYPE_UNSPECIFIED": 0,
		"SECOND_FACTOR_TYPE_OTP":         1,
		"SECOND_FACTOR_TYPE_U2F":         2,
	}
)

func (x SecondFactorType) Enum() *SecondFactorType {
	p := new(SecondFactorType)
	*p = x
	return p
}

func (x SecondFactorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecondFactorType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_policy_proto_enumTypes[0].Descriptor()
}

func (SecondFactorType) Type() protoreflect.EnumType {
	return &file_zitadel_policy_proto_enumTypes[0]
}

func (x SecondFactorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecondFactorType.Descriptor instead.
func (SecondFactorType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{0}
}

type MultiFactorType int32

const (
	MultiFactorType_MULTI_FACTOR_TYPE_UNSPECIFIED           MultiFactorType = 0
	MultiFactorType_MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION MultiFactorType = 1 //TODO: what does livio think after the weekend? :D
)

// Enum value maps for MultiFactorType.
var (
	MultiFactorType_name = map[int32]string{
		0: "MULTI_FACTOR_TYPE_UNSPECIFIED",
		1: "MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION",
	}
	MultiFactorType_value = map[string]int32{
		"MULTI_FACTOR_TYPE_UNSPECIFIED":           0,
		"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION": 1,
	}
)

func (x MultiFactorType) Enum() *MultiFactorType {
	p := new(MultiFactorType)
	*p = x
	return p
}

func (x MultiFactorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiFactorType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_policy_proto_enumTypes[1].Descriptor()
}

func (MultiFactorType) Type() protoreflect.EnumType {
	return &file_zitadel_policy_proto_enumTypes[1]
}

func (x MultiFactorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiFactorType.Descriptor instead.
func (MultiFactorType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{1}
}

type PasswordlessType int32

const (
	PasswordlessType_PASSWORDLESS_TYPE_NOT_ALLOWED PasswordlessType = 0
	PasswordlessType_PASSWORDLESS_TYPE_ALLOWED     PasswordlessType = 1 //PLANNED: PASSWORDLESS_TYPE_WITH_CERT
)

// Enum value maps for PasswordlessType.
var (
	PasswordlessType_name = map[int32]string{
		0: "PASSWORDLESS_TYPE_NOT_ALLOWED",
		1: "PASSWORDLESS_TYPE_ALLOWED",
	}
	PasswordlessType_value = map[string]int32{
		"PASSWORDLESS_TYPE_NOT_ALLOWED": 0,
		"PASSWORDLESS_TYPE_ALLOWED":     1,
	}
)

func (x PasswordlessType) Enum() *PasswordlessType {
	p := new(PasswordlessType)
	*p = x
	return p
}

func (x PasswordlessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordlessType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_policy_proto_enumTypes[2].Descriptor()
}

func (PasswordlessType) Type() protoreflect.EnumType {
	return &file_zitadel_policy_proto_enumTypes[2]
}

func (x PasswordlessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordlessType.Descriptor instead.
func (PasswordlessType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{2}
}

type OrgIAMPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details               *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	UserLoginMustBeDomain bool                  `protobuf:"varint,2,opt,name=user_login_must_be_domain,json=userLoginMustBeDomain,proto3" json:"user_login_must_be_domain,omitempty"`
	IsDefault             bool                  `protobuf:"varint,3,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *OrgIAMPolicy) Reset() {
	*x = OrgIAMPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgIAMPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgIAMPolicy) ProtoMessage() {}

func (x *OrgIAMPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgIAMPolicy.ProtoReflect.Descriptor instead.
func (*OrgIAMPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{0}
}

func (x *OrgIAMPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *OrgIAMPolicy) GetUserLoginMustBeDomain() bool {
	if x != nil {
		return x.UserLoginMustBeDomain
	}
	return false
}

func (x *OrgIAMPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type LabelPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details             *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	PrimaryColor        string                `protobuf:"bytes,2,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	SecondaryColor      string                `protobuf:"bytes,3,opt,name=secondary_color,json=secondaryColor,proto3" json:"secondary_color,omitempty"`
	IsDefault           bool                  `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	HideLoginNameSuffix bool                  `protobuf:"varint,5,opt,name=hide_login_name_suffix,json=hideLoginNameSuffix,proto3" json:"hide_login_name_suffix,omitempty"`
}

func (x *LabelPolicy) Reset() {
	*x = LabelPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelPolicy) ProtoMessage() {}

func (x *LabelPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelPolicy.ProtoReflect.Descriptor instead.
func (*LabelPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{1}
}

func (x *LabelPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *LabelPolicy) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *LabelPolicy) GetSecondaryColor() string {
	if x != nil {
		return x.SecondaryColor
	}
	return ""
}

func (x *LabelPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *LabelPolicy) GetHideLoginNameSuffix() bool {
	if x != nil {
		return x.HideLoginNameSuffix
	}
	return false
}

type LoginPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details               *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	AllowUsernamePassword bool                  `protobuf:"varint,2,opt,name=allow_username_password,json=allowUsernamePassword,proto3" json:"allow_username_password,omitempty"`
	AllowRegister         bool                  `protobuf:"varint,3,opt,name=allow_register,json=allowRegister,proto3" json:"allow_register,omitempty"`
	AllowExternalIdp      bool                  `protobuf:"varint,4,opt,name=allow_external_idp,json=allowExternalIdp,proto3" json:"allow_external_idp,omitempty"`
	ForceMfa              bool                  `protobuf:"varint,5,opt,name=force_mfa,json=forceMfa,proto3" json:"force_mfa,omitempty"`
	PasswordlessType      PasswordlessType      `protobuf:"varint,6,opt,name=passwordless_type,json=passwordlessType,proto3,enum=zitadel.policy.v1.PasswordlessType" json:"passwordless_type,omitempty"`
	IsDefault             bool                  `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *LoginPolicy) Reset() {
	*x = LoginPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginPolicy) ProtoMessage() {}

func (x *LoginPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginPolicy.ProtoReflect.Descriptor instead.
func (*LoginPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{2}
}

func (x *LoginPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *LoginPolicy) GetAllowUsernamePassword() bool {
	if x != nil {
		return x.AllowUsernamePassword
	}
	return false
}

func (x *LoginPolicy) GetAllowRegister() bool {
	if x != nil {
		return x.AllowRegister
	}
	return false
}

func (x *LoginPolicy) GetAllowExternalIdp() bool {
	if x != nil {
		return x.AllowExternalIdp
	}
	return false
}

func (x *LoginPolicy) GetForceMfa() bool {
	if x != nil {
		return x.ForceMfa
	}
	return false
}

func (x *LoginPolicy) GetPasswordlessType() PasswordlessType {
	if x != nil {
		return x.PasswordlessType
	}
	return PasswordlessType_PASSWORDLESS_TYPE_NOT_ALLOWED
}

func (x *LoginPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type PasswordComplexityPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details      *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	MinLength    uint64                `protobuf:"varint,2,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	HasUppercase bool                  `protobuf:"varint,3,opt,name=has_uppercase,json=hasUppercase,proto3" json:"has_uppercase,omitempty"`
	HasLowercase bool                  `protobuf:"varint,4,opt,name=has_lowercase,json=hasLowercase,proto3" json:"has_lowercase,omitempty"`
	HasNumber    bool                  `protobuf:"varint,5,opt,name=has_number,json=hasNumber,proto3" json:"has_number,omitempty"`
	HasSymbol    bool                  `protobuf:"varint,6,opt,name=has_symbol,json=hasSymbol,proto3" json:"has_symbol,omitempty"`
	IsDefault    bool                  `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *PasswordComplexityPolicy) Reset() {
	*x = PasswordComplexityPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordComplexityPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordComplexityPolicy) ProtoMessage() {}

func (x *PasswordComplexityPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordComplexityPolicy.ProtoReflect.Descriptor instead.
func (*PasswordComplexityPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{3}
}

func (x *PasswordComplexityPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PasswordComplexityPolicy) GetMinLength() uint64 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *PasswordComplexityPolicy) GetHasUppercase() bool {
	if x != nil {
		return x.HasUppercase
	}
	return false
}

func (x *PasswordComplexityPolicy) GetHasLowercase() bool {
	if x != nil {
		return x.HasLowercase
	}
	return false
}

func (x *PasswordComplexityPolicy) GetHasNumber() bool {
	if x != nil {
		return x.HasNumber
	}
	return false
}

func (x *PasswordComplexityPolicy) GetHasSymbol() bool {
	if x != nil {
		return x.HasSymbol
	}
	return false
}

func (x *PasswordComplexityPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type PasswordAgePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details        *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	MaxAgeDays     uint64                `protobuf:"varint,2,opt,name=max_age_days,json=maxAgeDays,proto3" json:"max_age_days,omitempty"`
	ExpireWarnDays uint64                `protobuf:"varint,3,opt,name=expire_warn_days,json=expireWarnDays,proto3" json:"expire_warn_days,omitempty"`
	IsDefault      bool                  `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *PasswordAgePolicy) Reset() {
	*x = PasswordAgePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordAgePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordAgePolicy) ProtoMessage() {}

func (x *PasswordAgePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordAgePolicy.ProtoReflect.Descriptor instead.
func (*PasswordAgePolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{4}
}

func (x *PasswordAgePolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PasswordAgePolicy) GetMaxAgeDays() uint64 {
	if x != nil {
		return x.MaxAgeDays
	}
	return 0
}

func (x *PasswordAgePolicy) GetExpireWarnDays() uint64 {
	if x != nil {
		return x.ExpireWarnDays
	}
	return 0
}

func (x *PasswordAgePolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type PasswordLockoutPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details            *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	MaxAttempts        uint64                `protobuf:"varint,2,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	ShowLockoutFailure bool                  `protobuf:"varint,3,opt,name=show_lockout_failure,json=showLockoutFailure,proto3" json:"show_lockout_failure,omitempty"`
	IsDefault          bool                  `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *PasswordLockoutPolicy) Reset() {
	*x = PasswordLockoutPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordLockoutPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordLockoutPolicy) ProtoMessage() {}

func (x *PasswordLockoutPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordLockoutPolicy.ProtoReflect.Descriptor instead.
func (*PasswordLockoutPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{5}
}

func (x *PasswordLockoutPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PasswordLockoutPolicy) GetMaxAttempts() uint64 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *PasswordLockoutPolicy) GetShowLockoutFailure() bool {
	if x != nil {
		return x.ShowLockoutFailure
	}
	return false
}

func (x *PasswordLockoutPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

var File_zitadel_policy_proto protoreflect.FileDescriptor

var file_zitadel_policy_proto_rawDesc = []byte{
	0x0a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9c, 0x02, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x7b, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xb0,
	0x04, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32,
	0x1b, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0c, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38,
	0x32, 0x36, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0xfb, 0x01, 0x0a, 0x16, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0xc5, 0x01, 0x92, 0x41, 0xc1, 0x01, 0x32, 0xbe, 0x01, 0x68, 0x69,
	0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x20, 0x22, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69,
	0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x22, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2e, 0x20, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x23, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x13, 0x68, 0x69,
	0x64, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x22, 0xfa, 0x05, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x44, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x68, 0x69, 0x73, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x72, 0x0a, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x32, 0x46, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73,
	0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x84,
	0x01, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x92, 0x41, 0x53,
	0x32, 0x51, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x64, 0x64, 0x20, 0x61, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x20, 0x45, 0x2e, 0x67, 0x2e, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x70, 0x12, 0x55, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d,
	0x66, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x20,
	0x69, 0x6e, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x66, 0x61, 0x12, 0x83, 0x01, 0x0a,
	0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x31, 0x92,
	0x41, 0x2e, 0x32, 0x2c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xcd,
	0x04, 0x0a, 0x18, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x27, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x92, 0x41, 0x05, 0x4a, 0x03, 0x22, 0x38, 0x22, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x0d, 0x68, 0x61, 0x73,
	0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d,
	0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x0c, 0x68, 0x61, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x38, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x20, 0x61, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x37,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x20, 0x45,
	0x2e, 0x67, 0x2e, 0x20, 0x22, 0x24, 0x22, 0x52, 0x09, 0x68, 0x61, 0x73, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x5a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x80,
	0x03, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x33, 0x92, 0x41, 0x30, 0x32, 0x27, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x64, 0x61,
	0x79, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x05, 0x22,
	0x33, 0x36, 0x35, 0x22, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x82, 0x01, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x58, 0x92, 0x41, 0x55,
	0x32, 0x4d, 0x44, 0x61, 0x79, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4a,
	0x04, 0x22, 0x31, 0x30, 0x22, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x5a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x22, 0x9b, 0x04, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0xb9, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x95, 0x01, 0x92, 0x41, 0x91, 0x01, 0x32, 0x88,
	0x01, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x2e, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x20, 0x61, 0x73, 0x20, 0x73, 0x6f, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x4a, 0x04, 0x22, 0x31, 0x30, 0x22, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0xb4, 0x01, 0x0a,
	0x14, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x81, 0x01, 0x92, 0x41,
	0x7e, 0x32, 0x7c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x20, 0x62, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d,
	0x75, 0x63, 0x68, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2a,
	0x6e, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54,
	0x50, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x32, 0x46, 0x10, 0x02, 0x2a,
	0x61, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x46, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x32, 0x46, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x2a, 0x54, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x6f, 0x73, 0x2f, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_policy_proto_rawDescOnce sync.Once
	file_zitadel_policy_proto_rawDescData = file_zitadel_policy_proto_rawDesc
)

func file_zitadel_policy_proto_rawDescGZIP() []byte {
	file_zitadel_policy_proto_rawDescOnce.Do(func() {
		file_zitadel_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_policy_proto_rawDescData)
	})
	return file_zitadel_policy_proto_rawDescData
}

var file_zitadel_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_zitadel_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_zitadel_policy_proto_goTypes = []interface{}{
	(SecondFactorType)(0),            // 0: zitadel.policy.v1.SecondFactorType
	(MultiFactorType)(0),             // 1: zitadel.policy.v1.MultiFactorType
	(PasswordlessType)(0),            // 2: zitadel.policy.v1.PasswordlessType
	(*OrgIAMPolicy)(nil),             // 3: zitadel.policy.v1.OrgIAMPolicy
	(*LabelPolicy)(nil),              // 4: zitadel.policy.v1.LabelPolicy
	(*LoginPolicy)(nil),              // 5: zitadel.policy.v1.LoginPolicy
	(*PasswordComplexityPolicy)(nil), // 6: zitadel.policy.v1.PasswordComplexityPolicy
	(*PasswordAgePolicy)(nil),        // 7: zitadel.policy.v1.PasswordAgePolicy
	(*PasswordLockoutPolicy)(nil),    // 8: zitadel.policy.v1.PasswordLockoutPolicy
	(*object.ObjectDetails)(nil),     // 9: zitadel.v1.ObjectDetails
}
var file_zitadel_policy_proto_depIdxs = []int32{
	9, // 0: zitadel.policy.v1.OrgIAMPolicy.details:type_name -> zitadel.v1.ObjectDetails
	9, // 1: zitadel.policy.v1.LabelPolicy.details:type_name -> zitadel.v1.ObjectDetails
	9, // 2: zitadel.policy.v1.LoginPolicy.details:type_name -> zitadel.v1.ObjectDetails
	2, // 3: zitadel.policy.v1.LoginPolicy.passwordless_type:type_name -> zitadel.policy.v1.PasswordlessType
	9, // 4: zitadel.policy.v1.PasswordComplexityPolicy.details:type_name -> zitadel.v1.ObjectDetails
	9, // 5: zitadel.policy.v1.PasswordAgePolicy.details:type_name -> zitadel.v1.ObjectDetails
	9, // 6: zitadel.policy.v1.PasswordLockoutPolicy.details:type_name -> zitadel.v1.ObjectDetails
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_zitadel_policy_proto_init() }
func file_zitadel_policy_proto_init() {
	if File_zitadel_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgIAMPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordComplexityPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordAgePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordLockoutPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_policy_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_policy_proto_goTypes,
		DependencyIndexes: file_zitadel_policy_proto_depIdxs,
		EnumInfos:         file_zitadel_policy_proto_enumTypes,
		MessageInfos:      file_zitadel_policy_proto_msgTypes,
	}.Build()
	File_zitadel_policy_proto = out.File
	file_zitadel_policy_proto_rawDesc = nil
	file_zitadel_policy_proto_goTypes = nil
	file_zitadel_policy_proto_depIdxs = nil
}
