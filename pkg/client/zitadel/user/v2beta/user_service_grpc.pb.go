// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/user/v2beta/user_service.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_AddHumanUser_FullMethodName                   = "/zitadel.user.v2beta.UserService/AddHumanUser"
	UserService_SetEmail_FullMethodName                       = "/zitadel.user.v2beta.UserService/SetEmail"
	UserService_VerifyEmail_FullMethodName                    = "/zitadel.user.v2beta.UserService/VerifyEmail"
	UserService_SetPhone_FullMethodName                       = "/zitadel.user.v2beta.UserService/SetPhone"
	UserService_VerifyPhone_FullMethodName                    = "/zitadel.user.v2beta.UserService/VerifyPhone"
	UserService_RegisterPasskey_FullMethodName                = "/zitadel.user.v2beta.UserService/RegisterPasskey"
	UserService_VerifyPasskeyRegistration_FullMethodName      = "/zitadel.user.v2beta.UserService/VerifyPasskeyRegistration"
	UserService_CreatePasskeyRegistrationLink_FullMethodName  = "/zitadel.user.v2beta.UserService/CreatePasskeyRegistrationLink"
	UserService_RegisterU2F_FullMethodName                    = "/zitadel.user.v2beta.UserService/RegisterU2F"
	UserService_VerifyU2FRegistration_FullMethodName          = "/zitadel.user.v2beta.UserService/VerifyU2FRegistration"
	UserService_RegisterTOTP_FullMethodName                   = "/zitadel.user.v2beta.UserService/RegisterTOTP"
	UserService_VerifyTOTPRegistration_FullMethodName         = "/zitadel.user.v2beta.UserService/VerifyTOTPRegistration"
	UserService_AddOTPSMS_FullMethodName                      = "/zitadel.user.v2beta.UserService/AddOTPSMS"
	UserService_RemoveOTPSMS_FullMethodName                   = "/zitadel.user.v2beta.UserService/RemoveOTPSMS"
	UserService_AddOTPEmail_FullMethodName                    = "/zitadel.user.v2beta.UserService/AddOTPEmail"
	UserService_RemoveOTPEmail_FullMethodName                 = "/zitadel.user.v2beta.UserService/RemoveOTPEmail"
	UserService_StartIdentityProviderIntent_FullMethodName    = "/zitadel.user.v2beta.UserService/StartIdentityProviderIntent"
	UserService_RetrieveIdentityProviderIntent_FullMethodName = "/zitadel.user.v2beta.UserService/RetrieveIdentityProviderIntent"
	UserService_AddIDPLink_FullMethodName                     = "/zitadel.user.v2beta.UserService/AddIDPLink"
	UserService_PasswordReset_FullMethodName                  = "/zitadel.user.v2beta.UserService/PasswordReset"
	UserService_SetPassword_FullMethodName                    = "/zitadel.user.v2beta.UserService/SetPassword"
	UserService_ListAuthenticationMethodTypes_FullMethodName  = "/zitadel.user.v2beta.UserService/ListAuthenticationMethodTypes"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Create a new human user
	AddHumanUser(ctx context.Context, in *AddHumanUserRequest, opts ...grpc.CallOption) (*AddHumanUserResponse, error)
	// Change the email of a user
	SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error)
	// Verify the email with the provided code
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	// Change the phone of a user
	SetPhone(ctx context.Context, in *SetPhoneRequest, opts ...grpc.CallOption) (*SetPhoneResponse, error)
	// Verify the phone with the provided code
	VerifyPhone(ctx context.Context, in *VerifyPhoneRequest, opts ...grpc.CallOption) (*VerifyPhoneResponse, error)
	RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error)
	VerifyPasskeyRegistration(ctx context.Context, in *VerifyPasskeyRegistrationRequest, opts ...grpc.CallOption) (*VerifyPasskeyRegistrationResponse, error)
	CreatePasskeyRegistrationLink(ctx context.Context, in *CreatePasskeyRegistrationLinkRequest, opts ...grpc.CallOption) (*CreatePasskeyRegistrationLinkResponse, error)
	RegisterU2F(ctx context.Context, in *RegisterU2FRequest, opts ...grpc.CallOption) (*RegisterU2FResponse, error)
	VerifyU2FRegistration(ctx context.Context, in *VerifyU2FRegistrationRequest, opts ...grpc.CallOption) (*VerifyU2FRegistrationResponse, error)
	RegisterTOTP(ctx context.Context, in *RegisterTOTPRequest, opts ...grpc.CallOption) (*RegisterTOTPResponse, error)
	VerifyTOTPRegistration(ctx context.Context, in *VerifyTOTPRegistrationRequest, opts ...grpc.CallOption) (*VerifyTOTPRegistrationResponse, error)
	AddOTPSMS(ctx context.Context, in *AddOTPSMSRequest, opts ...grpc.CallOption) (*AddOTPSMSResponse, error)
	RemoveOTPSMS(ctx context.Context, in *RemoveOTPSMSRequest, opts ...grpc.CallOption) (*RemoveOTPSMSResponse, error)
	AddOTPEmail(ctx context.Context, in *AddOTPEmailRequest, opts ...grpc.CallOption) (*AddOTPEmailResponse, error)
	RemoveOTPEmail(ctx context.Context, in *RemoveOTPEmailRequest, opts ...grpc.CallOption) (*RemoveOTPEmailResponse, error)
	// Start an IDP authentication (for external login, registration or linking)
	StartIdentityProviderIntent(ctx context.Context, in *StartIdentityProviderIntentRequest, opts ...grpc.CallOption) (*StartIdentityProviderIntentResponse, error)
	RetrieveIdentityProviderIntent(ctx context.Context, in *RetrieveIdentityProviderIntentRequest, opts ...grpc.CallOption) (*RetrieveIdentityProviderIntentResponse, error)
	// Link an IDP to an existing user
	AddIDPLink(ctx context.Context, in *AddIDPLinkRequest, opts ...grpc.CallOption) (*AddIDPLinkResponse, error)
	// Request password reset
	PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error)
	// Change password
	SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error)
	// List all possible authentication methods of a user
	ListAuthenticationMethodTypes(ctx context.Context, in *ListAuthenticationMethodTypesRequest, opts ...grpc.CallOption) (*ListAuthenticationMethodTypesResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddHumanUser(ctx context.Context, in *AddHumanUserRequest, opts ...grpc.CallOption) (*AddHumanUserResponse, error) {
	out := new(AddHumanUserResponse)
	err := c.cc.Invoke(ctx, UserService_AddHumanUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error) {
	out := new(SetEmailResponse)
	err := c.cc.Invoke(ctx, UserService_SetEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetPhone(ctx context.Context, in *SetPhoneRequest, opts ...grpc.CallOption) (*SetPhoneResponse, error) {
	out := new(SetPhoneResponse)
	err := c.cc.Invoke(ctx, UserService_SetPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyPhone(ctx context.Context, in *VerifyPhoneRequest, opts ...grpc.CallOption) (*VerifyPhoneResponse, error) {
	out := new(VerifyPhoneResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error) {
	out := new(RegisterPasskeyResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterPasskey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyPasskeyRegistration(ctx context.Context, in *VerifyPasskeyRegistrationRequest, opts ...grpc.CallOption) (*VerifyPasskeyRegistrationResponse, error) {
	out := new(VerifyPasskeyRegistrationResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyPasskeyRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatePasskeyRegistrationLink(ctx context.Context, in *CreatePasskeyRegistrationLinkRequest, opts ...grpc.CallOption) (*CreatePasskeyRegistrationLinkResponse, error) {
	out := new(CreatePasskeyRegistrationLinkResponse)
	err := c.cc.Invoke(ctx, UserService_CreatePasskeyRegistrationLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterU2F(ctx context.Context, in *RegisterU2FRequest, opts ...grpc.CallOption) (*RegisterU2FResponse, error) {
	out := new(RegisterU2FResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterU2F_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyU2FRegistration(ctx context.Context, in *VerifyU2FRegistrationRequest, opts ...grpc.CallOption) (*VerifyU2FRegistrationResponse, error) {
	out := new(VerifyU2FRegistrationResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyU2FRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterTOTP(ctx context.Context, in *RegisterTOTPRequest, opts ...grpc.CallOption) (*RegisterTOTPResponse, error) {
	out := new(RegisterTOTPResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterTOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyTOTPRegistration(ctx context.Context, in *VerifyTOTPRegistrationRequest, opts ...grpc.CallOption) (*VerifyTOTPRegistrationResponse, error) {
	out := new(VerifyTOTPRegistrationResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyTOTPRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddOTPSMS(ctx context.Context, in *AddOTPSMSRequest, opts ...grpc.CallOption) (*AddOTPSMSResponse, error) {
	out := new(AddOTPSMSResponse)
	err := c.cc.Invoke(ctx, UserService_AddOTPSMS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveOTPSMS(ctx context.Context, in *RemoveOTPSMSRequest, opts ...grpc.CallOption) (*RemoveOTPSMSResponse, error) {
	out := new(RemoveOTPSMSResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveOTPSMS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddOTPEmail(ctx context.Context, in *AddOTPEmailRequest, opts ...grpc.CallOption) (*AddOTPEmailResponse, error) {
	out := new(AddOTPEmailResponse)
	err := c.cc.Invoke(ctx, UserService_AddOTPEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveOTPEmail(ctx context.Context, in *RemoveOTPEmailRequest, opts ...grpc.CallOption) (*RemoveOTPEmailResponse, error) {
	out := new(RemoveOTPEmailResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveOTPEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StartIdentityProviderIntent(ctx context.Context, in *StartIdentityProviderIntentRequest, opts ...grpc.CallOption) (*StartIdentityProviderIntentResponse, error) {
	out := new(StartIdentityProviderIntentResponse)
	err := c.cc.Invoke(ctx, UserService_StartIdentityProviderIntent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RetrieveIdentityProviderIntent(ctx context.Context, in *RetrieveIdentityProviderIntentRequest, opts ...grpc.CallOption) (*RetrieveIdentityProviderIntentResponse, error) {
	out := new(RetrieveIdentityProviderIntentResponse)
	err := c.cc.Invoke(ctx, UserService_RetrieveIdentityProviderIntent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddIDPLink(ctx context.Context, in *AddIDPLinkRequest, opts ...grpc.CallOption) (*AddIDPLinkResponse, error) {
	out := new(AddIDPLinkResponse)
	err := c.cc.Invoke(ctx, UserService_AddIDPLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error) {
	out := new(PasswordResetResponse)
	err := c.cc.Invoke(ctx, UserService_PasswordReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error) {
	out := new(SetPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_SetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListAuthenticationMethodTypes(ctx context.Context, in *ListAuthenticationMethodTypesRequest, opts ...grpc.CallOption) (*ListAuthenticationMethodTypesResponse, error) {
	out := new(ListAuthenticationMethodTypesResponse)
	err := c.cc.Invoke(ctx, UserService_ListAuthenticationMethodTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// Create a new human user
	AddHumanUser(context.Context, *AddHumanUserRequest) (*AddHumanUserResponse, error)
	// Change the email of a user
	SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error)
	// Verify the email with the provided code
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	// Change the phone of a user
	SetPhone(context.Context, *SetPhoneRequest) (*SetPhoneResponse, error)
	// Verify the phone with the provided code
	VerifyPhone(context.Context, *VerifyPhoneRequest) (*VerifyPhoneResponse, error)
	RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error)
	VerifyPasskeyRegistration(context.Context, *VerifyPasskeyRegistrationRequest) (*VerifyPasskeyRegistrationResponse, error)
	CreatePasskeyRegistrationLink(context.Context, *CreatePasskeyRegistrationLinkRequest) (*CreatePasskeyRegistrationLinkResponse, error)
	RegisterU2F(context.Context, *RegisterU2FRequest) (*RegisterU2FResponse, error)
	VerifyU2FRegistration(context.Context, *VerifyU2FRegistrationRequest) (*VerifyU2FRegistrationResponse, error)
	RegisterTOTP(context.Context, *RegisterTOTPRequest) (*RegisterTOTPResponse, error)
	VerifyTOTPRegistration(context.Context, *VerifyTOTPRegistrationRequest) (*VerifyTOTPRegistrationResponse, error)
	AddOTPSMS(context.Context, *AddOTPSMSRequest) (*AddOTPSMSResponse, error)
	RemoveOTPSMS(context.Context, *RemoveOTPSMSRequest) (*RemoveOTPSMSResponse, error)
	AddOTPEmail(context.Context, *AddOTPEmailRequest) (*AddOTPEmailResponse, error)
	RemoveOTPEmail(context.Context, *RemoveOTPEmailRequest) (*RemoveOTPEmailResponse, error)
	// Start an IDP authentication (for external login, registration or linking)
	StartIdentityProviderIntent(context.Context, *StartIdentityProviderIntentRequest) (*StartIdentityProviderIntentResponse, error)
	RetrieveIdentityProviderIntent(context.Context, *RetrieveIdentityProviderIntentRequest) (*RetrieveIdentityProviderIntentResponse, error)
	// Link an IDP to an existing user
	AddIDPLink(context.Context, *AddIDPLinkRequest) (*AddIDPLinkResponse, error)
	// Request password reset
	PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error)
	// Change password
	SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error)
	// List all possible authentication methods of a user
	ListAuthenticationMethodTypes(context.Context, *ListAuthenticationMethodTypesRequest) (*ListAuthenticationMethodTypesResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) AddHumanUser(context.Context, *AddHumanUserRequest) (*AddHumanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHumanUser not implemented")
}
func (UnimplementedUserServiceServer) SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmail not implemented")
}
func (UnimplementedUserServiceServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedUserServiceServer) SetPhone(context.Context, *SetPhoneRequest) (*SetPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPhone not implemented")
}
func (UnimplementedUserServiceServer) VerifyPhone(context.Context, *VerifyPhoneRequest) (*VerifyPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhone not implemented")
}
func (UnimplementedUserServiceServer) RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPasskey not implemented")
}
func (UnimplementedUserServiceServer) VerifyPasskeyRegistration(context.Context, *VerifyPasskeyRegistrationRequest) (*VerifyPasskeyRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPasskeyRegistration not implemented")
}
func (UnimplementedUserServiceServer) CreatePasskeyRegistrationLink(context.Context, *CreatePasskeyRegistrationLinkRequest) (*CreatePasskeyRegistrationLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePasskeyRegistrationLink not implemented")
}
func (UnimplementedUserServiceServer) RegisterU2F(context.Context, *RegisterU2FRequest) (*RegisterU2FResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterU2F not implemented")
}
func (UnimplementedUserServiceServer) VerifyU2FRegistration(context.Context, *VerifyU2FRegistrationRequest) (*VerifyU2FRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyU2FRegistration not implemented")
}
func (UnimplementedUserServiceServer) RegisterTOTP(context.Context, *RegisterTOTPRequest) (*RegisterTOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTOTP not implemented")
}
func (UnimplementedUserServiceServer) VerifyTOTPRegistration(context.Context, *VerifyTOTPRegistrationRequest) (*VerifyTOTPRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTOTPRegistration not implemented")
}
func (UnimplementedUserServiceServer) AddOTPSMS(context.Context, *AddOTPSMSRequest) (*AddOTPSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOTPSMS not implemented")
}
func (UnimplementedUserServiceServer) RemoveOTPSMS(context.Context, *RemoveOTPSMSRequest) (*RemoveOTPSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOTPSMS not implemented")
}
func (UnimplementedUserServiceServer) AddOTPEmail(context.Context, *AddOTPEmailRequest) (*AddOTPEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOTPEmail not implemented")
}
func (UnimplementedUserServiceServer) RemoveOTPEmail(context.Context, *RemoveOTPEmailRequest) (*RemoveOTPEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOTPEmail not implemented")
}
func (UnimplementedUserServiceServer) StartIdentityProviderIntent(context.Context, *StartIdentityProviderIntentRequest) (*StartIdentityProviderIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartIdentityProviderIntent not implemented")
}
func (UnimplementedUserServiceServer) RetrieveIdentityProviderIntent(context.Context, *RetrieveIdentityProviderIntentRequest) (*RetrieveIdentityProviderIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveIdentityProviderIntent not implemented")
}
func (UnimplementedUserServiceServer) AddIDPLink(context.Context, *AddIDPLinkRequest) (*AddIDPLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIDPLink not implemented")
}
func (UnimplementedUserServiceServer) PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordReset not implemented")
}
func (UnimplementedUserServiceServer) SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedUserServiceServer) ListAuthenticationMethodTypes(context.Context, *ListAuthenticationMethodTypesRequest) (*ListAuthenticationMethodTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthenticationMethodTypes not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AddHumanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHumanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddHumanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddHumanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddHumanUser(ctx, req.(*AddHumanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetEmail(ctx, req.(*SetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetPhone(ctx, req.(*SetPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyPhone(ctx, req.(*VerifyPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterPasskey(ctx, req.(*RegisterPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyPasskeyRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasskeyRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyPasskeyRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyPasskeyRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyPasskeyRegistration(ctx, req.(*VerifyPasskeyRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatePasskeyRegistrationLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasskeyRegistrationLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatePasskeyRegistrationLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreatePasskeyRegistrationLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatePasskeyRegistrationLink(ctx, req.(*CreatePasskeyRegistrationLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterU2F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterU2FRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterU2F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterU2F_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterU2F(ctx, req.(*RegisterU2FRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyU2FRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyU2FRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyU2FRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyU2FRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyU2FRegistration(ctx, req.(*VerifyU2FRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterTOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterTOTP(ctx, req.(*RegisterTOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyTOTPRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTOTPRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyTOTPRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyTOTPRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyTOTPRegistration(ctx, req.(*VerifyTOTPRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddOTPSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOTPSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddOTPSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddOTPSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddOTPSMS(ctx, req.(*AddOTPSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveOTPSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOTPSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveOTPSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveOTPSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveOTPSMS(ctx, req.(*RemoveOTPSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddOTPEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOTPEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddOTPEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddOTPEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddOTPEmail(ctx, req.(*AddOTPEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveOTPEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOTPEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveOTPEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveOTPEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveOTPEmail(ctx, req.(*RemoveOTPEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StartIdentityProviderIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartIdentityProviderIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StartIdentityProviderIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_StartIdentityProviderIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StartIdentityProviderIntent(ctx, req.(*StartIdentityProviderIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RetrieveIdentityProviderIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveIdentityProviderIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RetrieveIdentityProviderIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RetrieveIdentityProviderIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RetrieveIdentityProviderIntent(ctx, req.(*RetrieveIdentityProviderIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddIDPLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIDPLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddIDPLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddIDPLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddIDPLink(ctx, req.(*AddIDPLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_PasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PasswordReset(ctx, req.(*PasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetPassword(ctx, req.(*SetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListAuthenticationMethodTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthenticationMethodTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListAuthenticationMethodTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListAuthenticationMethodTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListAuthenticationMethodTypes(ctx, req.(*ListAuthenticationMethodTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.user.v2beta.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHumanUser",
			Handler:    _UserService_AddHumanUser_Handler,
		},
		{
			MethodName: "SetEmail",
			Handler:    _UserService_SetEmail_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _UserService_VerifyEmail_Handler,
		},
		{
			MethodName: "SetPhone",
			Handler:    _UserService_SetPhone_Handler,
		},
		{
			MethodName: "VerifyPhone",
			Handler:    _UserService_VerifyPhone_Handler,
		},
		{
			MethodName: "RegisterPasskey",
			Handler:    _UserService_RegisterPasskey_Handler,
		},
		{
			MethodName: "VerifyPasskeyRegistration",
			Handler:    _UserService_VerifyPasskeyRegistration_Handler,
		},
		{
			MethodName: "CreatePasskeyRegistrationLink",
			Handler:    _UserService_CreatePasskeyRegistrationLink_Handler,
		},
		{
			MethodName: "RegisterU2F",
			Handler:    _UserService_RegisterU2F_Handler,
		},
		{
			MethodName: "VerifyU2FRegistration",
			Handler:    _UserService_VerifyU2FRegistration_Handler,
		},
		{
			MethodName: "RegisterTOTP",
			Handler:    _UserService_RegisterTOTP_Handler,
		},
		{
			MethodName: "VerifyTOTPRegistration",
			Handler:    _UserService_VerifyTOTPRegistration_Handler,
		},
		{
			MethodName: "AddOTPSMS",
			Handler:    _UserService_AddOTPSMS_Handler,
		},
		{
			MethodName: "RemoveOTPSMS",
			Handler:    _UserService_RemoveOTPSMS_Handler,
		},
		{
			MethodName: "AddOTPEmail",
			Handler:    _UserService_AddOTPEmail_Handler,
		},
		{
			MethodName: "RemoveOTPEmail",
			Handler:    _UserService_RemoveOTPEmail_Handler,
		},
		{
			MethodName: "StartIdentityProviderIntent",
			Handler:    _UserService_StartIdentityProviderIntent_Handler,
		},
		{
			MethodName: "RetrieveIdentityProviderIntent",
			Handler:    _UserService_RetrieveIdentityProviderIntent_Handler,
		},
		{
			MethodName: "AddIDPLink",
			Handler:    _UserService_AddIDPLink_Handler,
		},
		{
			MethodName: "PasswordReset",
			Handler:    _UserService_PasswordReset_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _UserService_SetPassword_Handler,
		},
		{
			MethodName: "ListAuthenticationMethodTypes",
			Handler:    _UserService_ListAuthenticationMethodTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/user/v2beta/user_service.proto",
}
