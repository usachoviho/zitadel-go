// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: zitadel/idp.proto

package idp

import (
	object "github.com/caos/zitadel-go/pkg/client/zitadel/object"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IDPState int32

const (
	IDPState_IDP_STATE_UNSPECIFIED IDPState = 0
	IDPState_IDP_STATE_ACTIVE      IDPState = 1
	IDPState_IDP_STATE_INACTIVE    IDPState = 2
)

// Enum value maps for IDPState.
var (
	IDPState_name = map[int32]string{
		0: "IDP_STATE_UNSPECIFIED",
		1: "IDP_STATE_ACTIVE",
		2: "IDP_STATE_INACTIVE",
	}
	IDPState_value = map[string]int32{
		"IDP_STATE_UNSPECIFIED": 0,
		"IDP_STATE_ACTIVE":      1,
		"IDP_STATE_INACTIVE":    2,
	}
)

func (x IDPState) Enum() *IDPState {
	p := new(IDPState)
	*p = x
	return p
}

func (x IDPState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDPState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[0].Descriptor()
}

func (IDPState) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[0]
}

func (x IDPState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDPState.Descriptor instead.
func (IDPState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{0}
}

type IDPStylingType int32

const (
	IDPStylingType_STYLING_TYPE_UNSPECIFIED IDPStylingType = 0
	IDPStylingType_STYLING_TYPE_GOOGLE      IDPStylingType = 1
)

// Enum value maps for IDPStylingType.
var (
	IDPStylingType_name = map[int32]string{
		0: "STYLING_TYPE_UNSPECIFIED",
		1: "STYLING_TYPE_GOOGLE",
	}
	IDPStylingType_value = map[string]int32{
		"STYLING_TYPE_UNSPECIFIED": 0,
		"STYLING_TYPE_GOOGLE":      1,
	}
)

func (x IDPStylingType) Enum() *IDPStylingType {
	p := new(IDPStylingType)
	*p = x
	return p
}

func (x IDPStylingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDPStylingType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[1].Descriptor()
}

func (IDPStylingType) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[1]
}

func (x IDPStylingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDPStylingType.Descriptor instead.
func (IDPStylingType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{1}
}

// authorization framework of the identity provider
type IDPType int32

const (
	IDPType_IDP_TYPE_UNSPECIFIED IDPType = 0
	IDPType_IDP_TYPE_OIDC        IDPType = 1 //PLANNED: IDP_TYPE_SAML
)

// Enum value maps for IDPType.
var (
	IDPType_name = map[int32]string{
		0: "IDP_TYPE_UNSPECIFIED",
		1: "IDP_TYPE_OIDC",
	}
	IDPType_value = map[string]int32{
		"IDP_TYPE_UNSPECIFIED": 0,
		"IDP_TYPE_OIDC":        1,
	}
)

func (x IDPType) Enum() *IDPType {
	p := new(IDPType)
	*p = x
	return p
}

func (x IDPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDPType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[2].Descriptor()
}

func (IDPType) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[2]
}

func (x IDPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDPType.Descriptor instead.
func (IDPType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{2}
}

// the owner of the identity provider.
type IDPOwnerType int32

const (
	IDPOwnerType_IDP_OWNER_TYPE_UNSPECIFIED IDPOwnerType = 0
	// system is managed by the ZITADEL administrators
	IDPOwnerType_IDP_OWNER_TYPE_SYSTEM IDPOwnerType = 1
	// org is managed by de organisation administrators
	IDPOwnerType_IDP_OWNER_TYPE_ORG IDPOwnerType = 2
)

// Enum value maps for IDPOwnerType.
var (
	IDPOwnerType_name = map[int32]string{
		0: "IDP_OWNER_TYPE_UNSPECIFIED",
		1: "IDP_OWNER_TYPE_SYSTEM",
		2: "IDP_OWNER_TYPE_ORG",
	}
	IDPOwnerType_value = map[string]int32{
		"IDP_OWNER_TYPE_UNSPECIFIED": 0,
		"IDP_OWNER_TYPE_SYSTEM":      1,
		"IDP_OWNER_TYPE_ORG":         2,
	}
)

func (x IDPOwnerType) Enum() *IDPOwnerType {
	p := new(IDPOwnerType)
	*p = x
	return p
}

func (x IDPOwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDPOwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[3].Descriptor()
}

func (IDPOwnerType) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[3]
}

func (x IDPOwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDPOwnerType.Descriptor instead.
func (IDPOwnerType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{3}
}

type OIDCMappingField int32

const (
	OIDCMappingField_OIDC_MAPPING_FIELD_UNSPECIFIED        OIDCMappingField = 0
	OIDCMappingField_OIDC_MAPPING_FIELD_PREFERRED_USERNAME OIDCMappingField = 1
	OIDCMappingField_OIDC_MAPPING_FIELD_EMAIL              OIDCMappingField = 2
)

// Enum value maps for OIDCMappingField.
var (
	OIDCMappingField_name = map[int32]string{
		0: "OIDC_MAPPING_FIELD_UNSPECIFIED",
		1: "OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
		2: "OIDC_MAPPING_FIELD_EMAIL",
	}
	OIDCMappingField_value = map[string]int32{
		"OIDC_MAPPING_FIELD_UNSPECIFIED":        0,
		"OIDC_MAPPING_FIELD_PREFERRED_USERNAME": 1,
		"OIDC_MAPPING_FIELD_EMAIL":              2,
	}
)

func (x OIDCMappingField) Enum() *OIDCMappingField {
	p := new(OIDCMappingField)
	*p = x
	return p
}

func (x OIDCMappingField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCMappingField) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[4].Descriptor()
}

func (OIDCMappingField) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[4]
}

func (x OIDCMappingField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCMappingField.Descriptor instead.
func (OIDCMappingField) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{4}
}

type IDPFieldName int32

const (
	IDPFieldName_IDP_FIELD_NAME_UNSPECIFIED IDPFieldName = 0
	IDPFieldName_IDP_FIELD_NAME_NAME        IDPFieldName = 1
)

// Enum value maps for IDPFieldName.
var (
	IDPFieldName_name = map[int32]string{
		0: "IDP_FIELD_NAME_UNSPECIFIED",
		1: "IDP_FIELD_NAME_NAME",
	}
	IDPFieldName_value = map[string]int32{
		"IDP_FIELD_NAME_UNSPECIFIED": 0,
		"IDP_FIELD_NAME_NAME":        1,
	}
)

func (x IDPFieldName) Enum() *IDPFieldName {
	p := new(IDPFieldName)
	*p = x
	return p
}

func (x IDPFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDPFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[5].Descriptor()
}

func (IDPFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[5]
}

func (x IDPFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDPFieldName.Descriptor instead.
func (IDPFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{5}
}

type IDP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details     *object.ObjectDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	State       IDPState              `protobuf:"varint,3,opt,name=state,proto3,enum=zitadel.idp.v1.IDPState" json:"state,omitempty"`
	Name        string                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	StylingType IDPStylingType        `protobuf:"varint,5,opt,name=styling_type,json=stylingType,proto3,enum=zitadel.idp.v1.IDPStylingType" json:"styling_type,omitempty"`
	Owner       IDPOwnerType          `protobuf:"varint,6,opt,name=owner,proto3,enum=zitadel.idp.v1.IDPOwnerType" json:"owner,omitempty"`
	// Types that are assignable to Config:
	//	*IDP_OidcConfig
	Config isIDP_Config `protobuf_oneof:"config"`
}

func (x *IDP) Reset() {
	*x = IDP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDP) ProtoMessage() {}

func (x *IDP) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDP.ProtoReflect.Descriptor instead.
func (*IDP) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{0}
}

func (x *IDP) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IDP) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *IDP) GetState() IDPState {
	if x != nil {
		return x.State
	}
	return IDPState_IDP_STATE_UNSPECIFIED
}

func (x *IDP) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IDP) GetStylingType() IDPStylingType {
	if x != nil {
		return x.StylingType
	}
	return IDPStylingType_STYLING_TYPE_UNSPECIFIED
}

func (x *IDP) GetOwner() IDPOwnerType {
	if x != nil {
		return x.Owner
	}
	return IDPOwnerType_IDP_OWNER_TYPE_UNSPECIFIED
}

func (m *IDP) GetConfig() isIDP_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *IDP) GetOidcConfig() *OIDCConfig {
	if x, ok := x.GetConfig().(*IDP_OidcConfig); ok {
		return x.OidcConfig
	}
	return nil
}

type isIDP_Config interface {
	isIDP_Config()
}

type IDP_OidcConfig struct {
	OidcConfig *OIDCConfig `protobuf:"bytes,7,opt,name=oidc_config,json=oidcConfig,proto3,oneof"`
}

func (*IDP_OidcConfig) isIDP_Config() {}

type IDPUserLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IdpId            string  `protobuf:"bytes,2,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	IdpName          string  `protobuf:"bytes,3,opt,name=idp_name,json=idpName,proto3" json:"idp_name,omitempty"`
	ProvidedUserId   string  `protobuf:"bytes,4,opt,name=provided_user_id,json=providedUserId,proto3" json:"provided_user_id,omitempty"`
	ProvidedUserName string  `protobuf:"bytes,5,opt,name=provided_user_name,json=providedUserName,proto3" json:"provided_user_name,omitempty"`
	IdpType          IDPType `protobuf:"varint,6,opt,name=idp_type,json=idpType,proto3,enum=zitadel.idp.v1.IDPType" json:"idp_type,omitempty"`
}

func (x *IDPUserLink) Reset() {
	*x = IDPUserLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPUserLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPUserLink) ProtoMessage() {}

func (x *IDPUserLink) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPUserLink.ProtoReflect.Descriptor instead.
func (*IDPUserLink) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{1}
}

func (x *IDPUserLink) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IDPUserLink) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *IDPUserLink) GetIdpName() string {
	if x != nil {
		return x.IdpName
	}
	return ""
}

func (x *IDPUserLink) GetProvidedUserId() string {
	if x != nil {
		return x.ProvidedUserId
	}
	return ""
}

func (x *IDPUserLink) GetProvidedUserName() string {
	if x != nil {
		return x.ProvidedUserName
	}
	return ""
}

func (x *IDPUserLink) GetIdpType() IDPType {
	if x != nil {
		return x.IdpType
	}
	return IDPType_IDP_TYPE_UNSPECIFIED
}

type IDPLoginPolicyLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId   string  `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	IdpName string  `protobuf:"bytes,2,opt,name=idp_name,json=idpName,proto3" json:"idp_name,omitempty"`
	IdpType IDPType `protobuf:"varint,3,opt,name=idp_type,json=idpType,proto3,enum=zitadel.idp.v1.IDPType" json:"idp_type,omitempty"`
}

func (x *IDPLoginPolicyLink) Reset() {
	*x = IDPLoginPolicyLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPLoginPolicyLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPLoginPolicyLink) ProtoMessage() {}

func (x *IDPLoginPolicyLink) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPLoginPolicyLink.ProtoReflect.Descriptor instead.
func (*IDPLoginPolicyLink) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{2}
}

func (x *IDPLoginPolicyLink) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *IDPLoginPolicyLink) GetIdpName() string {
	if x != nil {
		return x.IdpName
	}
	return ""
}

func (x *IDPLoginPolicyLink) GetIdpType() IDPType {
	if x != nil {
		return x.IdpType
	}
	return IDPType_IDP_TYPE_UNSPECIFIED
}

type OIDCConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId           string           `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Issuer             string           `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Scopes             []string         `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	DisplayNameMapping OIDCMappingField `protobuf:"varint,4,opt,name=display_name_mapping,json=displayNameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"display_name_mapping,omitempty"`
	UsernameMapping    OIDCMappingField `protobuf:"varint,5,opt,name=username_mapping,json=usernameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"username_mapping,omitempty"`
}

func (x *OIDCConfig) Reset() {
	*x = OIDCConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OIDCConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OIDCConfig) ProtoMessage() {}

func (x *OIDCConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OIDCConfig.ProtoReflect.Descriptor instead.
func (*OIDCConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{3}
}

func (x *OIDCConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OIDCConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *OIDCConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OIDCConfig) GetDisplayNameMapping() OIDCMappingField {
	if x != nil {
		return x.DisplayNameMapping
	}
	return OIDCMappingField_OIDC_MAPPING_FIELD_UNSPECIFIED
}

func (x *OIDCConfig) GetUsernameMapping() OIDCMappingField {
	if x != nil {
		return x.UsernameMapping
	}
	return OIDCMappingField_OIDC_MAPPING_FIELD_UNSPECIFIED
}

type IDPIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDPIDQuery) Reset() {
	*x = IDPIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPIDQuery) ProtoMessage() {}

func (x *IDPIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPIDQuery.ProtoReflect.Descriptor instead.
func (*IDPIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{4}
}

func (x *IDPIDQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IDPNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Method object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *IDPNameQuery) Reset() {
	*x = IDPNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPNameQuery) ProtoMessage() {}

func (x *IDPNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPNameQuery.ProtoReflect.Descriptor instead.
func (*IDPNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{5}
}

func (x *IDPNameQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IDPNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod_TEXT_QUERY_METHOD_EQUALS
}

type IDPOwnerTypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerType IDPOwnerType `protobuf:"varint,1,opt,name=owner_type,json=ownerType,proto3,enum=zitadel.idp.v1.IDPOwnerType" json:"owner_type,omitempty"`
}

func (x *IDPOwnerTypeQuery) Reset() {
	*x = IDPOwnerTypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPOwnerTypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPOwnerTypeQuery) ProtoMessage() {}

func (x *IDPOwnerTypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPOwnerTypeQuery.ProtoReflect.Descriptor instead.
func (*IDPOwnerTypeQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{6}
}

func (x *IDPOwnerTypeQuery) GetOwnerType() IDPOwnerType {
	if x != nil {
		return x.OwnerType
	}
	return IDPOwnerType_IDP_OWNER_TYPE_UNSPECIFIED
}

var File_zitadel_idp_proto protoreflect.FileDescriptor

var file_zitadel_idp_proto_rawDesc = []byte{
	0x0a, 0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x64, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x76, 0x31, 0x1a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa2, 0x04, 0x0a, 0x03, 0x49, 0x44, 0x50, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39,
	0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44,
	0x50, 0x53, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x4d, 0x92, 0x41,
	0x4a, 0x32, 0x48, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x74, 0x79,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x0b, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc6, 0x04, 0x0a, 0x0b, 0x49, 0x44, 0x50, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x12, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x50,
	0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39,
	0x92, 0x41, 0x36, 0x32, 0x1f, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39,
	0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x08, 0x69, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x21, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x08, 0x22, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x22, 0x52, 0x07, 0x69, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x45, 0x32, 0x34, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4a, 0x0d, 0x22, 0x61, 0x73, 0x2d, 0x31, 0x32, 0x2d, 0x64, 0x66, 0x2d, 0x38, 0x39,
	0x22, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x6e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92,
	0x41, 0x3d, 0x32, 0x1f, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4a, 0x1a, 0x22, 0x67, 0x69, 0x67, 0x69, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x2d,
	0x6e, 0x65, 0x63, 0x6b, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x6d, 0x0a, 0x08, 0x69, 0x64, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x54, 0x79, 0x70, 0x65, 0x42, 0x39, 0x92, 0x41,
	0x36, 0x32, 0x34, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x07, 0x69, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xa2, 0x02, 0x0a, 0x12, 0x49, 0x44, 0x50, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x50, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x1f, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x13, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x08, 0x69, 0x64, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d,
	0x32, 0x21, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4a, 0x08, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0x52, 0x07, 0x69,
	0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x08, 0x69, 0x64, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x07, 0x69, 0x64,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf7, 0x04, 0x0a, 0x0a, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x28, 0x74, 0x68, 0x65, 0x20, 0x6f,
	0x69, 0x64, 0x63, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4a, 0x1d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x22, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x70, 0x92, 0x41, 0x6d,
	0x32, 0x4b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1e, 0x5b,
	0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5d, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x45, 0x92, 0x41, 0x42, 0x32, 0x40, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x12, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49,
	0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x3e,
	0x92, 0x41, 0x3b, 0x32, 0x39, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22,
	0x3e, 0x0a, 0x0a, 0x49, 0x44, 0x50, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32,
	0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xa7, 0x01, 0x0a, 0x0c, 0x49, 0x44, 0x50, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65,
	0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x49, 0x44,
	0x50, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x78, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x3b, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x92, 0x41, 0x30, 0x32, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x20, 0x6f, 0x72, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x53, 0x0a, 0x08, 0x49, 0x44, 0x50,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x44, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x44, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x47,
	0x0a, 0x0e, 0x49, 0x44, 0x50, 0x53, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x59, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x54, 0x59, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0x36, 0x0a, 0x07, 0x49, 0x44, 0x50, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x44, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x44, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x49, 0x44, 0x43, 0x10, 0x01, 0x2a,
	0x61, 0x0a, 0x0c, 0x49, 0x44, 0x50, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x44, 0x50, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x44, 0x50, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44,
	0x50, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47,
	0x10, 0x02, 0x2a, 0x7f, 0x0a, 0x10, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x4d,
	0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x49,
	0x44, 0x43, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x4d, 0x41,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x0c, 0x49, 0x44, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x44, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x42, 0x26, 0x5a, 0x24,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x6f, 0x73, 0x2f,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x69, 0x64, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_idp_proto_rawDescOnce sync.Once
	file_zitadel_idp_proto_rawDescData = file_zitadel_idp_proto_rawDesc
)

func file_zitadel_idp_proto_rawDescGZIP() []byte {
	file_zitadel_idp_proto_rawDescOnce.Do(func() {
		file_zitadel_idp_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_idp_proto_rawDescData)
	})
	return file_zitadel_idp_proto_rawDescData
}

var file_zitadel_idp_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_zitadel_idp_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_zitadel_idp_proto_goTypes = []interface{}{
	(IDPState)(0),                // 0: zitadel.idp.v1.IDPState
	(IDPStylingType)(0),          // 1: zitadel.idp.v1.IDPStylingType
	(IDPType)(0),                 // 2: zitadel.idp.v1.IDPType
	(IDPOwnerType)(0),            // 3: zitadel.idp.v1.IDPOwnerType
	(OIDCMappingField)(0),        // 4: zitadel.idp.v1.OIDCMappingField
	(IDPFieldName)(0),            // 5: zitadel.idp.v1.IDPFieldName
	(*IDP)(nil),                  // 6: zitadel.idp.v1.IDP
	(*IDPUserLink)(nil),          // 7: zitadel.idp.v1.IDPUserLink
	(*IDPLoginPolicyLink)(nil),   // 8: zitadel.idp.v1.IDPLoginPolicyLink
	(*OIDCConfig)(nil),           // 9: zitadel.idp.v1.OIDCConfig
	(*IDPIDQuery)(nil),           // 10: zitadel.idp.v1.IDPIDQuery
	(*IDPNameQuery)(nil),         // 11: zitadel.idp.v1.IDPNameQuery
	(*IDPOwnerTypeQuery)(nil),    // 12: zitadel.idp.v1.IDPOwnerTypeQuery
	(*object.ObjectDetails)(nil), // 13: zitadel.v1.ObjectDetails
	(object.TextQueryMethod)(0),  // 14: zitadel.v1.TextQueryMethod
}
var file_zitadel_idp_proto_depIdxs = []int32{
	13, // 0: zitadel.idp.v1.IDP.details:type_name -> zitadel.v1.ObjectDetails
	0,  // 1: zitadel.idp.v1.IDP.state:type_name -> zitadel.idp.v1.IDPState
	1,  // 2: zitadel.idp.v1.IDP.styling_type:type_name -> zitadel.idp.v1.IDPStylingType
	3,  // 3: zitadel.idp.v1.IDP.owner:type_name -> zitadel.idp.v1.IDPOwnerType
	9,  // 4: zitadel.idp.v1.IDP.oidc_config:type_name -> zitadel.idp.v1.OIDCConfig
	2,  // 5: zitadel.idp.v1.IDPUserLink.idp_type:type_name -> zitadel.idp.v1.IDPType
	2,  // 6: zitadel.idp.v1.IDPLoginPolicyLink.idp_type:type_name -> zitadel.idp.v1.IDPType
	4,  // 7: zitadel.idp.v1.OIDCConfig.display_name_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	4,  // 8: zitadel.idp.v1.OIDCConfig.username_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	14, // 9: zitadel.idp.v1.IDPNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	3,  // 10: zitadel.idp.v1.IDPOwnerTypeQuery.owner_type:type_name -> zitadel.idp.v1.IDPOwnerType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_zitadel_idp_proto_init() }
func file_zitadel_idp_proto_init() {
	if File_zitadel_idp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_idp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPUserLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPLoginPolicyLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OIDCConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPOwnerTypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_idp_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*IDP_OidcConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_idp_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_idp_proto_goTypes,
		DependencyIndexes: file_zitadel_idp_proto_depIdxs,
		EnumInfos:         file_zitadel_idp_proto_enumTypes,
		MessageInfos:      file_zitadel_idp_proto_msgTypes,
	}.Build()
	File_zitadel_idp_proto = out.File
	file_zitadel_idp_proto_rawDesc = nil
	file_zitadel_idp_proto_goTypes = nil
	file_zitadel_idp_proto_depIdxs = nil
}
