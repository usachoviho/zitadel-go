// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	GetMyUser(ctx context.Context, in *GetMyUserRequest, opts ...grpc.CallOption) (*GetMyUserResponse, error)
	ListMyUserChanges(ctx context.Context, in *ListMyUserChangesRequest, opts ...grpc.CallOption) (*ListMyUserChangesResponse, error)
	ListMyUserSessions(ctx context.Context, in *ListMyUserSessionsRequest, opts ...grpc.CallOption) (*ListMyUserSessionsResponse, error)
	UpdateMyUserName(ctx context.Context, in *UpdateMyUserNameRequest, opts ...grpc.CallOption) (*UpdateMyUserNameResponse, error)
	GetMyPasswordComplexityPolicy(ctx context.Context, in *GetMyPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetMyPasswordComplexityPolicyResponse, error)
	UpdateMyPassword(ctx context.Context, in *UpdateMyPasswordRequest, opts ...grpc.CallOption) (*UpdateMyPasswordResponse, error)
	GetMyProfile(ctx context.Context, in *GetMyProfileRequest, opts ...grpc.CallOption) (*GetMyProfileResponse, error)
	UpdateMyProfile(ctx context.Context, in *UpdateMyProfileRequest, opts ...grpc.CallOption) (*UpdateMyProfileResponse, error)
	GetMyEmail(ctx context.Context, in *GetMyEmailRequest, opts ...grpc.CallOption) (*GetMyEmailResponse, error)
	SetMyEmail(ctx context.Context, in *SetMyEmailRequest, opts ...grpc.CallOption) (*SetMyEmailResponse, error)
	VerifyMyEmail(ctx context.Context, in *VerifyMyEmailRequest, opts ...grpc.CallOption) (*VerifyMyEmailResponse, error)
	ResendMyEmailVerification(ctx context.Context, in *ResendMyEmailVerificationRequest, opts ...grpc.CallOption) (*ResendMyEmailVerificationResponse, error)
	GetMyPhone(ctx context.Context, in *GetMyPhoneRequest, opts ...grpc.CallOption) (*GetMyPhoneResponse, error)
	SetMyPhone(ctx context.Context, in *SetMyPhoneRequest, opts ...grpc.CallOption) (*SetMyPhoneResponse, error)
	VerifyMyPhone(ctx context.Context, in *VerifyMyPhoneRequest, opts ...grpc.CallOption) (*VerifyMyPhoneResponse, error)
	ResendMyPhoneVerification(ctx context.Context, in *ResendMyPhoneVerificationRequest, opts ...grpc.CallOption) (*ResendMyPhoneVerificationResponse, error)
	RemoveMyPhone(ctx context.Context, in *RemoveMyPhoneRequest, opts ...grpc.CallOption) (*RemoveMyPhoneResponse, error)
	ListMyLinkedIDPs(ctx context.Context, in *ListMyLinkedIDPsRequest, opts ...grpc.CallOption) (*ListMyLinkedIDPsResponse, error)
	RemoveMyLinkedIDP(ctx context.Context, in *RemoveMyLinkedIDPRequest, opts ...grpc.CallOption) (*RemoveMyLinkedIDPResponse, error)
	ListMyAuthFactors(ctx context.Context, in *ListMyAuthFactorsRequest, opts ...grpc.CallOption) (*ListMyAuthFactorsResponse, error)
	AddMyAuthFactorOTP(ctx context.Context, in *AddMyAuthFactorOTPRequest, opts ...grpc.CallOption) (*AddMyAuthFactorOTPResponse, error)
	VerifyMyAuthFactorOTP(ctx context.Context, in *VerifyMyAuthFactorOTPRequest, opts ...grpc.CallOption) (*VerifyMyAuthFactorOTPResponse, error)
	RemoveMyAuthFactorOTP(ctx context.Context, in *RemoveMyAuthFactorOTPRequest, opts ...grpc.CallOption) (*RemoveMyAuthFactorOTPResponse, error)
	AddMyAuthFactorU2F(ctx context.Context, in *AddMyAuthFactorU2FRequest, opts ...grpc.CallOption) (*AddMyAuthFactorU2FResponse, error)
	VerifyMyAuthFactorU2F(ctx context.Context, in *VerifyMyAuthFactorU2FRequest, opts ...grpc.CallOption) (*VerifyMyAuthFactorU2FResponse, error)
	RemoveMyAuthFactorU2F(ctx context.Context, in *RemoveMyAuthFactorU2FRequest, opts ...grpc.CallOption) (*RemoveMyAuthFactorU2FResponse, error)
	ListMyPasswordless(ctx context.Context, in *ListMyPasswordlessRequest, opts ...grpc.CallOption) (*ListMyPasswordlessResponse, error)
	AddMyPasswordless(ctx context.Context, in *AddMyPasswordlessRequest, opts ...grpc.CallOption) (*AddMyPasswordlessResponse, error)
	VerifyMyPasswordless(ctx context.Context, in *VerifyMyPasswordlessRequest, opts ...grpc.CallOption) (*VerifyMyPasswordlessResponse, error)
	RemoveMyPasswordless(ctx context.Context, in *RemoveMyPasswordlessRequest, opts ...grpc.CallOption) (*RemoveMyPasswordlessResponse, error)
	ListMyUserGrants(ctx context.Context, in *ListMyUserGrantsRequest, opts ...grpc.CallOption) (*ListMyUserGrantsResponse, error)
	ListMyProjectOrgs(ctx context.Context, in *ListMyProjectOrgsRequest, opts ...grpc.CallOption) (*ListMyProjectOrgsResponse, error)
	ListMyZitadelFeatures(ctx context.Context, in *ListMyZitadelFeaturesRequest, opts ...grpc.CallOption) (*ListMyZitadelFeaturesResponse, error)
	ListMyZitadelPermissions(ctx context.Context, in *ListMyZitadelPermissionsRequest, opts ...grpc.CallOption) (*ListMyZitadelPermissionsResponse, error)
	ListMyProjectPermissions(ctx context.Context, in *ListMyProjectPermissionsRequest, opts ...grpc.CallOption) (*ListMyProjectPermissionsResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetMyUser(ctx context.Context, in *GetMyUserRequest, opts ...grpc.CallOption) (*GetMyUserResponse, error) {
	out := new(GetMyUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/GetMyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMyUserChanges(ctx context.Context, in *ListMyUserChangesRequest, opts ...grpc.CallOption) (*ListMyUserChangesResponse, error) {
	out := new(ListMyUserChangesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ListMyUserChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMyUserSessions(ctx context.Context, in *ListMyUserSessionsRequest, opts ...grpc.CallOption) (*ListMyUserSessionsResponse, error) {
	out := new(ListMyUserSessionsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ListMyUserSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateMyUserName(ctx context.Context, in *UpdateMyUserNameRequest, opts ...grpc.CallOption) (*UpdateMyUserNameResponse, error) {
	out := new(UpdateMyUserNameResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/UpdateMyUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetMyPasswordComplexityPolicy(ctx context.Context, in *GetMyPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetMyPasswordComplexityPolicyResponse, error) {
	out := new(GetMyPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/GetMyPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateMyPassword(ctx context.Context, in *UpdateMyPasswordRequest, opts ...grpc.CallOption) (*UpdateMyPasswordResponse, error) {
	out := new(UpdateMyPasswordResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/UpdateMyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetMyProfile(ctx context.Context, in *GetMyProfileRequest, opts ...grpc.CallOption) (*GetMyProfileResponse, error) {
	out := new(GetMyProfileResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/GetMyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateMyProfile(ctx context.Context, in *UpdateMyProfileRequest, opts ...grpc.CallOption) (*UpdateMyProfileResponse, error) {
	out := new(UpdateMyProfileResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/UpdateMyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetMyEmail(ctx context.Context, in *GetMyEmailRequest, opts ...grpc.CallOption) (*GetMyEmailResponse, error) {
	out := new(GetMyEmailResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/GetMyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SetMyEmail(ctx context.Context, in *SetMyEmailRequest, opts ...grpc.CallOption) (*SetMyEmailResponse, error) {
	out := new(SetMyEmailResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/SetMyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyMyEmail(ctx context.Context, in *VerifyMyEmailRequest, opts ...grpc.CallOption) (*VerifyMyEmailResponse, error) {
	out := new(VerifyMyEmailResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/VerifyMyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResendMyEmailVerification(ctx context.Context, in *ResendMyEmailVerificationRequest, opts ...grpc.CallOption) (*ResendMyEmailVerificationResponse, error) {
	out := new(ResendMyEmailVerificationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ResendMyEmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetMyPhone(ctx context.Context, in *GetMyPhoneRequest, opts ...grpc.CallOption) (*GetMyPhoneResponse, error) {
	out := new(GetMyPhoneResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/GetMyPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SetMyPhone(ctx context.Context, in *SetMyPhoneRequest, opts ...grpc.CallOption) (*SetMyPhoneResponse, error) {
	out := new(SetMyPhoneResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/SetMyPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyMyPhone(ctx context.Context, in *VerifyMyPhoneRequest, opts ...grpc.CallOption) (*VerifyMyPhoneResponse, error) {
	out := new(VerifyMyPhoneResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/VerifyMyPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResendMyPhoneVerification(ctx context.Context, in *ResendMyPhoneVerificationRequest, opts ...grpc.CallOption) (*ResendMyPhoneVerificationResponse, error) {
	out := new(ResendMyPhoneVerificationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ResendMyPhoneVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RemoveMyPhone(ctx context.Context, in *RemoveMyPhoneRequest, opts ...grpc.CallOption) (*RemoveMyPhoneResponse, error) {
	out := new(RemoveMyPhoneResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/RemoveMyPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMyLinkedIDPs(ctx context.Context, in *ListMyLinkedIDPsRequest, opts ...grpc.CallOption) (*ListMyLinkedIDPsResponse, error) {
	out := new(ListMyLinkedIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ListMyLinkedIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RemoveMyLinkedIDP(ctx context.Context, in *RemoveMyLinkedIDPRequest, opts ...grpc.CallOption) (*RemoveMyLinkedIDPResponse, error) {
	out := new(RemoveMyLinkedIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/RemoveMyLinkedIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMyAuthFactors(ctx context.Context, in *ListMyAuthFactorsRequest, opts ...grpc.CallOption) (*ListMyAuthFactorsResponse, error) {
	out := new(ListMyAuthFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ListMyAuthFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AddMyAuthFactorOTP(ctx context.Context, in *AddMyAuthFactorOTPRequest, opts ...grpc.CallOption) (*AddMyAuthFactorOTPResponse, error) {
	out := new(AddMyAuthFactorOTPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/AddMyAuthFactorOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyMyAuthFactorOTP(ctx context.Context, in *VerifyMyAuthFactorOTPRequest, opts ...grpc.CallOption) (*VerifyMyAuthFactorOTPResponse, error) {
	out := new(VerifyMyAuthFactorOTPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/VerifyMyAuthFactorOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RemoveMyAuthFactorOTP(ctx context.Context, in *RemoveMyAuthFactorOTPRequest, opts ...grpc.CallOption) (*RemoveMyAuthFactorOTPResponse, error) {
	out := new(RemoveMyAuthFactorOTPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/RemoveMyAuthFactorOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AddMyAuthFactorU2F(ctx context.Context, in *AddMyAuthFactorU2FRequest, opts ...grpc.CallOption) (*AddMyAuthFactorU2FResponse, error) {
	out := new(AddMyAuthFactorU2FResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/AddMyAuthFactorU2F", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyMyAuthFactorU2F(ctx context.Context, in *VerifyMyAuthFactorU2FRequest, opts ...grpc.CallOption) (*VerifyMyAuthFactorU2FResponse, error) {
	out := new(VerifyMyAuthFactorU2FResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/VerifyMyAuthFactorU2F", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RemoveMyAuthFactorU2F(ctx context.Context, in *RemoveMyAuthFactorU2FRequest, opts ...grpc.CallOption) (*RemoveMyAuthFactorU2FResponse, error) {
	out := new(RemoveMyAuthFactorU2FResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/RemoveMyAuthFactorU2F", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMyPasswordless(ctx context.Context, in *ListMyPasswordlessRequest, opts ...grpc.CallOption) (*ListMyPasswordlessResponse, error) {
	out := new(ListMyPasswordlessResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ListMyPasswordless", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AddMyPasswordless(ctx context.Context, in *AddMyPasswordlessRequest, opts ...grpc.CallOption) (*AddMyPasswordlessResponse, error) {
	out := new(AddMyPasswordlessResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/AddMyPasswordless", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyMyPasswordless(ctx context.Context, in *VerifyMyPasswordlessRequest, opts ...grpc.CallOption) (*VerifyMyPasswordlessResponse, error) {
	out := new(VerifyMyPasswordlessResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/VerifyMyPasswordless", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RemoveMyPasswordless(ctx context.Context, in *RemoveMyPasswordlessRequest, opts ...grpc.CallOption) (*RemoveMyPasswordlessResponse, error) {
	out := new(RemoveMyPasswordlessResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/RemoveMyPasswordless", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMyUserGrants(ctx context.Context, in *ListMyUserGrantsRequest, opts ...grpc.CallOption) (*ListMyUserGrantsResponse, error) {
	out := new(ListMyUserGrantsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ListMyUserGrants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMyProjectOrgs(ctx context.Context, in *ListMyProjectOrgsRequest, opts ...grpc.CallOption) (*ListMyProjectOrgsResponse, error) {
	out := new(ListMyProjectOrgsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ListMyProjectOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMyZitadelFeatures(ctx context.Context, in *ListMyZitadelFeaturesRequest, opts ...grpc.CallOption) (*ListMyZitadelFeaturesResponse, error) {
	out := new(ListMyZitadelFeaturesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ListMyZitadelFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMyZitadelPermissions(ctx context.Context, in *ListMyZitadelPermissionsRequest, opts ...grpc.CallOption) (*ListMyZitadelPermissionsResponse, error) {
	out := new(ListMyZitadelPermissionsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ListMyZitadelPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListMyProjectPermissions(ctx context.Context, in *ListMyProjectPermissionsRequest, opts ...grpc.CallOption) (*ListMyProjectPermissionsResponse, error) {
	out := new(ListMyProjectPermissionsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.auth.v1.AuthService/ListMyProjectPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	GetMyUser(context.Context, *GetMyUserRequest) (*GetMyUserResponse, error)
	ListMyUserChanges(context.Context, *ListMyUserChangesRequest) (*ListMyUserChangesResponse, error)
	ListMyUserSessions(context.Context, *ListMyUserSessionsRequest) (*ListMyUserSessionsResponse, error)
	UpdateMyUserName(context.Context, *UpdateMyUserNameRequest) (*UpdateMyUserNameResponse, error)
	GetMyPasswordComplexityPolicy(context.Context, *GetMyPasswordComplexityPolicyRequest) (*GetMyPasswordComplexityPolicyResponse, error)
	UpdateMyPassword(context.Context, *UpdateMyPasswordRequest) (*UpdateMyPasswordResponse, error)
	GetMyProfile(context.Context, *GetMyProfileRequest) (*GetMyProfileResponse, error)
	UpdateMyProfile(context.Context, *UpdateMyProfileRequest) (*UpdateMyProfileResponse, error)
	GetMyEmail(context.Context, *GetMyEmailRequest) (*GetMyEmailResponse, error)
	SetMyEmail(context.Context, *SetMyEmailRequest) (*SetMyEmailResponse, error)
	VerifyMyEmail(context.Context, *VerifyMyEmailRequest) (*VerifyMyEmailResponse, error)
	ResendMyEmailVerification(context.Context, *ResendMyEmailVerificationRequest) (*ResendMyEmailVerificationResponse, error)
	GetMyPhone(context.Context, *GetMyPhoneRequest) (*GetMyPhoneResponse, error)
	SetMyPhone(context.Context, *SetMyPhoneRequest) (*SetMyPhoneResponse, error)
	VerifyMyPhone(context.Context, *VerifyMyPhoneRequest) (*VerifyMyPhoneResponse, error)
	ResendMyPhoneVerification(context.Context, *ResendMyPhoneVerificationRequest) (*ResendMyPhoneVerificationResponse, error)
	RemoveMyPhone(context.Context, *RemoveMyPhoneRequest) (*RemoveMyPhoneResponse, error)
	ListMyLinkedIDPs(context.Context, *ListMyLinkedIDPsRequest) (*ListMyLinkedIDPsResponse, error)
	RemoveMyLinkedIDP(context.Context, *RemoveMyLinkedIDPRequest) (*RemoveMyLinkedIDPResponse, error)
	ListMyAuthFactors(context.Context, *ListMyAuthFactorsRequest) (*ListMyAuthFactorsResponse, error)
	AddMyAuthFactorOTP(context.Context, *AddMyAuthFactorOTPRequest) (*AddMyAuthFactorOTPResponse, error)
	VerifyMyAuthFactorOTP(context.Context, *VerifyMyAuthFactorOTPRequest) (*VerifyMyAuthFactorOTPResponse, error)
	RemoveMyAuthFactorOTP(context.Context, *RemoveMyAuthFactorOTPRequest) (*RemoveMyAuthFactorOTPResponse, error)
	AddMyAuthFactorU2F(context.Context, *AddMyAuthFactorU2FRequest) (*AddMyAuthFactorU2FResponse, error)
	VerifyMyAuthFactorU2F(context.Context, *VerifyMyAuthFactorU2FRequest) (*VerifyMyAuthFactorU2FResponse, error)
	RemoveMyAuthFactorU2F(context.Context, *RemoveMyAuthFactorU2FRequest) (*RemoveMyAuthFactorU2FResponse, error)
	ListMyPasswordless(context.Context, *ListMyPasswordlessRequest) (*ListMyPasswordlessResponse, error)
	AddMyPasswordless(context.Context, *AddMyPasswordlessRequest) (*AddMyPasswordlessResponse, error)
	VerifyMyPasswordless(context.Context, *VerifyMyPasswordlessRequest) (*VerifyMyPasswordlessResponse, error)
	RemoveMyPasswordless(context.Context, *RemoveMyPasswordlessRequest) (*RemoveMyPasswordlessResponse, error)
	ListMyUserGrants(context.Context, *ListMyUserGrantsRequest) (*ListMyUserGrantsResponse, error)
	ListMyProjectOrgs(context.Context, *ListMyProjectOrgsRequest) (*ListMyProjectOrgsResponse, error)
	ListMyZitadelFeatures(context.Context, *ListMyZitadelFeaturesRequest) (*ListMyZitadelFeaturesResponse, error)
	ListMyZitadelPermissions(context.Context, *ListMyZitadelPermissionsRequest) (*ListMyZitadelPermissionsResponse, error)
	ListMyProjectPermissions(context.Context, *ListMyProjectPermissionsRequest) (*ListMyProjectPermissionsResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedAuthServiceServer) GetMyUser(context.Context, *GetMyUserRequest) (*GetMyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUser not implemented")
}
func (UnimplementedAuthServiceServer) ListMyUserChanges(context.Context, *ListMyUserChangesRequest) (*ListMyUserChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyUserChanges not implemented")
}
func (UnimplementedAuthServiceServer) ListMyUserSessions(context.Context, *ListMyUserSessionsRequest) (*ListMyUserSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyUserSessions not implemented")
}
func (UnimplementedAuthServiceServer) UpdateMyUserName(context.Context, *UpdateMyUserNameRequest) (*UpdateMyUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyUserName not implemented")
}
func (UnimplementedAuthServiceServer) GetMyPasswordComplexityPolicy(context.Context, *GetMyPasswordComplexityPolicyRequest) (*GetMyPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyPasswordComplexityPolicy not implemented")
}
func (UnimplementedAuthServiceServer) UpdateMyPassword(context.Context, *UpdateMyPasswordRequest) (*UpdateMyPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyPassword not implemented")
}
func (UnimplementedAuthServiceServer) GetMyProfile(context.Context, *GetMyProfileRequest) (*GetMyProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyProfile not implemented")
}
func (UnimplementedAuthServiceServer) UpdateMyProfile(context.Context, *UpdateMyProfileRequest) (*UpdateMyProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyProfile not implemented")
}
func (UnimplementedAuthServiceServer) GetMyEmail(context.Context, *GetMyEmailRequest) (*GetMyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyEmail not implemented")
}
func (UnimplementedAuthServiceServer) SetMyEmail(context.Context, *SetMyEmailRequest) (*SetMyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyEmail not implemented")
}
func (UnimplementedAuthServiceServer) VerifyMyEmail(context.Context, *VerifyMyEmailRequest) (*VerifyMyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMyEmail not implemented")
}
func (UnimplementedAuthServiceServer) ResendMyEmailVerification(context.Context, *ResendMyEmailVerificationRequest) (*ResendMyEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendMyEmailVerification not implemented")
}
func (UnimplementedAuthServiceServer) GetMyPhone(context.Context, *GetMyPhoneRequest) (*GetMyPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyPhone not implemented")
}
func (UnimplementedAuthServiceServer) SetMyPhone(context.Context, *SetMyPhoneRequest) (*SetMyPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyPhone not implemented")
}
func (UnimplementedAuthServiceServer) VerifyMyPhone(context.Context, *VerifyMyPhoneRequest) (*VerifyMyPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMyPhone not implemented")
}
func (UnimplementedAuthServiceServer) ResendMyPhoneVerification(context.Context, *ResendMyPhoneVerificationRequest) (*ResendMyPhoneVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendMyPhoneVerification not implemented")
}
func (UnimplementedAuthServiceServer) RemoveMyPhone(context.Context, *RemoveMyPhoneRequest) (*RemoveMyPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMyPhone not implemented")
}
func (UnimplementedAuthServiceServer) ListMyLinkedIDPs(context.Context, *ListMyLinkedIDPsRequest) (*ListMyLinkedIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyLinkedIDPs not implemented")
}
func (UnimplementedAuthServiceServer) RemoveMyLinkedIDP(context.Context, *RemoveMyLinkedIDPRequest) (*RemoveMyLinkedIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMyLinkedIDP not implemented")
}
func (UnimplementedAuthServiceServer) ListMyAuthFactors(context.Context, *ListMyAuthFactorsRequest) (*ListMyAuthFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyAuthFactors not implemented")
}
func (UnimplementedAuthServiceServer) AddMyAuthFactorOTP(context.Context, *AddMyAuthFactorOTPRequest) (*AddMyAuthFactorOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMyAuthFactorOTP not implemented")
}
func (UnimplementedAuthServiceServer) VerifyMyAuthFactorOTP(context.Context, *VerifyMyAuthFactorOTPRequest) (*VerifyMyAuthFactorOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMyAuthFactorOTP not implemented")
}
func (UnimplementedAuthServiceServer) RemoveMyAuthFactorOTP(context.Context, *RemoveMyAuthFactorOTPRequest) (*RemoveMyAuthFactorOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMyAuthFactorOTP not implemented")
}
func (UnimplementedAuthServiceServer) AddMyAuthFactorU2F(context.Context, *AddMyAuthFactorU2FRequest) (*AddMyAuthFactorU2FResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMyAuthFactorU2F not implemented")
}
func (UnimplementedAuthServiceServer) VerifyMyAuthFactorU2F(context.Context, *VerifyMyAuthFactorU2FRequest) (*VerifyMyAuthFactorU2FResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMyAuthFactorU2F not implemented")
}
func (UnimplementedAuthServiceServer) RemoveMyAuthFactorU2F(context.Context, *RemoveMyAuthFactorU2FRequest) (*RemoveMyAuthFactorU2FResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMyAuthFactorU2F not implemented")
}
func (UnimplementedAuthServiceServer) ListMyPasswordless(context.Context, *ListMyPasswordlessRequest) (*ListMyPasswordlessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyPasswordless not implemented")
}
func (UnimplementedAuthServiceServer) AddMyPasswordless(context.Context, *AddMyPasswordlessRequest) (*AddMyPasswordlessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMyPasswordless not implemented")
}
func (UnimplementedAuthServiceServer) VerifyMyPasswordless(context.Context, *VerifyMyPasswordlessRequest) (*VerifyMyPasswordlessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMyPasswordless not implemented")
}
func (UnimplementedAuthServiceServer) RemoveMyPasswordless(context.Context, *RemoveMyPasswordlessRequest) (*RemoveMyPasswordlessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMyPasswordless not implemented")
}
func (UnimplementedAuthServiceServer) ListMyUserGrants(context.Context, *ListMyUserGrantsRequest) (*ListMyUserGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyUserGrants not implemented")
}
func (UnimplementedAuthServiceServer) ListMyProjectOrgs(context.Context, *ListMyProjectOrgsRequest) (*ListMyProjectOrgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyProjectOrgs not implemented")
}
func (UnimplementedAuthServiceServer) ListMyZitadelFeatures(context.Context, *ListMyZitadelFeaturesRequest) (*ListMyZitadelFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyZitadelFeatures not implemented")
}
func (UnimplementedAuthServiceServer) ListMyZitadelPermissions(context.Context, *ListMyZitadelPermissionsRequest) (*ListMyZitadelPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyZitadelPermissions not implemented")
}
func (UnimplementedAuthServiceServer) ListMyProjectPermissions(context.Context, *ListMyProjectPermissionsRequest) (*ListMyProjectPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyProjectPermissions not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetMyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetMyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/GetMyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetMyUser(ctx, req.(*GetMyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMyUserChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyUserChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMyUserChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ListMyUserChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMyUserChanges(ctx, req.(*ListMyUserChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMyUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMyUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ListMyUserSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMyUserSessions(ctx, req.(*ListMyUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateMyUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateMyUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/UpdateMyUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateMyUserName(ctx, req.(*UpdateMyUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetMyPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetMyPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/GetMyPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetMyPasswordComplexityPolicy(ctx, req.(*GetMyPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateMyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateMyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/UpdateMyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateMyPassword(ctx, req.(*UpdateMyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetMyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetMyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/GetMyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetMyProfile(ctx, req.(*GetMyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateMyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateMyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/UpdateMyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateMyProfile(ctx, req.(*UpdateMyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetMyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetMyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/GetMyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetMyEmail(ctx, req.(*GetMyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetMyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetMyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/SetMyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetMyEmail(ctx, req.(*SetMyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyMyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyMyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/VerifyMyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyMyEmail(ctx, req.(*VerifyMyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResendMyEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendMyEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResendMyEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ResendMyEmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResendMyEmailVerification(ctx, req.(*ResendMyEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetMyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetMyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/GetMyPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetMyPhone(ctx, req.(*GetMyPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetMyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetMyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/SetMyPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetMyPhone(ctx, req.(*SetMyPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyMyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMyPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyMyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/VerifyMyPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyMyPhone(ctx, req.(*VerifyMyPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResendMyPhoneVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendMyPhoneVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResendMyPhoneVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ResendMyPhoneVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResendMyPhoneVerification(ctx, req.(*ResendMyPhoneVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RemoveMyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMyPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RemoveMyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/RemoveMyPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RemoveMyPhone(ctx, req.(*RemoveMyPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMyLinkedIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyLinkedIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMyLinkedIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ListMyLinkedIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMyLinkedIDPs(ctx, req.(*ListMyLinkedIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RemoveMyLinkedIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMyLinkedIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RemoveMyLinkedIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/RemoveMyLinkedIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RemoveMyLinkedIDP(ctx, req.(*RemoveMyLinkedIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMyAuthFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyAuthFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMyAuthFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ListMyAuthFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMyAuthFactors(ctx, req.(*ListMyAuthFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AddMyAuthFactorOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMyAuthFactorOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AddMyAuthFactorOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/AddMyAuthFactorOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AddMyAuthFactorOTP(ctx, req.(*AddMyAuthFactorOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyMyAuthFactorOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMyAuthFactorOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyMyAuthFactorOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/VerifyMyAuthFactorOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyMyAuthFactorOTP(ctx, req.(*VerifyMyAuthFactorOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RemoveMyAuthFactorOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMyAuthFactorOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RemoveMyAuthFactorOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/RemoveMyAuthFactorOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RemoveMyAuthFactorOTP(ctx, req.(*RemoveMyAuthFactorOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AddMyAuthFactorU2F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMyAuthFactorU2FRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AddMyAuthFactorU2F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/AddMyAuthFactorU2F",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AddMyAuthFactorU2F(ctx, req.(*AddMyAuthFactorU2FRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyMyAuthFactorU2F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMyAuthFactorU2FRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyMyAuthFactorU2F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/VerifyMyAuthFactorU2F",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyMyAuthFactorU2F(ctx, req.(*VerifyMyAuthFactorU2FRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RemoveMyAuthFactorU2F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMyAuthFactorU2FRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RemoveMyAuthFactorU2F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/RemoveMyAuthFactorU2F",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RemoveMyAuthFactorU2F(ctx, req.(*RemoveMyAuthFactorU2FRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMyPasswordless_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyPasswordlessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMyPasswordless(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ListMyPasswordless",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMyPasswordless(ctx, req.(*ListMyPasswordlessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AddMyPasswordless_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMyPasswordlessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AddMyPasswordless(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/AddMyPasswordless",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AddMyPasswordless(ctx, req.(*AddMyPasswordlessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyMyPasswordless_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMyPasswordlessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyMyPasswordless(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/VerifyMyPasswordless",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyMyPasswordless(ctx, req.(*VerifyMyPasswordlessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RemoveMyPasswordless_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMyPasswordlessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RemoveMyPasswordless(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/RemoveMyPasswordless",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RemoveMyPasswordless(ctx, req.(*RemoveMyPasswordlessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMyUserGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyUserGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMyUserGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ListMyUserGrants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMyUserGrants(ctx, req.(*ListMyUserGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMyProjectOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyProjectOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMyProjectOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ListMyProjectOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMyProjectOrgs(ctx, req.(*ListMyProjectOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMyZitadelFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyZitadelFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMyZitadelFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ListMyZitadelFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMyZitadelFeatures(ctx, req.(*ListMyZitadelFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMyZitadelPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyZitadelPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMyZitadelPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ListMyZitadelPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMyZitadelPermissions(ctx, req.(*ListMyZitadelPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListMyProjectPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyProjectPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListMyProjectPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.auth.v1.AuthService/ListMyProjectPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListMyProjectPermissions(ctx, req.(*ListMyProjectPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.auth.v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _AuthService_Healthz_Handler,
		},
		{
			MethodName: "GetMyUser",
			Handler:    _AuthService_GetMyUser_Handler,
		},
		{
			MethodName: "ListMyUserChanges",
			Handler:    _AuthService_ListMyUserChanges_Handler,
		},
		{
			MethodName: "ListMyUserSessions",
			Handler:    _AuthService_ListMyUserSessions_Handler,
		},
		{
			MethodName: "UpdateMyUserName",
			Handler:    _AuthService_UpdateMyUserName_Handler,
		},
		{
			MethodName: "GetMyPasswordComplexityPolicy",
			Handler:    _AuthService_GetMyPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "UpdateMyPassword",
			Handler:    _AuthService_UpdateMyPassword_Handler,
		},
		{
			MethodName: "GetMyProfile",
			Handler:    _AuthService_GetMyProfile_Handler,
		},
		{
			MethodName: "UpdateMyProfile",
			Handler:    _AuthService_UpdateMyProfile_Handler,
		},
		{
			MethodName: "GetMyEmail",
			Handler:    _AuthService_GetMyEmail_Handler,
		},
		{
			MethodName: "SetMyEmail",
			Handler:    _AuthService_SetMyEmail_Handler,
		},
		{
			MethodName: "VerifyMyEmail",
			Handler:    _AuthService_VerifyMyEmail_Handler,
		},
		{
			MethodName: "ResendMyEmailVerification",
			Handler:    _AuthService_ResendMyEmailVerification_Handler,
		},
		{
			MethodName: "GetMyPhone",
			Handler:    _AuthService_GetMyPhone_Handler,
		},
		{
			MethodName: "SetMyPhone",
			Handler:    _AuthService_SetMyPhone_Handler,
		},
		{
			MethodName: "VerifyMyPhone",
			Handler:    _AuthService_VerifyMyPhone_Handler,
		},
		{
			MethodName: "ResendMyPhoneVerification",
			Handler:    _AuthService_ResendMyPhoneVerification_Handler,
		},
		{
			MethodName: "RemoveMyPhone",
			Handler:    _AuthService_RemoveMyPhone_Handler,
		},
		{
			MethodName: "ListMyLinkedIDPs",
			Handler:    _AuthService_ListMyLinkedIDPs_Handler,
		},
		{
			MethodName: "RemoveMyLinkedIDP",
			Handler:    _AuthService_RemoveMyLinkedIDP_Handler,
		},
		{
			MethodName: "ListMyAuthFactors",
			Handler:    _AuthService_ListMyAuthFactors_Handler,
		},
		{
			MethodName: "AddMyAuthFactorOTP",
			Handler:    _AuthService_AddMyAuthFactorOTP_Handler,
		},
		{
			MethodName: "VerifyMyAuthFactorOTP",
			Handler:    _AuthService_VerifyMyAuthFactorOTP_Handler,
		},
		{
			MethodName: "RemoveMyAuthFactorOTP",
			Handler:    _AuthService_RemoveMyAuthFactorOTP_Handler,
		},
		{
			MethodName: "AddMyAuthFactorU2F",
			Handler:    _AuthService_AddMyAuthFactorU2F_Handler,
		},
		{
			MethodName: "VerifyMyAuthFactorU2F",
			Handler:    _AuthService_VerifyMyAuthFactorU2F_Handler,
		},
		{
			MethodName: "RemoveMyAuthFactorU2F",
			Handler:    _AuthService_RemoveMyAuthFactorU2F_Handler,
		},
		{
			MethodName: "ListMyPasswordless",
			Handler:    _AuthService_ListMyPasswordless_Handler,
		},
		{
			MethodName: "AddMyPasswordless",
			Handler:    _AuthService_AddMyPasswordless_Handler,
		},
		{
			MethodName: "VerifyMyPasswordless",
			Handler:    _AuthService_VerifyMyPasswordless_Handler,
		},
		{
			MethodName: "RemoveMyPasswordless",
			Handler:    _AuthService_RemoveMyPasswordless_Handler,
		},
		{
			MethodName: "ListMyUserGrants",
			Handler:    _AuthService_ListMyUserGrants_Handler,
		},
		{
			MethodName: "ListMyProjectOrgs",
			Handler:    _AuthService_ListMyProjectOrgs_Handler,
		},
		{
			MethodName: "ListMyZitadelFeatures",
			Handler:    _AuthService_ListMyZitadelFeatures_Handler,
		},
		{
			MethodName: "ListMyZitadelPermissions",
			Handler:    _AuthService_ListMyZitadelPermissions_Handler,
		},
		{
			MethodName: "ListMyProjectPermissions",
			Handler:    _AuthService_ListMyProjectPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/auth.proto",
}
