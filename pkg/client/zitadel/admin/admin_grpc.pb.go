// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	//Indicates if ZITADEL is running.
	// It respondes as soon as ZITADEL started
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	//Checks whether an organisation exists by the given parameters
	IsOrgUnique(ctx context.Context, in *IsOrgUniqueRequest, opts ...grpc.CallOption) (*IsOrgUniqueResponse, error)
	// Returns an organisation by id
	GetOrgByID(ctx context.Context, in *GetOrgByIDRequest, opts ...grpc.CallOption) (*GetOrgByIDResponse, error)
	//Returns all organisations matching the request
	// all queries need to match (AND)
	ListOrgs(ctx context.Context, in *ListOrgsRequest, opts ...grpc.CallOption) (*ListOrgsResponse, error)
	//Creates a new org and user
	// and adds the user to the orgs members as ORG_OWNER
	SetUpOrg(ctx context.Context, in *SetUpOrgRequest, opts ...grpc.CallOption) (*SetUpOrgResponse, error)
	// Returns a identity provider configuration of the IAM
	GetIDPByID(ctx context.Context, in *GetIDPByIDRequest, opts ...grpc.CallOption) (*GetIDPByIDResponse, error)
	// Returns all identity provider configurations of the IAM
	ListIDPs(ctx context.Context, in *ListIDPsRequest, opts ...grpc.CallOption) (*ListIDPsResponse, error)
	// Adds a new oidc identity provider configuration the IAM
	AddOIDCIDP(ctx context.Context, in *AddOIDCIDPRequest, opts ...grpc.CallOption) (*AddOIDCIDPResponse, error)
	//Updates the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDP(ctx context.Context, in *UpdateIDPRequest, opts ...grpc.CallOption) (*UpdateIDPResponse, error)
	//Sets the state of the idp to IDP_STATE_INACTIVE
	// the state MUST be IDP_STATE_ACTIVE for this call
	DeactivateIDP(ctx context.Context, in *DeactivateIDPRequest, opts ...grpc.CallOption) (*DeactivateIDPResponse, error)
	//Sets the state of the idp to IDP_STATE_ACTIVE
	// the state MUST be IDP_STATE_INACTIVE for this call
	ReactivateIDP(ctx context.Context, in *ReactivateIDPRequest, opts ...grpc.CallOption) (*ReactivateIDPResponse, error)
	//RemoveIDP deletes the IDP permanetly
	RemoveIDP(ctx context.Context, in *RemoveIDPRequest, opts ...grpc.CallOption) (*RemoveIDPResponse, error)
	//Updates the oidc configuration of the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDPOIDCConfig(ctx context.Context, in *UpdateIDPOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateIDPOIDCConfigResponse, error)
	GetDefaultFeatures(ctx context.Context, in *GetDefaultFeaturesRequest, opts ...grpc.CallOption) (*GetDefaultFeaturesResponse, error)
	SetDefaultFeatures(ctx context.Context, in *SetDefaultFeaturesRequest, opts ...grpc.CallOption) (*SetDefaultFeaturesResponse, error)
	GetOrgFeatures(ctx context.Context, in *GetOrgFeaturesRequest, opts ...grpc.CallOption) (*GetOrgFeaturesResponse, error)
	SetOrgFeatures(ctx context.Context, in *SetOrgFeaturesRequest, opts ...grpc.CallOption) (*SetOrgFeaturesResponse, error)
	ResetOrgFeatures(ctx context.Context, in *ResetOrgFeaturesRequest, opts ...grpc.CallOption) (*ResetOrgFeaturesResponse, error)
	//Returns the IAM policy defined by the administrators of ZITADEL
	GetOrgIAMPolicy(ctx context.Context, in *GetOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetOrgIAMPolicyResponse, error)
	//Updates the default IAM policy.
	// it impacts all organisations without a customised policy
	UpdateOrgIAMPolicy(ctx context.Context, in *UpdateOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateOrgIAMPolicyResponse, error)
	//Returns the customised policy or the default if not customised
	GetCustomOrgIAMPolicy(ctx context.Context, in *GetCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetCustomOrgIAMPolicyResponse, error)
	//Defines a custom ORGIAM policy as specified
	AddCustomOrgIAMPolicy(ctx context.Context, in *AddCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*AddCustomOrgIAMPolicyResponse, error)
	//Updates a custom ORGIAM policy as specified
	UpdateCustomOrgIAMPolicy(ctx context.Context, in *UpdateCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomOrgIAMPolicyResponse, error)
	//Resets the org iam policy of the organisation to default
	// ZITADEL will fallback to the default policy defined by the ZITADEL administrators
	ResetCustomOrgIAMPolicyToDefault(ctx context.Context, in *ResetCustomOrgIAMPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomOrgIAMPolicyToDefaultResponse, error)
	//Returns the label policy defined by the administrators of ZITADEL
	GetLabelPolicy(ctx context.Context, in *GetLabelPolicyRequest, opts ...grpc.CallOption) (*GetLabelPolicyResponse, error)
	//Updates the default label policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLabelPolicy(ctx context.Context, in *UpdateLabelPolicyRequest, opts ...grpc.CallOption) (*UpdateLabelPolicyResponse, error)
	//Returns the login policy defined by the administrators of ZITADEL
	GetLoginPolicy(ctx context.Context, in *GetLoginPolicyRequest, opts ...grpc.CallOption) (*GetLoginPolicyResponse, error)
	//Updates the default login policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLoginPolicy(ctx context.Context, in *UpdateLoginPolicyRequest, opts ...grpc.CallOption) (*UpdateLoginPolicyResponse, error)
	//Returns the idps linked to the default login policy,
	// defined by the administrators of ZITADEL
	ListLoginPolicyIDPs(ctx context.Context, in *ListLoginPolicyIDPsRequest, opts ...grpc.CallOption) (*ListLoginPolicyIDPsResponse, error)
	//Adds the povided idp to the default login policy.
	// It impacts all organisations without a customised policy
	AddIDPToLoginPolicy(ctx context.Context, in *AddIDPToLoginPolicyRequest, opts ...grpc.CallOption) (*AddIDPToLoginPolicyResponse, error)
	//Removes the povided idp from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveIDPFromLoginPolicy(ctx context.Context, in *RemoveIDPFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveIDPFromLoginPolicyResponse, error)
	//Returns the available second factors defined by the administrators of ZITADEL
	ListLoginPolicySecondFactors(ctx context.Context, in *ListLoginPolicySecondFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicySecondFactorsResponse, error)
	//Adds a second factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddSecondFactorToLoginPolicy(ctx context.Context, in *AddSecondFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddSecondFactorToLoginPolicyResponse, error)
	//Removes a second factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveSecondFactorFromLoginPolicy(ctx context.Context, in *RemoveSecondFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveSecondFactorFromLoginPolicyResponse, error)
	//Returns the available multi factors defined by the administrators of ZITADEL
	ListLoginPolicyMultiFactors(ctx context.Context, in *ListLoginPolicyMultiFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicyMultiFactorsResponse, error)
	//Adds a multi factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddMultiFactorToLoginPolicy(ctx context.Context, in *AddMultiFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddMultiFactorToLoginPolicyResponse, error)
	//Removes a multi factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveMultiFactorFromLoginPolicy(ctx context.Context, in *RemoveMultiFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveMultiFactorFromLoginPolicyResponse, error)
	//Returns the password complexity policy defined by the administrators of ZITADEL
	GetPasswordComplexityPolicy(ctx context.Context, in *GetPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetPasswordComplexityPolicyResponse, error)
	//Updates the default password complexity policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordComplexityPolicy(ctx context.Context, in *UpdatePasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordComplexityPolicyResponse, error)
	//Returns the password age policy defined by the administrators of ZITADEL
	GetPasswordAgePolicy(ctx context.Context, in *GetPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetPasswordAgePolicyResponse, error)
	//Updates the default password age policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordAgePolicy(ctx context.Context, in *UpdatePasswordAgePolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordAgePolicyResponse, error)
	//Returns the password lockout policy defined by the administrators of ZITADEL
	GetPasswordLockoutPolicy(ctx context.Context, in *GetPasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*GetPasswordLockoutPolicyResponse, error)
	//Updates the default password lockout policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordLockoutPolicy(ctx context.Context, in *UpdatePasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordLockoutPolicyResponse, error)
	//Returns the IAM roles visible for the requested user
	ListIAMMemberRoles(ctx context.Context, in *ListIAMMemberRolesRequest, opts ...grpc.CallOption) (*ListIAMMemberRolesResponse, error)
	//Returns all members matching the request
	// all queries need to match (ANDed)
	ListIAMMembers(ctx context.Context, in *ListIAMMembersRequest, opts ...grpc.CallOption) (*ListIAMMembersResponse, error)
	//Adds a user to the membership list of ZITADEL with the given roles
	// undefined roles will be dropped
	AddIAMMember(ctx context.Context, in *AddIAMMemberRequest, opts ...grpc.CallOption) (*AddIAMMemberResponse, error)
	//Sets the given roles on a member.
	// The member has only roles provided by this call
	UpdateIAMMember(ctx context.Context, in *UpdateIAMMemberRequest, opts ...grpc.CallOption) (*UpdateIAMMemberResponse, error)
	//Removes the user from the membership list of ZITADEL
	RemoveIAMMember(ctx context.Context, in *RemoveIAMMemberRequest, opts ...grpc.CallOption) (*RemoveIAMMemberResponse, error)
	//Returns all stored read models of ZITADEL
	// views are used for search optimisation and optimise request latencies
	// they represent the delta of the event happend on the objects
	ListViews(ctx context.Context, in *ListViewsRequest, opts ...grpc.CallOption) (*ListViewsResponse, error)
	//Truncates the delta of the change stream
	// be carefull with this function because ZITADEL has to
	// recompute the deltas after they got cleared.
	// Search requests will return wrong results until all deltas are recomputed
	ClearView(ctx context.Context, in *ClearViewRequest, opts ...grpc.CallOption) (*ClearViewResponse, error)
	//Returns event descriptions which cannot be processed.
	// It's possible that some events need some retries.
	// For example if the SMTP-API wasn't able to send an email at the first time
	ListFailedEvents(ctx context.Context, in *ListFailedEventsRequest, opts ...grpc.CallOption) (*ListFailedEventsResponse, error)
	//Deletes the event from failed events view.
	// the event is not removed from the change stream
	// This call is usefull if the system was able to process the event later.
	// e.g. if the second try of sending an email was successful. the first try produced a
	// failed event. You can find out if it worked on the `failure_count`
	RemoveFailedEvent(ctx context.Context, in *RemoveFailedEventRequest, opts ...grpc.CallOption) (*RemoveFailedEventResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) IsOrgUnique(ctx context.Context, in *IsOrgUniqueRequest, opts ...grpc.CallOption) (*IsOrgUniqueResponse, error) {
	out := new(IsOrgUniqueResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/IsOrgUnique", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOrgByID(ctx context.Context, in *GetOrgByIDRequest, opts ...grpc.CallOption) (*GetOrgByIDResponse, error) {
	out := new(GetOrgByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetOrgByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrgs(ctx context.Context, in *ListOrgsRequest, opts ...grpc.CallOption) (*ListOrgsResponse, error) {
	out := new(ListOrgsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetUpOrg(ctx context.Context, in *SetUpOrgRequest, opts ...grpc.CallOption) (*SetUpOrgResponse, error) {
	out := new(SetUpOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetUpOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetIDPByID(ctx context.Context, in *GetIDPByIDRequest, opts ...grpc.CallOption) (*GetIDPByIDResponse, error) {
	out := new(GetIDPByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetIDPByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIDPs(ctx context.Context, in *ListIDPsRequest, opts ...grpc.CallOption) (*ListIDPsResponse, error) {
	out := new(ListIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddOIDCIDP(ctx context.Context, in *AddOIDCIDPRequest, opts ...grpc.CallOption) (*AddOIDCIDPResponse, error) {
	out := new(AddOIDCIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddOIDCIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIDP(ctx context.Context, in *UpdateIDPRequest, opts ...grpc.CallOption) (*UpdateIDPResponse, error) {
	out := new(UpdateIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeactivateIDP(ctx context.Context, in *DeactivateIDPRequest, opts ...grpc.CallOption) (*DeactivateIDPResponse, error) {
	out := new(DeactivateIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/DeactivateIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ReactivateIDP(ctx context.Context, in *ReactivateIDPRequest, opts ...grpc.CallOption) (*ReactivateIDPResponse, error) {
	out := new(ReactivateIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ReactivateIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveIDP(ctx context.Context, in *RemoveIDPRequest, opts ...grpc.CallOption) (*RemoveIDPResponse, error) {
	out := new(RemoveIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIDPOIDCConfig(ctx context.Context, in *UpdateIDPOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateIDPOIDCConfigResponse, error) {
	out := new(UpdateIDPOIDCConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateIDPOIDCConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultFeatures(ctx context.Context, in *GetDefaultFeaturesRequest, opts ...grpc.CallOption) (*GetDefaultFeaturesResponse, error) {
	out := new(GetDefaultFeaturesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDefaultFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultFeatures(ctx context.Context, in *SetDefaultFeaturesRequest, opts ...grpc.CallOption) (*SetDefaultFeaturesResponse, error) {
	out := new(SetDefaultFeaturesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetDefaultFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOrgFeatures(ctx context.Context, in *GetOrgFeaturesRequest, opts ...grpc.CallOption) (*GetOrgFeaturesResponse, error) {
	out := new(GetOrgFeaturesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetOrgFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetOrgFeatures(ctx context.Context, in *SetOrgFeaturesRequest, opts ...grpc.CallOption) (*SetOrgFeaturesResponse, error) {
	out := new(SetOrgFeaturesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetOrgFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetOrgFeatures(ctx context.Context, in *ResetOrgFeaturesRequest, opts ...grpc.CallOption) (*ResetOrgFeaturesResponse, error) {
	out := new(ResetOrgFeaturesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetOrgFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOrgIAMPolicy(ctx context.Context, in *GetOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetOrgIAMPolicyResponse, error) {
	out := new(GetOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateOrgIAMPolicy(ctx context.Context, in *UpdateOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateOrgIAMPolicyResponse, error) {
	out := new(UpdateOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomOrgIAMPolicy(ctx context.Context, in *GetCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetCustomOrgIAMPolicyResponse, error) {
	out := new(GetCustomOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetCustomOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddCustomOrgIAMPolicy(ctx context.Context, in *AddCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*AddCustomOrgIAMPolicyResponse, error) {
	out := new(AddCustomOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddCustomOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateCustomOrgIAMPolicy(ctx context.Context, in *UpdateCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomOrgIAMPolicyResponse, error) {
	out := new(UpdateCustomOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateCustomOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomOrgIAMPolicyToDefault(ctx context.Context, in *ResetCustomOrgIAMPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomOrgIAMPolicyToDefaultResponse, error) {
	out := new(ResetCustomOrgIAMPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetCustomOrgIAMPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLabelPolicy(ctx context.Context, in *GetLabelPolicyRequest, opts ...grpc.CallOption) (*GetLabelPolicyResponse, error) {
	out := new(GetLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLabelPolicy(ctx context.Context, in *UpdateLabelPolicyRequest, opts ...grpc.CallOption) (*UpdateLabelPolicyResponse, error) {
	out := new(UpdateLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLoginPolicy(ctx context.Context, in *GetLoginPolicyRequest, opts ...grpc.CallOption) (*GetLoginPolicyResponse, error) {
	out := new(GetLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLoginPolicy(ctx context.Context, in *UpdateLoginPolicyRequest, opts ...grpc.CallOption) (*UpdateLoginPolicyResponse, error) {
	out := new(UpdateLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLoginPolicyIDPs(ctx context.Context, in *ListLoginPolicyIDPsRequest, opts ...grpc.CallOption) (*ListLoginPolicyIDPsResponse, error) {
	out := new(ListLoginPolicyIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListLoginPolicyIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddIDPToLoginPolicy(ctx context.Context, in *AddIDPToLoginPolicyRequest, opts ...grpc.CallOption) (*AddIDPToLoginPolicyResponse, error) {
	out := new(AddIDPToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddIDPToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveIDPFromLoginPolicy(ctx context.Context, in *RemoveIDPFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveIDPFromLoginPolicyResponse, error) {
	out := new(RemoveIDPFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveIDPFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLoginPolicySecondFactors(ctx context.Context, in *ListLoginPolicySecondFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicySecondFactorsResponse, error) {
	out := new(ListLoginPolicySecondFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListLoginPolicySecondFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddSecondFactorToLoginPolicy(ctx context.Context, in *AddSecondFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddSecondFactorToLoginPolicyResponse, error) {
	out := new(AddSecondFactorToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddSecondFactorToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveSecondFactorFromLoginPolicy(ctx context.Context, in *RemoveSecondFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveSecondFactorFromLoginPolicyResponse, error) {
	out := new(RemoveSecondFactorFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveSecondFactorFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLoginPolicyMultiFactors(ctx context.Context, in *ListLoginPolicyMultiFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicyMultiFactorsResponse, error) {
	out := new(ListLoginPolicyMultiFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListLoginPolicyMultiFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddMultiFactorToLoginPolicy(ctx context.Context, in *AddMultiFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddMultiFactorToLoginPolicyResponse, error) {
	out := new(AddMultiFactorToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddMultiFactorToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveMultiFactorFromLoginPolicy(ctx context.Context, in *RemoveMultiFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveMultiFactorFromLoginPolicyResponse, error) {
	out := new(RemoveMultiFactorFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveMultiFactorFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPasswordComplexityPolicy(ctx context.Context, in *GetPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetPasswordComplexityPolicyResponse, error) {
	out := new(GetPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePasswordComplexityPolicy(ctx context.Context, in *UpdatePasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordComplexityPolicyResponse, error) {
	out := new(UpdatePasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdatePasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPasswordAgePolicy(ctx context.Context, in *GetPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetPasswordAgePolicyResponse, error) {
	out := new(GetPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetPasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePasswordAgePolicy(ctx context.Context, in *UpdatePasswordAgePolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordAgePolicyResponse, error) {
	out := new(UpdatePasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdatePasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPasswordLockoutPolicy(ctx context.Context, in *GetPasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*GetPasswordLockoutPolicyResponse, error) {
	out := new(GetPasswordLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetPasswordLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePasswordLockoutPolicy(ctx context.Context, in *UpdatePasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordLockoutPolicyResponse, error) {
	out := new(UpdatePasswordLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdatePasswordLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIAMMemberRoles(ctx context.Context, in *ListIAMMemberRolesRequest, opts ...grpc.CallOption) (*ListIAMMemberRolesResponse, error) {
	out := new(ListIAMMemberRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListIAMMemberRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIAMMembers(ctx context.Context, in *ListIAMMembersRequest, opts ...grpc.CallOption) (*ListIAMMembersResponse, error) {
	out := new(ListIAMMembersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListIAMMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddIAMMember(ctx context.Context, in *AddIAMMemberRequest, opts ...grpc.CallOption) (*AddIAMMemberResponse, error) {
	out := new(AddIAMMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddIAMMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIAMMember(ctx context.Context, in *UpdateIAMMemberRequest, opts ...grpc.CallOption) (*UpdateIAMMemberResponse, error) {
	out := new(UpdateIAMMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateIAMMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveIAMMember(ctx context.Context, in *RemoveIAMMemberRequest, opts ...grpc.CallOption) (*RemoveIAMMemberResponse, error) {
	out := new(RemoveIAMMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveIAMMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListViews(ctx context.Context, in *ListViewsRequest, opts ...grpc.CallOption) (*ListViewsResponse, error) {
	out := new(ListViewsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ClearView(ctx context.Context, in *ClearViewRequest, opts ...grpc.CallOption) (*ClearViewResponse, error) {
	out := new(ClearViewResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ClearView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListFailedEvents(ctx context.Context, in *ListFailedEventsRequest, opts ...grpc.CallOption) (*ListFailedEventsResponse, error) {
	out := new(ListFailedEventsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListFailedEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveFailedEvent(ctx context.Context, in *RemoveFailedEventRequest, opts ...grpc.CallOption) (*RemoveFailedEventResponse, error) {
	out := new(RemoveFailedEventResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveFailedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	//Indicates if ZITADEL is running.
	// It respondes as soon as ZITADEL started
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	//Checks whether an organisation exists by the given parameters
	IsOrgUnique(context.Context, *IsOrgUniqueRequest) (*IsOrgUniqueResponse, error)
	// Returns an organisation by id
	GetOrgByID(context.Context, *GetOrgByIDRequest) (*GetOrgByIDResponse, error)
	//Returns all organisations matching the request
	// all queries need to match (AND)
	ListOrgs(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error)
	//Creates a new org and user
	// and adds the user to the orgs members as ORG_OWNER
	SetUpOrg(context.Context, *SetUpOrgRequest) (*SetUpOrgResponse, error)
	// Returns a identity provider configuration of the IAM
	GetIDPByID(context.Context, *GetIDPByIDRequest) (*GetIDPByIDResponse, error)
	// Returns all identity provider configurations of the IAM
	ListIDPs(context.Context, *ListIDPsRequest) (*ListIDPsResponse, error)
	// Adds a new oidc identity provider configuration the IAM
	AddOIDCIDP(context.Context, *AddOIDCIDPRequest) (*AddOIDCIDPResponse, error)
	//Updates the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDP(context.Context, *UpdateIDPRequest) (*UpdateIDPResponse, error)
	//Sets the state of the idp to IDP_STATE_INACTIVE
	// the state MUST be IDP_STATE_ACTIVE for this call
	DeactivateIDP(context.Context, *DeactivateIDPRequest) (*DeactivateIDPResponse, error)
	//Sets the state of the idp to IDP_STATE_ACTIVE
	// the state MUST be IDP_STATE_INACTIVE for this call
	ReactivateIDP(context.Context, *ReactivateIDPRequest) (*ReactivateIDPResponse, error)
	//RemoveIDP deletes the IDP permanetly
	RemoveIDP(context.Context, *RemoveIDPRequest) (*RemoveIDPResponse, error)
	//Updates the oidc configuration of the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDPOIDCConfig(context.Context, *UpdateIDPOIDCConfigRequest) (*UpdateIDPOIDCConfigResponse, error)
	GetDefaultFeatures(context.Context, *GetDefaultFeaturesRequest) (*GetDefaultFeaturesResponse, error)
	SetDefaultFeatures(context.Context, *SetDefaultFeaturesRequest) (*SetDefaultFeaturesResponse, error)
	GetOrgFeatures(context.Context, *GetOrgFeaturesRequest) (*GetOrgFeaturesResponse, error)
	SetOrgFeatures(context.Context, *SetOrgFeaturesRequest) (*SetOrgFeaturesResponse, error)
	ResetOrgFeatures(context.Context, *ResetOrgFeaturesRequest) (*ResetOrgFeaturesResponse, error)
	//Returns the IAM policy defined by the administrators of ZITADEL
	GetOrgIAMPolicy(context.Context, *GetOrgIAMPolicyRequest) (*GetOrgIAMPolicyResponse, error)
	//Updates the default IAM policy.
	// it impacts all organisations without a customised policy
	UpdateOrgIAMPolicy(context.Context, *UpdateOrgIAMPolicyRequest) (*UpdateOrgIAMPolicyResponse, error)
	//Returns the customised policy or the default if not customised
	GetCustomOrgIAMPolicy(context.Context, *GetCustomOrgIAMPolicyRequest) (*GetCustomOrgIAMPolicyResponse, error)
	//Defines a custom ORGIAM policy as specified
	AddCustomOrgIAMPolicy(context.Context, *AddCustomOrgIAMPolicyRequest) (*AddCustomOrgIAMPolicyResponse, error)
	//Updates a custom ORGIAM policy as specified
	UpdateCustomOrgIAMPolicy(context.Context, *UpdateCustomOrgIAMPolicyRequest) (*UpdateCustomOrgIAMPolicyResponse, error)
	//Resets the org iam policy of the organisation to default
	// ZITADEL will fallback to the default policy defined by the ZITADEL administrators
	ResetCustomOrgIAMPolicyToDefault(context.Context, *ResetCustomOrgIAMPolicyToDefaultRequest) (*ResetCustomOrgIAMPolicyToDefaultResponse, error)
	//Returns the label policy defined by the administrators of ZITADEL
	GetLabelPolicy(context.Context, *GetLabelPolicyRequest) (*GetLabelPolicyResponse, error)
	//Updates the default label policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLabelPolicy(context.Context, *UpdateLabelPolicyRequest) (*UpdateLabelPolicyResponse, error)
	//Returns the login policy defined by the administrators of ZITADEL
	GetLoginPolicy(context.Context, *GetLoginPolicyRequest) (*GetLoginPolicyResponse, error)
	//Updates the default login policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLoginPolicy(context.Context, *UpdateLoginPolicyRequest) (*UpdateLoginPolicyResponse, error)
	//Returns the idps linked to the default login policy,
	// defined by the administrators of ZITADEL
	ListLoginPolicyIDPs(context.Context, *ListLoginPolicyIDPsRequest) (*ListLoginPolicyIDPsResponse, error)
	//Adds the povided idp to the default login policy.
	// It impacts all organisations without a customised policy
	AddIDPToLoginPolicy(context.Context, *AddIDPToLoginPolicyRequest) (*AddIDPToLoginPolicyResponse, error)
	//Removes the povided idp from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveIDPFromLoginPolicy(context.Context, *RemoveIDPFromLoginPolicyRequest) (*RemoveIDPFromLoginPolicyResponse, error)
	//Returns the available second factors defined by the administrators of ZITADEL
	ListLoginPolicySecondFactors(context.Context, *ListLoginPolicySecondFactorsRequest) (*ListLoginPolicySecondFactorsResponse, error)
	//Adds a second factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddSecondFactorToLoginPolicy(context.Context, *AddSecondFactorToLoginPolicyRequest) (*AddSecondFactorToLoginPolicyResponse, error)
	//Removes a second factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveSecondFactorFromLoginPolicy(context.Context, *RemoveSecondFactorFromLoginPolicyRequest) (*RemoveSecondFactorFromLoginPolicyResponse, error)
	//Returns the available multi factors defined by the administrators of ZITADEL
	ListLoginPolicyMultiFactors(context.Context, *ListLoginPolicyMultiFactorsRequest) (*ListLoginPolicyMultiFactorsResponse, error)
	//Adds a multi factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddMultiFactorToLoginPolicy(context.Context, *AddMultiFactorToLoginPolicyRequest) (*AddMultiFactorToLoginPolicyResponse, error)
	//Removes a multi factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveMultiFactorFromLoginPolicy(context.Context, *RemoveMultiFactorFromLoginPolicyRequest) (*RemoveMultiFactorFromLoginPolicyResponse, error)
	//Returns the password complexity policy defined by the administrators of ZITADEL
	GetPasswordComplexityPolicy(context.Context, *GetPasswordComplexityPolicyRequest) (*GetPasswordComplexityPolicyResponse, error)
	//Updates the default password complexity policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordComplexityPolicy(context.Context, *UpdatePasswordComplexityPolicyRequest) (*UpdatePasswordComplexityPolicyResponse, error)
	//Returns the password age policy defined by the administrators of ZITADEL
	GetPasswordAgePolicy(context.Context, *GetPasswordAgePolicyRequest) (*GetPasswordAgePolicyResponse, error)
	//Updates the default password age policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordAgePolicy(context.Context, *UpdatePasswordAgePolicyRequest) (*UpdatePasswordAgePolicyResponse, error)
	//Returns the password lockout policy defined by the administrators of ZITADEL
	GetPasswordLockoutPolicy(context.Context, *GetPasswordLockoutPolicyRequest) (*GetPasswordLockoutPolicyResponse, error)
	//Updates the default password lockout policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordLockoutPolicy(context.Context, *UpdatePasswordLockoutPolicyRequest) (*UpdatePasswordLockoutPolicyResponse, error)
	//Returns the IAM roles visible for the requested user
	ListIAMMemberRoles(context.Context, *ListIAMMemberRolesRequest) (*ListIAMMemberRolesResponse, error)
	//Returns all members matching the request
	// all queries need to match (ANDed)
	ListIAMMembers(context.Context, *ListIAMMembersRequest) (*ListIAMMembersResponse, error)
	//Adds a user to the membership list of ZITADEL with the given roles
	// undefined roles will be dropped
	AddIAMMember(context.Context, *AddIAMMemberRequest) (*AddIAMMemberResponse, error)
	//Sets the given roles on a member.
	// The member has only roles provided by this call
	UpdateIAMMember(context.Context, *UpdateIAMMemberRequest) (*UpdateIAMMemberResponse, error)
	//Removes the user from the membership list of ZITADEL
	RemoveIAMMember(context.Context, *RemoveIAMMemberRequest) (*RemoveIAMMemberResponse, error)
	//Returns all stored read models of ZITADEL
	// views are used for search optimisation and optimise request latencies
	// they represent the delta of the event happend on the objects
	ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error)
	//Truncates the delta of the change stream
	// be carefull with this function because ZITADEL has to
	// recompute the deltas after they got cleared.
	// Search requests will return wrong results until all deltas are recomputed
	ClearView(context.Context, *ClearViewRequest) (*ClearViewResponse, error)
	//Returns event descriptions which cannot be processed.
	// It's possible that some events need some retries.
	// For example if the SMTP-API wasn't able to send an email at the first time
	ListFailedEvents(context.Context, *ListFailedEventsRequest) (*ListFailedEventsResponse, error)
	//Deletes the event from failed events view.
	// the event is not removed from the change stream
	// This call is usefull if the system was able to process the event later.
	// e.g. if the second try of sending an email was successful. the first try produced a
	// failed event. You can find out if it worked on the `failure_count`
	RemoveFailedEvent(context.Context, *RemoveFailedEventRequest) (*RemoveFailedEventResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedAdminServiceServer) IsOrgUnique(context.Context, *IsOrgUniqueRequest) (*IsOrgUniqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOrgUnique not implemented")
}
func (UnimplementedAdminServiceServer) GetOrgByID(context.Context, *GetOrgByIDRequest) (*GetOrgByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByID not implemented")
}
func (UnimplementedAdminServiceServer) ListOrgs(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgs not implemented")
}
func (UnimplementedAdminServiceServer) SetUpOrg(context.Context, *SetUpOrgRequest) (*SetUpOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpOrg not implemented")
}
func (UnimplementedAdminServiceServer) GetIDPByID(context.Context, *GetIDPByIDRequest) (*GetIDPByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDPByID not implemented")
}
func (UnimplementedAdminServiceServer) ListIDPs(context.Context, *ListIDPsRequest) (*ListIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIDPs not implemented")
}
func (UnimplementedAdminServiceServer) AddOIDCIDP(context.Context, *AddOIDCIDPRequest) (*AddOIDCIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOIDCIDP not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIDP(context.Context, *UpdateIDPRequest) (*UpdateIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDP not implemented")
}
func (UnimplementedAdminServiceServer) DeactivateIDP(context.Context, *DeactivateIDPRequest) (*DeactivateIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateIDP not implemented")
}
func (UnimplementedAdminServiceServer) ReactivateIDP(context.Context, *ReactivateIDPRequest) (*ReactivateIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateIDP not implemented")
}
func (UnimplementedAdminServiceServer) RemoveIDP(context.Context, *RemoveIDPRequest) (*RemoveIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIDP not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIDPOIDCConfig(context.Context, *UpdateIDPOIDCConfigRequest) (*UpdateIDPOIDCConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDPOIDCConfig not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultFeatures(context.Context, *GetDefaultFeaturesRequest) (*GetDefaultFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultFeatures not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultFeatures(context.Context, *SetDefaultFeaturesRequest) (*SetDefaultFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultFeatures not implemented")
}
func (UnimplementedAdminServiceServer) GetOrgFeatures(context.Context, *GetOrgFeaturesRequest) (*GetOrgFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgFeatures not implemented")
}
func (UnimplementedAdminServiceServer) SetOrgFeatures(context.Context, *SetOrgFeaturesRequest) (*SetOrgFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgFeatures not implemented")
}
func (UnimplementedAdminServiceServer) ResetOrgFeatures(context.Context, *ResetOrgFeaturesRequest) (*ResetOrgFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetOrgFeatures not implemented")
}
func (UnimplementedAdminServiceServer) GetOrgIAMPolicy(context.Context, *GetOrgIAMPolicyRequest) (*GetOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateOrgIAMPolicy(context.Context, *UpdateOrgIAMPolicyRequest) (*UpdateOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomOrgIAMPolicy(context.Context, *GetCustomOrgIAMPolicyRequest) (*GetCustomOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) AddCustomOrgIAMPolicy(context.Context, *AddCustomOrgIAMPolicyRequest) (*AddCustomOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateCustomOrgIAMPolicy(context.Context, *UpdateCustomOrgIAMPolicyRequest) (*UpdateCustomOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomOrgIAMPolicyToDefault(context.Context, *ResetCustomOrgIAMPolicyToDefaultRequest) (*ResetCustomOrgIAMPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomOrgIAMPolicyToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetLabelPolicy(context.Context, *GetLabelPolicyRequest) (*GetLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateLabelPolicy(context.Context, *UpdateLabelPolicyRequest) (*UpdateLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabelPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetLoginPolicy(context.Context, *GetLoginPolicyRequest) (*GetLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateLoginPolicy(context.Context, *UpdateLoginPolicyRequest) (*UpdateLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListLoginPolicyIDPs(context.Context, *ListLoginPolicyIDPsRequest) (*ListLoginPolicyIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicyIDPs not implemented")
}
func (UnimplementedAdminServiceServer) AddIDPToLoginPolicy(context.Context, *AddIDPToLoginPolicyRequest) (*AddIDPToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIDPToLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveIDPFromLoginPolicy(context.Context, *RemoveIDPFromLoginPolicyRequest) (*RemoveIDPFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIDPFromLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListLoginPolicySecondFactors(context.Context, *ListLoginPolicySecondFactorsRequest) (*ListLoginPolicySecondFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicySecondFactors not implemented")
}
func (UnimplementedAdminServiceServer) AddSecondFactorToLoginPolicy(context.Context, *AddSecondFactorToLoginPolicyRequest) (*AddSecondFactorToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecondFactorToLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveSecondFactorFromLoginPolicy(context.Context, *RemoveSecondFactorFromLoginPolicyRequest) (*RemoveSecondFactorFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSecondFactorFromLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListLoginPolicyMultiFactors(context.Context, *ListLoginPolicyMultiFactorsRequest) (*ListLoginPolicyMultiFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicyMultiFactors not implemented")
}
func (UnimplementedAdminServiceServer) AddMultiFactorToLoginPolicy(context.Context, *AddMultiFactorToLoginPolicyRequest) (*AddMultiFactorToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiFactorToLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveMultiFactorFromLoginPolicy(context.Context, *RemoveMultiFactorFromLoginPolicyRequest) (*RemoveMultiFactorFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMultiFactorFromLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPasswordComplexityPolicy(context.Context, *GetPasswordComplexityPolicyRequest) (*GetPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordComplexityPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePasswordComplexityPolicy(context.Context, *UpdatePasswordComplexityPolicyRequest) (*UpdatePasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordComplexityPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPasswordAgePolicy(context.Context, *GetPasswordAgePolicyRequest) (*GetPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordAgePolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePasswordAgePolicy(context.Context, *UpdatePasswordAgePolicyRequest) (*UpdatePasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordAgePolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPasswordLockoutPolicy(context.Context, *GetPasswordLockoutPolicyRequest) (*GetPasswordLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordLockoutPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePasswordLockoutPolicy(context.Context, *UpdatePasswordLockoutPolicyRequest) (*UpdatePasswordLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordLockoutPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListIAMMemberRoles(context.Context, *ListIAMMemberRolesRequest) (*ListIAMMemberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIAMMemberRoles not implemented")
}
func (UnimplementedAdminServiceServer) ListIAMMembers(context.Context, *ListIAMMembersRequest) (*ListIAMMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIAMMembers not implemented")
}
func (UnimplementedAdminServiceServer) AddIAMMember(context.Context, *AddIAMMemberRequest) (*AddIAMMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIAMMember not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIAMMember(context.Context, *UpdateIAMMemberRequest) (*UpdateIAMMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIAMMember not implemented")
}
func (UnimplementedAdminServiceServer) RemoveIAMMember(context.Context, *RemoveIAMMemberRequest) (*RemoveIAMMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIAMMember not implemented")
}
func (UnimplementedAdminServiceServer) ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViews not implemented")
}
func (UnimplementedAdminServiceServer) ClearView(context.Context, *ClearViewRequest) (*ClearViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearView not implemented")
}
func (UnimplementedAdminServiceServer) ListFailedEvents(context.Context, *ListFailedEventsRequest) (*ListFailedEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFailedEvents not implemented")
}
func (UnimplementedAdminServiceServer) RemoveFailedEvent(context.Context, *RemoveFailedEventRequest) (*RemoveFailedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFailedEvent not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_IsOrgUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsOrgUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).IsOrgUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/IsOrgUnique",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).IsOrgUnique(ctx, req.(*IsOrgUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOrgByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOrgByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetOrgByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOrgByID(ctx, req.(*GetOrgByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrgs(ctx, req.(*ListOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetUpOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetUpOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetUpOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetUpOrg(ctx, req.(*SetUpOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetIDPByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIDPByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetIDPByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetIDPByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetIDPByID(ctx, req.(*GetIDPByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIDPs(ctx, req.(*ListIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddOIDCIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOIDCIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddOIDCIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddOIDCIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddOIDCIDP(ctx, req.(*AddOIDCIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIDP(ctx, req.(*UpdateIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeactivateIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeactivateIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/DeactivateIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeactivateIDP(ctx, req.(*DeactivateIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ReactivateIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ReactivateIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ReactivateIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ReactivateIDP(ctx, req.(*ReactivateIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveIDP(ctx, req.(*RemoveIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIDPOIDCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIDPOIDCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIDPOIDCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateIDPOIDCConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIDPOIDCConfig(ctx, req.(*UpdateIDPOIDCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDefaultFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultFeatures(ctx, req.(*GetDefaultFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetDefaultFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultFeatures(ctx, req.(*SetDefaultFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOrgFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOrgFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetOrgFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOrgFeatures(ctx, req.(*GetOrgFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetOrgFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrgFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetOrgFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetOrgFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetOrgFeatures(ctx, req.(*SetOrgFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetOrgFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetOrgFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetOrgFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetOrgFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetOrgFeatures(ctx, req.(*ResetOrgFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOrgIAMPolicy(ctx, req.(*GetOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateOrgIAMPolicy(ctx, req.(*UpdateOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetCustomOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomOrgIAMPolicy(ctx, req.(*GetCustomOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddCustomOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddCustomOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddCustomOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddCustomOrgIAMPolicy(ctx, req.(*AddCustomOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateCustomOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateCustomOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateCustomOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateCustomOrgIAMPolicy(ctx, req.(*UpdateCustomOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomOrgIAMPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomOrgIAMPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomOrgIAMPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetCustomOrgIAMPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomOrgIAMPolicyToDefault(ctx, req.(*ResetCustomOrgIAMPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLabelPolicy(ctx, req.(*GetLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLabelPolicy(ctx, req.(*UpdateLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLoginPolicy(ctx, req.(*GetLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLoginPolicy(ctx, req.(*UpdateLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLoginPolicyIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicyIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLoginPolicyIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListLoginPolicyIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLoginPolicyIDPs(ctx, req.(*ListLoginPolicyIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddIDPToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIDPToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddIDPToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddIDPToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddIDPToLoginPolicy(ctx, req.(*AddIDPToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveIDPFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIDPFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveIDPFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveIDPFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveIDPFromLoginPolicy(ctx, req.(*RemoveIDPFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLoginPolicySecondFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicySecondFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLoginPolicySecondFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListLoginPolicySecondFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLoginPolicySecondFactors(ctx, req.(*ListLoginPolicySecondFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddSecondFactorToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecondFactorToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddSecondFactorToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddSecondFactorToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddSecondFactorToLoginPolicy(ctx, req.(*AddSecondFactorToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveSecondFactorFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSecondFactorFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveSecondFactorFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveSecondFactorFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveSecondFactorFromLoginPolicy(ctx, req.(*RemoveSecondFactorFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLoginPolicyMultiFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicyMultiFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLoginPolicyMultiFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListLoginPolicyMultiFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLoginPolicyMultiFactors(ctx, req.(*ListLoginPolicyMultiFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddMultiFactorToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMultiFactorToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddMultiFactorToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddMultiFactorToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddMultiFactorToLoginPolicy(ctx, req.(*AddMultiFactorToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveMultiFactorFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMultiFactorFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveMultiFactorFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveMultiFactorFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveMultiFactorFromLoginPolicy(ctx, req.(*RemoveMultiFactorFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPasswordComplexityPolicy(ctx, req.(*GetPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdatePasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePasswordComplexityPolicy(ctx, req.(*UpdatePasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetPasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPasswordAgePolicy(ctx, req.(*GetPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdatePasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePasswordAgePolicy(ctx, req.(*UpdatePasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPasswordLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPasswordLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetPasswordLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPasswordLockoutPolicy(ctx, req.(*GetPasswordLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePasswordLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePasswordLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdatePasswordLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePasswordLockoutPolicy(ctx, req.(*UpdatePasswordLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIAMMemberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIAMMemberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIAMMemberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListIAMMemberRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIAMMemberRoles(ctx, req.(*ListIAMMemberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIAMMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIAMMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIAMMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListIAMMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIAMMembers(ctx, req.(*ListIAMMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddIAMMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIAMMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddIAMMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddIAMMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddIAMMember(ctx, req.(*AddIAMMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIAMMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIAMMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIAMMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateIAMMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIAMMember(ctx, req.(*UpdateIAMMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveIAMMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIAMMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveIAMMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveIAMMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveIAMMember(ctx, req.(*RemoveIAMMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListViews(ctx, req.(*ListViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ClearView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ClearView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ClearView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ClearView(ctx, req.(*ClearViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListFailedEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFailedEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListFailedEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListFailedEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListFailedEvents(ctx, req.(*ListFailedEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveFailedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFailedEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveFailedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveFailedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveFailedEvent(ctx, req.(*RemoveFailedEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.admin.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _AdminService_Healthz_Handler,
		},
		{
			MethodName: "IsOrgUnique",
			Handler:    _AdminService_IsOrgUnique_Handler,
		},
		{
			MethodName: "GetOrgByID",
			Handler:    _AdminService_GetOrgByID_Handler,
		},
		{
			MethodName: "ListOrgs",
			Handler:    _AdminService_ListOrgs_Handler,
		},
		{
			MethodName: "SetUpOrg",
			Handler:    _AdminService_SetUpOrg_Handler,
		},
		{
			MethodName: "GetIDPByID",
			Handler:    _AdminService_GetIDPByID_Handler,
		},
		{
			MethodName: "ListIDPs",
			Handler:    _AdminService_ListIDPs_Handler,
		},
		{
			MethodName: "AddOIDCIDP",
			Handler:    _AdminService_AddOIDCIDP_Handler,
		},
		{
			MethodName: "UpdateIDP",
			Handler:    _AdminService_UpdateIDP_Handler,
		},
		{
			MethodName: "DeactivateIDP",
			Handler:    _AdminService_DeactivateIDP_Handler,
		},
		{
			MethodName: "ReactivateIDP",
			Handler:    _AdminService_ReactivateIDP_Handler,
		},
		{
			MethodName: "RemoveIDP",
			Handler:    _AdminService_RemoveIDP_Handler,
		},
		{
			MethodName: "UpdateIDPOIDCConfig",
			Handler:    _AdminService_UpdateIDPOIDCConfig_Handler,
		},
		{
			MethodName: "GetDefaultFeatures",
			Handler:    _AdminService_GetDefaultFeatures_Handler,
		},
		{
			MethodName: "SetDefaultFeatures",
			Handler:    _AdminService_SetDefaultFeatures_Handler,
		},
		{
			MethodName: "GetOrgFeatures",
			Handler:    _AdminService_GetOrgFeatures_Handler,
		},
		{
			MethodName: "SetOrgFeatures",
			Handler:    _AdminService_SetOrgFeatures_Handler,
		},
		{
			MethodName: "ResetOrgFeatures",
			Handler:    _AdminService_ResetOrgFeatures_Handler,
		},
		{
			MethodName: "GetOrgIAMPolicy",
			Handler:    _AdminService_GetOrgIAMPolicy_Handler,
		},
		{
			MethodName: "UpdateOrgIAMPolicy",
			Handler:    _AdminService_UpdateOrgIAMPolicy_Handler,
		},
		{
			MethodName: "GetCustomOrgIAMPolicy",
			Handler:    _AdminService_GetCustomOrgIAMPolicy_Handler,
		},
		{
			MethodName: "AddCustomOrgIAMPolicy",
			Handler:    _AdminService_AddCustomOrgIAMPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomOrgIAMPolicy",
			Handler:    _AdminService_UpdateCustomOrgIAMPolicy_Handler,
		},
		{
			MethodName: "ResetCustomOrgIAMPolicyToDefault",
			Handler:    _AdminService_ResetCustomOrgIAMPolicyToDefault_Handler,
		},
		{
			MethodName: "GetLabelPolicy",
			Handler:    _AdminService_GetLabelPolicy_Handler,
		},
		{
			MethodName: "UpdateLabelPolicy",
			Handler:    _AdminService_UpdateLabelPolicy_Handler,
		},
		{
			MethodName: "GetLoginPolicy",
			Handler:    _AdminService_GetLoginPolicy_Handler,
		},
		{
			MethodName: "UpdateLoginPolicy",
			Handler:    _AdminService_UpdateLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicyIDPs",
			Handler:    _AdminService_ListLoginPolicyIDPs_Handler,
		},
		{
			MethodName: "AddIDPToLoginPolicy",
			Handler:    _AdminService_AddIDPToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveIDPFromLoginPolicy",
			Handler:    _AdminService_RemoveIDPFromLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicySecondFactors",
			Handler:    _AdminService_ListLoginPolicySecondFactors_Handler,
		},
		{
			MethodName: "AddSecondFactorToLoginPolicy",
			Handler:    _AdminService_AddSecondFactorToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveSecondFactorFromLoginPolicy",
			Handler:    _AdminService_RemoveSecondFactorFromLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicyMultiFactors",
			Handler:    _AdminService_ListLoginPolicyMultiFactors_Handler,
		},
		{
			MethodName: "AddMultiFactorToLoginPolicy",
			Handler:    _AdminService_AddMultiFactorToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveMultiFactorFromLoginPolicy",
			Handler:    _AdminService_RemoveMultiFactorFromLoginPolicy_Handler,
		},
		{
			MethodName: "GetPasswordComplexityPolicy",
			Handler:    _AdminService_GetPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "UpdatePasswordComplexityPolicy",
			Handler:    _AdminService_UpdatePasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "GetPasswordAgePolicy",
			Handler:    _AdminService_GetPasswordAgePolicy_Handler,
		},
		{
			MethodName: "UpdatePasswordAgePolicy",
			Handler:    _AdminService_UpdatePasswordAgePolicy_Handler,
		},
		{
			MethodName: "GetPasswordLockoutPolicy",
			Handler:    _AdminService_GetPasswordLockoutPolicy_Handler,
		},
		{
			MethodName: "UpdatePasswordLockoutPolicy",
			Handler:    _AdminService_UpdatePasswordLockoutPolicy_Handler,
		},
		{
			MethodName: "ListIAMMemberRoles",
			Handler:    _AdminService_ListIAMMemberRoles_Handler,
		},
		{
			MethodName: "ListIAMMembers",
			Handler:    _AdminService_ListIAMMembers_Handler,
		},
		{
			MethodName: "AddIAMMember",
			Handler:    _AdminService_AddIAMMember_Handler,
		},
		{
			MethodName: "UpdateIAMMember",
			Handler:    _AdminService_UpdateIAMMember_Handler,
		},
		{
			MethodName: "RemoveIAMMember",
			Handler:    _AdminService_RemoveIAMMember_Handler,
		},
		{
			MethodName: "ListViews",
			Handler:    _AdminService_ListViews_Handler,
		},
		{
			MethodName: "ClearView",
			Handler:    _AdminService_ClearView_Handler,
		},
		{
			MethodName: "ListFailedEvents",
			Handler:    _AdminService_ListFailedEvents_Handler,
		},
		{
			MethodName: "RemoveFailedEvent",
			Handler:    _AdminService_RemoveFailedEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/admin.proto",
}
