// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	//Indicates if ZITADEL is running.
	// It respondes as soon as ZITADEL started
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	// Returns the default languages
	GetSupportedLanguages(ctx context.Context, in *GetSupportedLanguagesRequest, opts ...grpc.CallOption) (*GetSupportedLanguagesResponse, error)
	// Set the default language
	SetDefaultLanguage(ctx context.Context, in *SetDefaultLanguageRequest, opts ...grpc.CallOption) (*SetDefaultLanguageResponse, error)
	// Set the default language
	GetDefaultLanguage(ctx context.Context, in *GetDefaultLanguageRequest, opts ...grpc.CallOption) (*GetDefaultLanguageResponse, error)
	// Returns the details of the instance
	GetMyInstance(ctx context.Context, in *GetMyInstanceRequest, opts ...grpc.CallOption) (*GetMyInstanceResponse, error)
	// Returns the domains of the instance
	ListInstanceDomains(ctx context.Context, in *ListInstanceDomainsRequest, opts ...grpc.CallOption) (*ListInstanceDomainsResponse, error)
	// Set the default language
	ListSecretGenerators(ctx context.Context, in *ListSecretGeneratorsRequest, opts ...grpc.CallOption) (*ListSecretGeneratorsResponse, error)
	// Get Secret Generator by type (e.g PasswordResetCode)
	GetSecretGenerator(ctx context.Context, in *GetSecretGeneratorRequest, opts ...grpc.CallOption) (*GetSecretGeneratorResponse, error)
	// Update secret generator configuration
	UpdateSecretGenerator(ctx context.Context, in *UpdateSecretGeneratorRequest, opts ...grpc.CallOption) (*UpdateSecretGeneratorResponse, error)
	// Get system smtp configuration
	GetSMTPConfig(ctx context.Context, in *GetSMTPConfigRequest, opts ...grpc.CallOption) (*GetSMTPConfigResponse, error)
	// Add system smtp configuration
	AddSMTPConfig(ctx context.Context, in *AddSMTPConfigRequest, opts ...grpc.CallOption) (*AddSMTPConfigResponse, error)
	// Update system smtp configuration
	UpdateSMTPConfig(ctx context.Context, in *UpdateSMTPConfigRequest, opts ...grpc.CallOption) (*UpdateSMTPConfigResponse, error)
	// Update system smtp configuration password for host
	UpdateSMTPConfigPassword(ctx context.Context, in *UpdateSMTPConfigPasswordRequest, opts ...grpc.CallOption) (*UpdateSMTPConfigPasswordResponse, error)
	// Remove system smtp configuration
	RemoveSMTPConfig(ctx context.Context, in *RemoveSMTPConfigRequest, opts ...grpc.CallOption) (*RemoveSMTPConfigResponse, error)
	// list sms provider configurations
	ListSMSProviders(ctx context.Context, in *ListSMSProvidersRequest, opts ...grpc.CallOption) (*ListSMSProvidersResponse, error)
	// Get sms provider
	GetSMSProvider(ctx context.Context, in *GetSMSProviderRequest, opts ...grpc.CallOption) (*GetSMSProviderResponse, error)
	// Add twilio sms provider
	AddSMSProviderTwilio(ctx context.Context, in *AddSMSProviderTwilioRequest, opts ...grpc.CallOption) (*AddSMSProviderTwilioResponse, error)
	// Update twilio sms provider
	UpdateSMSProviderTwilio(ctx context.Context, in *UpdateSMSProviderTwilioRequest, opts ...grpc.CallOption) (*UpdateSMSProviderTwilioResponse, error)
	// Update twilio sms provider token
	UpdateSMSProviderTwilioToken(ctx context.Context, in *UpdateSMSProviderTwilioTokenRequest, opts ...grpc.CallOption) (*UpdateSMSProviderTwilioTokenResponse, error)
	// Activate sms provider
	ActivateSMSProvider(ctx context.Context, in *ActivateSMSProviderRequest, opts ...grpc.CallOption) (*ActivateSMSProviderResponse, error)
	// Deactivate sms provider
	DeactivateSMSProvider(ctx context.Context, in *DeactivateSMSProviderRequest, opts ...grpc.CallOption) (*DeactivateSMSProviderResponse, error)
	// Remove sms provider token
	RemoveSMSProvider(ctx context.Context, in *RemoveSMSProviderRequest, opts ...grpc.CallOption) (*RemoveSMSProviderResponse, error)
	// Get OIDC settings (e.g token lifetimes, etc.)
	GetOIDCSettings(ctx context.Context, in *GetOIDCSettingsRequest, opts ...grpc.CallOption) (*GetOIDCSettingsResponse, error)
	// Update oidc settings (e.g token lifetimes, etc)
	UpdateOIDCSettings(ctx context.Context, in *UpdateOIDCSettingsRequest, opts ...grpc.CallOption) (*UpdateOIDCSettingsResponse, error)
	// Get file system notification provider
	GetFileSystemNotificationProvider(ctx context.Context, in *GetFileSystemNotificationProviderRequest, opts ...grpc.CallOption) (*GetFileSystemNotificationProviderResponse, error)
	// Get log notification provider
	GetLogNotificationProvider(ctx context.Context, in *GetLogNotificationProviderRequest, opts ...grpc.CallOption) (*GetLogNotificationProviderResponse, error)
	// Returns an organisation by id
	GetOrgByID(ctx context.Context, in *GetOrgByIDRequest, opts ...grpc.CallOption) (*GetOrgByIDResponse, error)
	//Checks whether an organisation exists by the given parameters
	IsOrgUnique(ctx context.Context, in *IsOrgUniqueRequest, opts ...grpc.CallOption) (*IsOrgUniqueResponse, error)
	// Set the default org
	SetDefaultOrg(ctx context.Context, in *SetDefaultOrgRequest, opts ...grpc.CallOption) (*SetDefaultOrgResponse, error)
	// Set the default org
	GetDefaultOrg(ctx context.Context, in *GetDefaultOrgRequest, opts ...grpc.CallOption) (*GetDefaultOrgResponse, error)
	//Returns all organisations matching the request
	// all queries need to match (AND)
	ListOrgs(ctx context.Context, in *ListOrgsRequest, opts ...grpc.CallOption) (*ListOrgsResponse, error)
	//Creates a new org and user
	// and adds the user to the orgs members as ORG_OWNER
	SetUpOrg(ctx context.Context, in *SetUpOrgRequest, opts ...grpc.CallOption) (*SetUpOrgResponse, error)
	// Returns a identity provider configuration of the IAM instance
	GetIDPByID(ctx context.Context, in *GetIDPByIDRequest, opts ...grpc.CallOption) (*GetIDPByIDResponse, error)
	// Returns all identity provider configurations of the IAM instance
	ListIDPs(ctx context.Context, in *ListIDPsRequest, opts ...grpc.CallOption) (*ListIDPsResponse, error)
	// Adds a new oidc identity provider configuration the IAM instance
	AddOIDCIDP(ctx context.Context, in *AddOIDCIDPRequest, opts ...grpc.CallOption) (*AddOIDCIDPResponse, error)
	// Adds a new jwt identity provider configuration the IAM instance
	AddJWTIDP(ctx context.Context, in *AddJWTIDPRequest, opts ...grpc.CallOption) (*AddJWTIDPResponse, error)
	//Updates the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDP(ctx context.Context, in *UpdateIDPRequest, opts ...grpc.CallOption) (*UpdateIDPResponse, error)
	//Sets the state of the idp to IDP_STATE_INACTIVE
	// the state MUST be IDP_STATE_ACTIVE for this call
	DeactivateIDP(ctx context.Context, in *DeactivateIDPRequest, opts ...grpc.CallOption) (*DeactivateIDPResponse, error)
	//Sets the state of the idp to IDP_STATE_ACTIVE
	// the state MUST be IDP_STATE_INACTIVE for this call
	ReactivateIDP(ctx context.Context, in *ReactivateIDPRequest, opts ...grpc.CallOption) (*ReactivateIDPResponse, error)
	//RemoveIDP deletes the IDP permanetly
	RemoveIDP(ctx context.Context, in *RemoveIDPRequest, opts ...grpc.CallOption) (*RemoveIDPResponse, error)
	//Updates the oidc configuration of the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDPOIDCConfig(ctx context.Context, in *UpdateIDPOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateIDPOIDCConfigResponse, error)
	//Updates the jwt configuration of the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDPJWTConfig(ctx context.Context, in *UpdateIDPJWTConfigRequest, opts ...grpc.CallOption) (*UpdateIDPJWTConfigResponse, error)
	//deprecated: please use DomainPolicy instead
	//Returns the Org IAM policy defined by the administrators of ZITADEL
	GetOrgIAMPolicy(ctx context.Context, in *GetOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetOrgIAMPolicyResponse, error)
	//deprecated: please use DomainPolicy instead
	//Updates the default OrgIAM policy.
	// it impacts all organisations without a customised policy
	UpdateOrgIAMPolicy(ctx context.Context, in *UpdateOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateOrgIAMPolicyResponse, error)
	//deprecated: please use DomainPolicy instead
	//Returns the customised policy or the default if not customised
	GetCustomOrgIAMPolicy(ctx context.Context, in *GetCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetCustomOrgIAMPolicyResponse, error)
	//deprecated: please use DomainPolicy instead
	//Defines a custom OrgIAM policy as specified
	AddCustomOrgIAMPolicy(ctx context.Context, in *AddCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*AddCustomOrgIAMPolicyResponse, error)
	//deprecated: please use DomainPolicy instead
	//Updates a custom OrgIAM policy as specified
	UpdateCustomOrgIAMPolicy(ctx context.Context, in *UpdateCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomOrgIAMPolicyResponse, error)
	//deprecated: please use DomainPolicy instead
	//Resets the org iam policy of the organisation to default
	// ZITADEL will fallback to the default policy defined by the ZITADEL administrators
	ResetCustomOrgIAMPolicyToDefault(ctx context.Context, in *ResetCustomOrgIAMPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomOrgIAMPolicyToDefaultResponse, error)
	//Returns the Domain policy defined by the administrators of ZITADEL
	GetDomainPolicy(ctx context.Context, in *GetDomainPolicyRequest, opts ...grpc.CallOption) (*GetDomainPolicyResponse, error)
	//Updates the default Domain policy.
	// it impacts all organisations without a customised policy
	UpdateDomainPolicy(ctx context.Context, in *UpdateDomainPolicyRequest, opts ...grpc.CallOption) (*UpdateDomainPolicyResponse, error)
	//Returns the customised policy or the default if not customised
	GetCustomDomainPolicy(ctx context.Context, in *GetCustomDomainPolicyRequest, opts ...grpc.CallOption) (*GetCustomDomainPolicyResponse, error)
	//Defines a custom Domain policy as specified
	AddCustomDomainPolicy(ctx context.Context, in *AddCustomDomainPolicyRequest, opts ...grpc.CallOption) (*AddCustomDomainPolicyResponse, error)
	//Updates a custom Domain policy as specified
	UpdateCustomDomainPolicy(ctx context.Context, in *UpdateCustomDomainPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomDomainPolicyResponse, error)
	//Resets the org iam policy of the organisation to default
	// ZITADEL will fallback to the default policy defined by the ZITADEL administrators
	ResetCustomDomainPolicyToDefault(ctx context.Context, in *ResetCustomDomainPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomDomainPolicyToDefaultResponse, error)
	//Returns the label policy defined by the administrators of ZITADEL
	GetLabelPolicy(ctx context.Context, in *GetLabelPolicyRequest, opts ...grpc.CallOption) (*GetLabelPolicyResponse, error)
	//Returns the preview label policy defined by the administrators of ZITADEL
	GetPreviewLabelPolicy(ctx context.Context, in *GetPreviewLabelPolicyRequest, opts ...grpc.CallOption) (*GetPreviewLabelPolicyResponse, error)
	//Updates the default label policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLabelPolicy(ctx context.Context, in *UpdateLabelPolicyRequest, opts ...grpc.CallOption) (*UpdateLabelPolicyResponse, error)
	// Activates all changes of the label policy
	ActivateLabelPolicy(ctx context.Context, in *ActivateLabelPolicyRequest, opts ...grpc.CallOption) (*ActivateLabelPolicyResponse, error)
	// Removes the logo of the label policy
	RemoveLabelPolicyLogo(ctx context.Context, in *RemoveLabelPolicyLogoRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyLogoResponse, error)
	// Removes the logo dark of the label policy
	RemoveLabelPolicyLogoDark(ctx context.Context, in *RemoveLabelPolicyLogoDarkRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyLogoDarkResponse, error)
	// Removes the icon of the label policy
	RemoveLabelPolicyIcon(ctx context.Context, in *RemoveLabelPolicyIconRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyIconResponse, error)
	// Removes the logo dark of the label policy
	RemoveLabelPolicyIconDark(ctx context.Context, in *RemoveLabelPolicyIconDarkRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyIconDarkResponse, error)
	// Removes the font of the label policy
	RemoveLabelPolicyFont(ctx context.Context, in *RemoveLabelPolicyFontRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyFontResponse, error)
	//Returns the login policy defined by the administrators of ZITADEL
	GetLoginPolicy(ctx context.Context, in *GetLoginPolicyRequest, opts ...grpc.CallOption) (*GetLoginPolicyResponse, error)
	//Updates the default login policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLoginPolicy(ctx context.Context, in *UpdateLoginPolicyRequest, opts ...grpc.CallOption) (*UpdateLoginPolicyResponse, error)
	//Returns the idps linked to the default login policy,
	// defined by the administrators of ZITADEL
	ListLoginPolicyIDPs(ctx context.Context, in *ListLoginPolicyIDPsRequest, opts ...grpc.CallOption) (*ListLoginPolicyIDPsResponse, error)
	//Adds the povided idp to the default login policy.
	// It impacts all organisations without a customised policy
	AddIDPToLoginPolicy(ctx context.Context, in *AddIDPToLoginPolicyRequest, opts ...grpc.CallOption) (*AddIDPToLoginPolicyResponse, error)
	//Removes the povided idp from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveIDPFromLoginPolicy(ctx context.Context, in *RemoveIDPFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveIDPFromLoginPolicyResponse, error)
	//Returns the available second factors defined by the administrators of ZITADEL
	ListLoginPolicySecondFactors(ctx context.Context, in *ListLoginPolicySecondFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicySecondFactorsResponse, error)
	//Adds a second factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddSecondFactorToLoginPolicy(ctx context.Context, in *AddSecondFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddSecondFactorToLoginPolicyResponse, error)
	//Removes a second factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveSecondFactorFromLoginPolicy(ctx context.Context, in *RemoveSecondFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveSecondFactorFromLoginPolicyResponse, error)
	//Returns the available multi factors defined by the administrators of ZITADEL
	ListLoginPolicyMultiFactors(ctx context.Context, in *ListLoginPolicyMultiFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicyMultiFactorsResponse, error)
	//Adds a multi factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddMultiFactorToLoginPolicy(ctx context.Context, in *AddMultiFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddMultiFactorToLoginPolicyResponse, error)
	//Removes a multi factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveMultiFactorFromLoginPolicy(ctx context.Context, in *RemoveMultiFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveMultiFactorFromLoginPolicyResponse, error)
	//Returns the password complexity policy defined by the administrators of ZITADEL
	GetPasswordComplexityPolicy(ctx context.Context, in *GetPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetPasswordComplexityPolicyResponse, error)
	//Updates the default password complexity policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordComplexityPolicy(ctx context.Context, in *UpdatePasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordComplexityPolicyResponse, error)
	//Returns the password age policy defined by the administrators of ZITADEL
	GetPasswordAgePolicy(ctx context.Context, in *GetPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetPasswordAgePolicyResponse, error)
	//Updates the default password age policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordAgePolicy(ctx context.Context, in *UpdatePasswordAgePolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordAgePolicyResponse, error)
	//Returns the lockout policy defined by the administrators of ZITADEL
	GetLockoutPolicy(ctx context.Context, in *GetLockoutPolicyRequest, opts ...grpc.CallOption) (*GetLockoutPolicyResponse, error)
	//Updates the default lockout policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLockoutPolicy(ctx context.Context, in *UpdateLockoutPolicyRequest, opts ...grpc.CallOption) (*UpdateLockoutPolicyResponse, error)
	//Returns the privacy policy defined by the administrators of ZITADEL
	GetPrivacyPolicy(ctx context.Context, in *GetPrivacyPolicyRequest, opts ...grpc.CallOption) (*GetPrivacyPolicyResponse, error)
	//Updates the default privacy policy of ZITADEL
	// it impacts all organisations without a customised policy
	// Variable {{.Lang}} can be set to have different links based on the language
	UpdatePrivacyPolicy(ctx context.Context, in *UpdatePrivacyPolicyRequest, opts ...grpc.CallOption) (*UpdatePrivacyPolicyResponse, error)
	//Returns the default text for initial message (translation file)
	GetDefaultInitMessageText(ctx context.Context, in *GetDefaultInitMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultInitMessageTextResponse, error)
	//Returns the custom text for initial message (overwritten in eventstore)
	GetCustomInitMessageText(ctx context.Context, in *GetCustomInitMessageTextRequest, opts ...grpc.CallOption) (*GetCustomInitMessageTextResponse, error)
	//Sets the default custom text for initial message
	// it impacts all organisations without customized initial message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultInitMessageText(ctx context.Context, in *SetDefaultInitMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultInitMessageTextResponse, error)
	// Removes the custom init message text of the system
	// The default text from the translation file will trigger after
	ResetCustomInitMessageTextToDefault(ctx context.Context, in *ResetCustomInitMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomInitMessageTextToDefaultResponse, error)
	//Returns the default text for password reset message (translation file)
	GetDefaultPasswordResetMessageText(ctx context.Context, in *GetDefaultPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordResetMessageTextResponse, error)
	//Returns the custom text for password reset message (overwritten in eventstore)
	GetCustomPasswordResetMessageText(ctx context.Context, in *GetCustomPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordResetMessageTextResponse, error)
	//Sets the default custom text for password reset message
	// it impacts all organisations without customized password reset message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultPasswordResetMessageText(ctx context.Context, in *SetDefaultPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultPasswordResetMessageTextResponse, error)
	// Removes the custom password reset message text of the system
	// The default text from the translation file will trigger after
	ResetCustomPasswordResetMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordResetMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error)
	//Returns the default text for verify email message (translation files)
	GetDefaultVerifyEmailMessageText(ctx context.Context, in *GetDefaultVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyEmailMessageTextResponse, error)
	//Returns the custom text for verify email message (overwritten in eventstore)
	GetCustomVerifyEmailMessageText(ctx context.Context, in *GetCustomVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyEmailMessageTextResponse, error)
	//Sets the default custom text for verify email message
	// it impacts all organisations without customized verify email message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultVerifyEmailMessageText(ctx context.Context, in *SetDefaultVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifyEmailMessageTextResponse, error)
	// Removes the custom verify email message text of the system
	// The default text from the translation file will trigger after
	ResetCustomVerifyEmailMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyEmailMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error)
	//Returns the default text for verify phone message (translation file)
	GetDefaultVerifyPhoneMessageText(ctx context.Context, in *GetDefaultVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyPhoneMessageTextResponse, error)
	//Returns the custom text for verify phone message
	GetCustomVerifyPhoneMessageText(ctx context.Context, in *GetCustomVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyPhoneMessageTextResponse, error)
	//Sets the default custom text for verify phone message
	// it impacts all organisations without customized verify phone message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultVerifyPhoneMessageText(ctx context.Context, in *SetDefaultVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifyPhoneMessageTextResponse, error)
	// Removes the custom verify phone text of the system
	// The default text from the translation file will trigger after
	ResetCustomVerifyPhoneMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyPhoneMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error)
	//Returns the default text for domain claimed message (translation file)
	GetDefaultDomainClaimedMessageText(ctx context.Context, in *GetDefaultDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultDomainClaimedMessageTextResponse, error)
	//Returns the custom text for domain claimed message (overwritten in eventstore)
	GetCustomDomainClaimedMessageText(ctx context.Context, in *GetCustomDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetCustomDomainClaimedMessageTextResponse, error)
	//Sets the default custom text for domain claimed phone message
	// it impacts all organisations without customized domain claimed message text
	// The Following Variables can be used:
	// {{.Domain}} {{.TempUsername}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultDomainClaimedMessageText(ctx context.Context, in *SetDefaultDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultDomainClaimedMessageTextResponse, error)
	// Removes the custom domain claimed message text of the system
	// The default text from the translation file will trigger after
	ResetCustomDomainClaimedMessageTextToDefault(ctx context.Context, in *ResetCustomDomainClaimedMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error)
	//Returns the default text for passwordless registration message (translation file)
	GetDefaultPasswordlessRegistrationMessageText(ctx context.Context, in *GetDefaultPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error)
	//Returns the custom text for passwordless registration message (overwritten in eventstore)
	GetCustomPasswordlessRegistrationMessageText(ctx context.Context, in *GetCustomPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordlessRegistrationMessageTextResponse, error)
	//Sets the default custom text for passwordless registration message
	// it impacts all organisations without customized passwordless registration message text
	// The Following Variables can be used:
	// {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultPasswordlessRegistrationMessageText(ctx context.Context, in *SetDefaultPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultPasswordlessRegistrationMessageTextResponse, error)
	// Removes the custom passwordless link message text of the system
	// The default text from the translation file will trigger after
	ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error)
	//Returns the default custom texts for login ui (translation file)
	GetDefaultLoginTexts(ctx context.Context, in *GetDefaultLoginTextsRequest, opts ...grpc.CallOption) (*GetDefaultLoginTextsResponse, error)
	//Returns the custom texts for login ui
	GetCustomLoginTexts(ctx context.Context, in *GetCustomLoginTextsRequest, opts ...grpc.CallOption) (*GetCustomLoginTextsResponse, error)
	//Sets the custom text for login ui
	//it impacts all organisations without customized login ui texts
	SetCustomLoginText(ctx context.Context, in *SetCustomLoginTextsRequest, opts ...grpc.CallOption) (*SetCustomLoginTextsResponse, error)
	// Removes the custom texts for login ui
	// it impacts all organisations without customized login ui texts
	// The default text form translation file will trigger after
	ResetCustomLoginTextToDefault(ctx context.Context, in *ResetCustomLoginTextsToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomLoginTextsToDefaultResponse, error)
	//Returns the IAM roles visible for the requested user
	ListIAMMemberRoles(ctx context.Context, in *ListIAMMemberRolesRequest, opts ...grpc.CallOption) (*ListIAMMemberRolesResponse, error)
	//Returns all members matching the request
	// all queries need to match (ANDed)
	ListIAMMembers(ctx context.Context, in *ListIAMMembersRequest, opts ...grpc.CallOption) (*ListIAMMembersResponse, error)
	//Adds a user to the membership list of ZITADEL with the given roles
	// undefined roles will be dropped
	AddIAMMember(ctx context.Context, in *AddIAMMemberRequest, opts ...grpc.CallOption) (*AddIAMMemberResponse, error)
	//Sets the given roles on a member.
	// The member has only roles provided by this call
	UpdateIAMMember(ctx context.Context, in *UpdateIAMMemberRequest, opts ...grpc.CallOption) (*UpdateIAMMemberResponse, error)
	//Removes the user from the membership list of ZITADEL
	RemoveIAMMember(ctx context.Context, in *RemoveIAMMemberRequest, opts ...grpc.CallOption) (*RemoveIAMMemberResponse, error)
	//Returns all stored read models of ZITADEL
	// views are used for search optimisation and optimise request latencies
	// they represent the delta of the event happend on the objects
	ListViews(ctx context.Context, in *ListViewsRequest, opts ...grpc.CallOption) (*ListViewsResponse, error)
	//Returns event descriptions which cannot be processed.
	// It's possible that some events need some retries.
	// For example if the SMTP-API wasn't able to send an email at the first time
	ListFailedEvents(ctx context.Context, in *ListFailedEventsRequest, opts ...grpc.CallOption) (*ListFailedEventsResponse, error)
	//Deletes the event from failed events view.
	// the event is not removed from the change stream
	// This call is usefull if the system was able to process the event later.
	// e.g. if the second try of sending an email was successful. the first try produced a
	// failed event. You can find out if it worked on the `failure_count`
	RemoveFailedEvent(ctx context.Context, in *RemoveFailedEventRequest, opts ...grpc.CallOption) (*RemoveFailedEventResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSupportedLanguages(ctx context.Context, in *GetSupportedLanguagesRequest, opts ...grpc.CallOption) (*GetSupportedLanguagesResponse, error) {
	out := new(GetSupportedLanguagesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetSupportedLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultLanguage(ctx context.Context, in *SetDefaultLanguageRequest, opts ...grpc.CallOption) (*SetDefaultLanguageResponse, error) {
	out := new(SetDefaultLanguageResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetDefaultLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultLanguage(ctx context.Context, in *GetDefaultLanguageRequest, opts ...grpc.CallOption) (*GetDefaultLanguageResponse, error) {
	out := new(GetDefaultLanguageResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDefaultLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetMyInstance(ctx context.Context, in *GetMyInstanceRequest, opts ...grpc.CallOption) (*GetMyInstanceResponse, error) {
	out := new(GetMyInstanceResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetMyInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListInstanceDomains(ctx context.Context, in *ListInstanceDomainsRequest, opts ...grpc.CallOption) (*ListInstanceDomainsResponse, error) {
	out := new(ListInstanceDomainsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListInstanceDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListSecretGenerators(ctx context.Context, in *ListSecretGeneratorsRequest, opts ...grpc.CallOption) (*ListSecretGeneratorsResponse, error) {
	out := new(ListSecretGeneratorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListSecretGenerators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSecretGenerator(ctx context.Context, in *GetSecretGeneratorRequest, opts ...grpc.CallOption) (*GetSecretGeneratorResponse, error) {
	out := new(GetSecretGeneratorResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetSecretGenerator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSecretGenerator(ctx context.Context, in *UpdateSecretGeneratorRequest, opts ...grpc.CallOption) (*UpdateSecretGeneratorResponse, error) {
	out := new(UpdateSecretGeneratorResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateSecretGenerator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSMTPConfig(ctx context.Context, in *GetSMTPConfigRequest, opts ...grpc.CallOption) (*GetSMTPConfigResponse, error) {
	out := new(GetSMTPConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetSMTPConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddSMTPConfig(ctx context.Context, in *AddSMTPConfigRequest, opts ...grpc.CallOption) (*AddSMTPConfigResponse, error) {
	out := new(AddSMTPConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddSMTPConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSMTPConfig(ctx context.Context, in *UpdateSMTPConfigRequest, opts ...grpc.CallOption) (*UpdateSMTPConfigResponse, error) {
	out := new(UpdateSMTPConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateSMTPConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSMTPConfigPassword(ctx context.Context, in *UpdateSMTPConfigPasswordRequest, opts ...grpc.CallOption) (*UpdateSMTPConfigPasswordResponse, error) {
	out := new(UpdateSMTPConfigPasswordResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateSMTPConfigPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveSMTPConfig(ctx context.Context, in *RemoveSMTPConfigRequest, opts ...grpc.CallOption) (*RemoveSMTPConfigResponse, error) {
	out := new(RemoveSMTPConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveSMTPConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListSMSProviders(ctx context.Context, in *ListSMSProvidersRequest, opts ...grpc.CallOption) (*ListSMSProvidersResponse, error) {
	out := new(ListSMSProvidersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListSMSProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSMSProvider(ctx context.Context, in *GetSMSProviderRequest, opts ...grpc.CallOption) (*GetSMSProviderResponse, error) {
	out := new(GetSMSProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetSMSProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddSMSProviderTwilio(ctx context.Context, in *AddSMSProviderTwilioRequest, opts ...grpc.CallOption) (*AddSMSProviderTwilioResponse, error) {
	out := new(AddSMSProviderTwilioResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddSMSProviderTwilio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSMSProviderTwilio(ctx context.Context, in *UpdateSMSProviderTwilioRequest, opts ...grpc.CallOption) (*UpdateSMSProviderTwilioResponse, error) {
	out := new(UpdateSMSProviderTwilioResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSMSProviderTwilioToken(ctx context.Context, in *UpdateSMSProviderTwilioTokenRequest, opts ...grpc.CallOption) (*UpdateSMSProviderTwilioTokenResponse, error) {
	out := new(UpdateSMSProviderTwilioTokenResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilioToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ActivateSMSProvider(ctx context.Context, in *ActivateSMSProviderRequest, opts ...grpc.CallOption) (*ActivateSMSProviderResponse, error) {
	out := new(ActivateSMSProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ActivateSMSProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeactivateSMSProvider(ctx context.Context, in *DeactivateSMSProviderRequest, opts ...grpc.CallOption) (*DeactivateSMSProviderResponse, error) {
	out := new(DeactivateSMSProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/DeactivateSMSProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveSMSProvider(ctx context.Context, in *RemoveSMSProviderRequest, opts ...grpc.CallOption) (*RemoveSMSProviderResponse, error) {
	out := new(RemoveSMSProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveSMSProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOIDCSettings(ctx context.Context, in *GetOIDCSettingsRequest, opts ...grpc.CallOption) (*GetOIDCSettingsResponse, error) {
	out := new(GetOIDCSettingsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetOIDCSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateOIDCSettings(ctx context.Context, in *UpdateOIDCSettingsRequest, opts ...grpc.CallOption) (*UpdateOIDCSettingsResponse, error) {
	out := new(UpdateOIDCSettingsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateOIDCSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetFileSystemNotificationProvider(ctx context.Context, in *GetFileSystemNotificationProviderRequest, opts ...grpc.CallOption) (*GetFileSystemNotificationProviderResponse, error) {
	out := new(GetFileSystemNotificationProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetFileSystemNotificationProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLogNotificationProvider(ctx context.Context, in *GetLogNotificationProviderRequest, opts ...grpc.CallOption) (*GetLogNotificationProviderResponse, error) {
	out := new(GetLogNotificationProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetLogNotificationProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOrgByID(ctx context.Context, in *GetOrgByIDRequest, opts ...grpc.CallOption) (*GetOrgByIDResponse, error) {
	out := new(GetOrgByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetOrgByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) IsOrgUnique(ctx context.Context, in *IsOrgUniqueRequest, opts ...grpc.CallOption) (*IsOrgUniqueResponse, error) {
	out := new(IsOrgUniqueResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/IsOrgUnique", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultOrg(ctx context.Context, in *SetDefaultOrgRequest, opts ...grpc.CallOption) (*SetDefaultOrgResponse, error) {
	out := new(SetDefaultOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetDefaultOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultOrg(ctx context.Context, in *GetDefaultOrgRequest, opts ...grpc.CallOption) (*GetDefaultOrgResponse, error) {
	out := new(GetDefaultOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDefaultOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrgs(ctx context.Context, in *ListOrgsRequest, opts ...grpc.CallOption) (*ListOrgsResponse, error) {
	out := new(ListOrgsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetUpOrg(ctx context.Context, in *SetUpOrgRequest, opts ...grpc.CallOption) (*SetUpOrgResponse, error) {
	out := new(SetUpOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetUpOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetIDPByID(ctx context.Context, in *GetIDPByIDRequest, opts ...grpc.CallOption) (*GetIDPByIDResponse, error) {
	out := new(GetIDPByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetIDPByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIDPs(ctx context.Context, in *ListIDPsRequest, opts ...grpc.CallOption) (*ListIDPsResponse, error) {
	out := new(ListIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddOIDCIDP(ctx context.Context, in *AddOIDCIDPRequest, opts ...grpc.CallOption) (*AddOIDCIDPResponse, error) {
	out := new(AddOIDCIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddOIDCIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddJWTIDP(ctx context.Context, in *AddJWTIDPRequest, opts ...grpc.CallOption) (*AddJWTIDPResponse, error) {
	out := new(AddJWTIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddJWTIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIDP(ctx context.Context, in *UpdateIDPRequest, opts ...grpc.CallOption) (*UpdateIDPResponse, error) {
	out := new(UpdateIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeactivateIDP(ctx context.Context, in *DeactivateIDPRequest, opts ...grpc.CallOption) (*DeactivateIDPResponse, error) {
	out := new(DeactivateIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/DeactivateIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ReactivateIDP(ctx context.Context, in *ReactivateIDPRequest, opts ...grpc.CallOption) (*ReactivateIDPResponse, error) {
	out := new(ReactivateIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ReactivateIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveIDP(ctx context.Context, in *RemoveIDPRequest, opts ...grpc.CallOption) (*RemoveIDPResponse, error) {
	out := new(RemoveIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIDPOIDCConfig(ctx context.Context, in *UpdateIDPOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateIDPOIDCConfigResponse, error) {
	out := new(UpdateIDPOIDCConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateIDPOIDCConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIDPJWTConfig(ctx context.Context, in *UpdateIDPJWTConfigRequest, opts ...grpc.CallOption) (*UpdateIDPJWTConfigResponse, error) {
	out := new(UpdateIDPJWTConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateIDPJWTConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOrgIAMPolicy(ctx context.Context, in *GetOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetOrgIAMPolicyResponse, error) {
	out := new(GetOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateOrgIAMPolicy(ctx context.Context, in *UpdateOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateOrgIAMPolicyResponse, error) {
	out := new(UpdateOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomOrgIAMPolicy(ctx context.Context, in *GetCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetCustomOrgIAMPolicyResponse, error) {
	out := new(GetCustomOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetCustomOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddCustomOrgIAMPolicy(ctx context.Context, in *AddCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*AddCustomOrgIAMPolicyResponse, error) {
	out := new(AddCustomOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddCustomOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateCustomOrgIAMPolicy(ctx context.Context, in *UpdateCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomOrgIAMPolicyResponse, error) {
	out := new(UpdateCustomOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateCustomOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomOrgIAMPolicyToDefault(ctx context.Context, in *ResetCustomOrgIAMPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomOrgIAMPolicyToDefaultResponse, error) {
	out := new(ResetCustomOrgIAMPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetCustomOrgIAMPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDomainPolicy(ctx context.Context, in *GetDomainPolicyRequest, opts ...grpc.CallOption) (*GetDomainPolicyResponse, error) {
	out := new(GetDomainPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDomainPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDomainPolicy(ctx context.Context, in *UpdateDomainPolicyRequest, opts ...grpc.CallOption) (*UpdateDomainPolicyResponse, error) {
	out := new(UpdateDomainPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateDomainPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomDomainPolicy(ctx context.Context, in *GetCustomDomainPolicyRequest, opts ...grpc.CallOption) (*GetCustomDomainPolicyResponse, error) {
	out := new(GetCustomDomainPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetCustomDomainPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddCustomDomainPolicy(ctx context.Context, in *AddCustomDomainPolicyRequest, opts ...grpc.CallOption) (*AddCustomDomainPolicyResponse, error) {
	out := new(AddCustomDomainPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddCustomDomainPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateCustomDomainPolicy(ctx context.Context, in *UpdateCustomDomainPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomDomainPolicyResponse, error) {
	out := new(UpdateCustomDomainPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateCustomDomainPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomDomainPolicyToDefault(ctx context.Context, in *ResetCustomDomainPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomDomainPolicyToDefaultResponse, error) {
	out := new(ResetCustomDomainPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetCustomDomainPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLabelPolicy(ctx context.Context, in *GetLabelPolicyRequest, opts ...grpc.CallOption) (*GetLabelPolicyResponse, error) {
	out := new(GetLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPreviewLabelPolicy(ctx context.Context, in *GetPreviewLabelPolicyRequest, opts ...grpc.CallOption) (*GetPreviewLabelPolicyResponse, error) {
	out := new(GetPreviewLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetPreviewLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLabelPolicy(ctx context.Context, in *UpdateLabelPolicyRequest, opts ...grpc.CallOption) (*UpdateLabelPolicyResponse, error) {
	out := new(UpdateLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ActivateLabelPolicy(ctx context.Context, in *ActivateLabelPolicyRequest, opts ...grpc.CallOption) (*ActivateLabelPolicyResponse, error) {
	out := new(ActivateLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ActivateLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveLabelPolicyLogo(ctx context.Context, in *RemoveLabelPolicyLogoRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyLogoResponse, error) {
	out := new(RemoveLabelPolicyLogoResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveLabelPolicyLogoDark(ctx context.Context, in *RemoveLabelPolicyLogoDarkRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyLogoDarkResponse, error) {
	out := new(RemoveLabelPolicyLogoDarkResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogoDark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveLabelPolicyIcon(ctx context.Context, in *RemoveLabelPolicyIconRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyIconResponse, error) {
	out := new(RemoveLabelPolicyIconResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveLabelPolicyIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveLabelPolicyIconDark(ctx context.Context, in *RemoveLabelPolicyIconDarkRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyIconDarkResponse, error) {
	out := new(RemoveLabelPolicyIconDarkResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveLabelPolicyIconDark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveLabelPolicyFont(ctx context.Context, in *RemoveLabelPolicyFontRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyFontResponse, error) {
	out := new(RemoveLabelPolicyFontResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveLabelPolicyFont", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLoginPolicy(ctx context.Context, in *GetLoginPolicyRequest, opts ...grpc.CallOption) (*GetLoginPolicyResponse, error) {
	out := new(GetLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLoginPolicy(ctx context.Context, in *UpdateLoginPolicyRequest, opts ...grpc.CallOption) (*UpdateLoginPolicyResponse, error) {
	out := new(UpdateLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLoginPolicyIDPs(ctx context.Context, in *ListLoginPolicyIDPsRequest, opts ...grpc.CallOption) (*ListLoginPolicyIDPsResponse, error) {
	out := new(ListLoginPolicyIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListLoginPolicyIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddIDPToLoginPolicy(ctx context.Context, in *AddIDPToLoginPolicyRequest, opts ...grpc.CallOption) (*AddIDPToLoginPolicyResponse, error) {
	out := new(AddIDPToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddIDPToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveIDPFromLoginPolicy(ctx context.Context, in *RemoveIDPFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveIDPFromLoginPolicyResponse, error) {
	out := new(RemoveIDPFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveIDPFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLoginPolicySecondFactors(ctx context.Context, in *ListLoginPolicySecondFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicySecondFactorsResponse, error) {
	out := new(ListLoginPolicySecondFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListLoginPolicySecondFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddSecondFactorToLoginPolicy(ctx context.Context, in *AddSecondFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddSecondFactorToLoginPolicyResponse, error) {
	out := new(AddSecondFactorToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddSecondFactorToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveSecondFactorFromLoginPolicy(ctx context.Context, in *RemoveSecondFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveSecondFactorFromLoginPolicyResponse, error) {
	out := new(RemoveSecondFactorFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveSecondFactorFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLoginPolicyMultiFactors(ctx context.Context, in *ListLoginPolicyMultiFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicyMultiFactorsResponse, error) {
	out := new(ListLoginPolicyMultiFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListLoginPolicyMultiFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddMultiFactorToLoginPolicy(ctx context.Context, in *AddMultiFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddMultiFactorToLoginPolicyResponse, error) {
	out := new(AddMultiFactorToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddMultiFactorToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveMultiFactorFromLoginPolicy(ctx context.Context, in *RemoveMultiFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveMultiFactorFromLoginPolicyResponse, error) {
	out := new(RemoveMultiFactorFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveMultiFactorFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPasswordComplexityPolicy(ctx context.Context, in *GetPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetPasswordComplexityPolicyResponse, error) {
	out := new(GetPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePasswordComplexityPolicy(ctx context.Context, in *UpdatePasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordComplexityPolicyResponse, error) {
	out := new(UpdatePasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdatePasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPasswordAgePolicy(ctx context.Context, in *GetPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetPasswordAgePolicyResponse, error) {
	out := new(GetPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetPasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePasswordAgePolicy(ctx context.Context, in *UpdatePasswordAgePolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordAgePolicyResponse, error) {
	out := new(UpdatePasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdatePasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLockoutPolicy(ctx context.Context, in *GetLockoutPolicyRequest, opts ...grpc.CallOption) (*GetLockoutPolicyResponse, error) {
	out := new(GetLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLockoutPolicy(ctx context.Context, in *UpdateLockoutPolicyRequest, opts ...grpc.CallOption) (*UpdateLockoutPolicyResponse, error) {
	out := new(UpdateLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPrivacyPolicy(ctx context.Context, in *GetPrivacyPolicyRequest, opts ...grpc.CallOption) (*GetPrivacyPolicyResponse, error) {
	out := new(GetPrivacyPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetPrivacyPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePrivacyPolicy(ctx context.Context, in *UpdatePrivacyPolicyRequest, opts ...grpc.CallOption) (*UpdatePrivacyPolicyResponse, error) {
	out := new(UpdatePrivacyPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdatePrivacyPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultInitMessageText(ctx context.Context, in *GetDefaultInitMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultInitMessageTextResponse, error) {
	out := new(GetDefaultInitMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDefaultInitMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomInitMessageText(ctx context.Context, in *GetCustomInitMessageTextRequest, opts ...grpc.CallOption) (*GetCustomInitMessageTextResponse, error) {
	out := new(GetCustomInitMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetCustomInitMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultInitMessageText(ctx context.Context, in *SetDefaultInitMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultInitMessageTextResponse, error) {
	out := new(SetDefaultInitMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetDefaultInitMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomInitMessageTextToDefault(ctx context.Context, in *ResetCustomInitMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomInitMessageTextToDefaultResponse, error) {
	out := new(ResetCustomInitMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetCustomInitMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultPasswordResetMessageText(ctx context.Context, in *GetDefaultPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordResetMessageTextResponse, error) {
	out := new(GetDefaultPasswordResetMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDefaultPasswordResetMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomPasswordResetMessageText(ctx context.Context, in *GetCustomPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordResetMessageTextResponse, error) {
	out := new(GetCustomPasswordResetMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetCustomPasswordResetMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultPasswordResetMessageText(ctx context.Context, in *SetDefaultPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultPasswordResetMessageTextResponse, error) {
	out := new(SetDefaultPasswordResetMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetDefaultPasswordResetMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomPasswordResetMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordResetMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error) {
	out := new(ResetCustomPasswordResetMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetCustomPasswordResetMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultVerifyEmailMessageText(ctx context.Context, in *GetDefaultVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyEmailMessageTextResponse, error) {
	out := new(GetDefaultVerifyEmailMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDefaultVerifyEmailMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomVerifyEmailMessageText(ctx context.Context, in *GetCustomVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyEmailMessageTextResponse, error) {
	out := new(GetCustomVerifyEmailMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetCustomVerifyEmailMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultVerifyEmailMessageText(ctx context.Context, in *SetDefaultVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifyEmailMessageTextResponse, error) {
	out := new(SetDefaultVerifyEmailMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetDefaultVerifyEmailMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomVerifyEmailMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyEmailMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error) {
	out := new(ResetCustomVerifyEmailMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetCustomVerifyEmailMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultVerifyPhoneMessageText(ctx context.Context, in *GetDefaultVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyPhoneMessageTextResponse, error) {
	out := new(GetDefaultVerifyPhoneMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDefaultVerifyPhoneMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomVerifyPhoneMessageText(ctx context.Context, in *GetCustomVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyPhoneMessageTextResponse, error) {
	out := new(GetCustomVerifyPhoneMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetCustomVerifyPhoneMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultVerifyPhoneMessageText(ctx context.Context, in *SetDefaultVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifyPhoneMessageTextResponse, error) {
	out := new(SetDefaultVerifyPhoneMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetDefaultVerifyPhoneMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomVerifyPhoneMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyPhoneMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error) {
	out := new(ResetCustomVerifyPhoneMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetCustomVerifyPhoneMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultDomainClaimedMessageText(ctx context.Context, in *GetDefaultDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultDomainClaimedMessageTextResponse, error) {
	out := new(GetDefaultDomainClaimedMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDefaultDomainClaimedMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomDomainClaimedMessageText(ctx context.Context, in *GetCustomDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetCustomDomainClaimedMessageTextResponse, error) {
	out := new(GetCustomDomainClaimedMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetCustomDomainClaimedMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultDomainClaimedMessageText(ctx context.Context, in *SetDefaultDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultDomainClaimedMessageTextResponse, error) {
	out := new(SetDefaultDomainClaimedMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetDefaultDomainClaimedMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomDomainClaimedMessageTextToDefault(ctx context.Context, in *ResetCustomDomainClaimedMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error) {
	out := new(ResetCustomDomainClaimedMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetCustomDomainClaimedMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultPasswordlessRegistrationMessageText(ctx context.Context, in *GetDefaultPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error) {
	out := new(GetDefaultPasswordlessRegistrationMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDefaultPasswordlessRegistrationMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomPasswordlessRegistrationMessageText(ctx context.Context, in *GetCustomPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordlessRegistrationMessageTextResponse, error) {
	out := new(GetCustomPasswordlessRegistrationMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetCustomPasswordlessRegistrationMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultPasswordlessRegistrationMessageText(ctx context.Context, in *SetDefaultPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultPasswordlessRegistrationMessageTextResponse, error) {
	out := new(SetDefaultPasswordlessRegistrationMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetDefaultPasswordlessRegistrationMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error) {
	out := new(ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetCustomPasswordlessRegistrationMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultLoginTexts(ctx context.Context, in *GetDefaultLoginTextsRequest, opts ...grpc.CallOption) (*GetDefaultLoginTextsResponse, error) {
	out := new(GetDefaultLoginTextsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetDefaultLoginTexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomLoginTexts(ctx context.Context, in *GetCustomLoginTextsRequest, opts ...grpc.CallOption) (*GetCustomLoginTextsResponse, error) {
	out := new(GetCustomLoginTextsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/GetCustomLoginTexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetCustomLoginText(ctx context.Context, in *SetCustomLoginTextsRequest, opts ...grpc.CallOption) (*SetCustomLoginTextsResponse, error) {
	out := new(SetCustomLoginTextsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/SetCustomLoginText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomLoginTextToDefault(ctx context.Context, in *ResetCustomLoginTextsToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomLoginTextsToDefaultResponse, error) {
	out := new(ResetCustomLoginTextsToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ResetCustomLoginTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIAMMemberRoles(ctx context.Context, in *ListIAMMemberRolesRequest, opts ...grpc.CallOption) (*ListIAMMemberRolesResponse, error) {
	out := new(ListIAMMemberRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListIAMMemberRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIAMMembers(ctx context.Context, in *ListIAMMembersRequest, opts ...grpc.CallOption) (*ListIAMMembersResponse, error) {
	out := new(ListIAMMembersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListIAMMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddIAMMember(ctx context.Context, in *AddIAMMemberRequest, opts ...grpc.CallOption) (*AddIAMMemberResponse, error) {
	out := new(AddIAMMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/AddIAMMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIAMMember(ctx context.Context, in *UpdateIAMMemberRequest, opts ...grpc.CallOption) (*UpdateIAMMemberResponse, error) {
	out := new(UpdateIAMMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/UpdateIAMMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveIAMMember(ctx context.Context, in *RemoveIAMMemberRequest, opts ...grpc.CallOption) (*RemoveIAMMemberResponse, error) {
	out := new(RemoveIAMMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveIAMMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListViews(ctx context.Context, in *ListViewsRequest, opts ...grpc.CallOption) (*ListViewsResponse, error) {
	out := new(ListViewsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListFailedEvents(ctx context.Context, in *ListFailedEventsRequest, opts ...grpc.CallOption) (*ListFailedEventsResponse, error) {
	out := new(ListFailedEventsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/ListFailedEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveFailedEvent(ctx context.Context, in *RemoveFailedEventRequest, opts ...grpc.CallOption) (*RemoveFailedEventResponse, error) {
	out := new(RemoveFailedEventResponse)
	err := c.cc.Invoke(ctx, "/zitadel.admin.v1.AdminService/RemoveFailedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	//Indicates if ZITADEL is running.
	// It respondes as soon as ZITADEL started
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	// Returns the default languages
	GetSupportedLanguages(context.Context, *GetSupportedLanguagesRequest) (*GetSupportedLanguagesResponse, error)
	// Set the default language
	SetDefaultLanguage(context.Context, *SetDefaultLanguageRequest) (*SetDefaultLanguageResponse, error)
	// Set the default language
	GetDefaultLanguage(context.Context, *GetDefaultLanguageRequest) (*GetDefaultLanguageResponse, error)
	// Returns the details of the instance
	GetMyInstance(context.Context, *GetMyInstanceRequest) (*GetMyInstanceResponse, error)
	// Returns the domains of the instance
	ListInstanceDomains(context.Context, *ListInstanceDomainsRequest) (*ListInstanceDomainsResponse, error)
	// Set the default language
	ListSecretGenerators(context.Context, *ListSecretGeneratorsRequest) (*ListSecretGeneratorsResponse, error)
	// Get Secret Generator by type (e.g PasswordResetCode)
	GetSecretGenerator(context.Context, *GetSecretGeneratorRequest) (*GetSecretGeneratorResponse, error)
	// Update secret generator configuration
	UpdateSecretGenerator(context.Context, *UpdateSecretGeneratorRequest) (*UpdateSecretGeneratorResponse, error)
	// Get system smtp configuration
	GetSMTPConfig(context.Context, *GetSMTPConfigRequest) (*GetSMTPConfigResponse, error)
	// Add system smtp configuration
	AddSMTPConfig(context.Context, *AddSMTPConfigRequest) (*AddSMTPConfigResponse, error)
	// Update system smtp configuration
	UpdateSMTPConfig(context.Context, *UpdateSMTPConfigRequest) (*UpdateSMTPConfigResponse, error)
	// Update system smtp configuration password for host
	UpdateSMTPConfigPassword(context.Context, *UpdateSMTPConfigPasswordRequest) (*UpdateSMTPConfigPasswordResponse, error)
	// Remove system smtp configuration
	RemoveSMTPConfig(context.Context, *RemoveSMTPConfigRequest) (*RemoveSMTPConfigResponse, error)
	// list sms provider configurations
	ListSMSProviders(context.Context, *ListSMSProvidersRequest) (*ListSMSProvidersResponse, error)
	// Get sms provider
	GetSMSProvider(context.Context, *GetSMSProviderRequest) (*GetSMSProviderResponse, error)
	// Add twilio sms provider
	AddSMSProviderTwilio(context.Context, *AddSMSProviderTwilioRequest) (*AddSMSProviderTwilioResponse, error)
	// Update twilio sms provider
	UpdateSMSProviderTwilio(context.Context, *UpdateSMSProviderTwilioRequest) (*UpdateSMSProviderTwilioResponse, error)
	// Update twilio sms provider token
	UpdateSMSProviderTwilioToken(context.Context, *UpdateSMSProviderTwilioTokenRequest) (*UpdateSMSProviderTwilioTokenResponse, error)
	// Activate sms provider
	ActivateSMSProvider(context.Context, *ActivateSMSProviderRequest) (*ActivateSMSProviderResponse, error)
	// Deactivate sms provider
	DeactivateSMSProvider(context.Context, *DeactivateSMSProviderRequest) (*DeactivateSMSProviderResponse, error)
	// Remove sms provider token
	RemoveSMSProvider(context.Context, *RemoveSMSProviderRequest) (*RemoveSMSProviderResponse, error)
	// Get OIDC settings (e.g token lifetimes, etc.)
	GetOIDCSettings(context.Context, *GetOIDCSettingsRequest) (*GetOIDCSettingsResponse, error)
	// Update oidc settings (e.g token lifetimes, etc)
	UpdateOIDCSettings(context.Context, *UpdateOIDCSettingsRequest) (*UpdateOIDCSettingsResponse, error)
	// Get file system notification provider
	GetFileSystemNotificationProvider(context.Context, *GetFileSystemNotificationProviderRequest) (*GetFileSystemNotificationProviderResponse, error)
	// Get log notification provider
	GetLogNotificationProvider(context.Context, *GetLogNotificationProviderRequest) (*GetLogNotificationProviderResponse, error)
	// Returns an organisation by id
	GetOrgByID(context.Context, *GetOrgByIDRequest) (*GetOrgByIDResponse, error)
	//Checks whether an organisation exists by the given parameters
	IsOrgUnique(context.Context, *IsOrgUniqueRequest) (*IsOrgUniqueResponse, error)
	// Set the default org
	SetDefaultOrg(context.Context, *SetDefaultOrgRequest) (*SetDefaultOrgResponse, error)
	// Set the default org
	GetDefaultOrg(context.Context, *GetDefaultOrgRequest) (*GetDefaultOrgResponse, error)
	//Returns all organisations matching the request
	// all queries need to match (AND)
	ListOrgs(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error)
	//Creates a new org and user
	// and adds the user to the orgs members as ORG_OWNER
	SetUpOrg(context.Context, *SetUpOrgRequest) (*SetUpOrgResponse, error)
	// Returns a identity provider configuration of the IAM instance
	GetIDPByID(context.Context, *GetIDPByIDRequest) (*GetIDPByIDResponse, error)
	// Returns all identity provider configurations of the IAM instance
	ListIDPs(context.Context, *ListIDPsRequest) (*ListIDPsResponse, error)
	// Adds a new oidc identity provider configuration the IAM instance
	AddOIDCIDP(context.Context, *AddOIDCIDPRequest) (*AddOIDCIDPResponse, error)
	// Adds a new jwt identity provider configuration the IAM instance
	AddJWTIDP(context.Context, *AddJWTIDPRequest) (*AddJWTIDPResponse, error)
	//Updates the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDP(context.Context, *UpdateIDPRequest) (*UpdateIDPResponse, error)
	//Sets the state of the idp to IDP_STATE_INACTIVE
	// the state MUST be IDP_STATE_ACTIVE for this call
	DeactivateIDP(context.Context, *DeactivateIDPRequest) (*DeactivateIDPResponse, error)
	//Sets the state of the idp to IDP_STATE_ACTIVE
	// the state MUST be IDP_STATE_INACTIVE for this call
	ReactivateIDP(context.Context, *ReactivateIDPRequest) (*ReactivateIDPResponse, error)
	//RemoveIDP deletes the IDP permanetly
	RemoveIDP(context.Context, *RemoveIDPRequest) (*RemoveIDPResponse, error)
	//Updates the oidc configuration of the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDPOIDCConfig(context.Context, *UpdateIDPOIDCConfigRequest) (*UpdateIDPOIDCConfigResponse, error)
	//Updates the jwt configuration of the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDPJWTConfig(context.Context, *UpdateIDPJWTConfigRequest) (*UpdateIDPJWTConfigResponse, error)
	//deprecated: please use DomainPolicy instead
	//Returns the Org IAM policy defined by the administrators of ZITADEL
	GetOrgIAMPolicy(context.Context, *GetOrgIAMPolicyRequest) (*GetOrgIAMPolicyResponse, error)
	//deprecated: please use DomainPolicy instead
	//Updates the default OrgIAM policy.
	// it impacts all organisations without a customised policy
	UpdateOrgIAMPolicy(context.Context, *UpdateOrgIAMPolicyRequest) (*UpdateOrgIAMPolicyResponse, error)
	//deprecated: please use DomainPolicy instead
	//Returns the customised policy or the default if not customised
	GetCustomOrgIAMPolicy(context.Context, *GetCustomOrgIAMPolicyRequest) (*GetCustomOrgIAMPolicyResponse, error)
	//deprecated: please use DomainPolicy instead
	//Defines a custom OrgIAM policy as specified
	AddCustomOrgIAMPolicy(context.Context, *AddCustomOrgIAMPolicyRequest) (*AddCustomOrgIAMPolicyResponse, error)
	//deprecated: please use DomainPolicy instead
	//Updates a custom OrgIAM policy as specified
	UpdateCustomOrgIAMPolicy(context.Context, *UpdateCustomOrgIAMPolicyRequest) (*UpdateCustomOrgIAMPolicyResponse, error)
	//deprecated: please use DomainPolicy instead
	//Resets the org iam policy of the organisation to default
	// ZITADEL will fallback to the default policy defined by the ZITADEL administrators
	ResetCustomOrgIAMPolicyToDefault(context.Context, *ResetCustomOrgIAMPolicyToDefaultRequest) (*ResetCustomOrgIAMPolicyToDefaultResponse, error)
	//Returns the Domain policy defined by the administrators of ZITADEL
	GetDomainPolicy(context.Context, *GetDomainPolicyRequest) (*GetDomainPolicyResponse, error)
	//Updates the default Domain policy.
	// it impacts all organisations without a customised policy
	UpdateDomainPolicy(context.Context, *UpdateDomainPolicyRequest) (*UpdateDomainPolicyResponse, error)
	//Returns the customised policy or the default if not customised
	GetCustomDomainPolicy(context.Context, *GetCustomDomainPolicyRequest) (*GetCustomDomainPolicyResponse, error)
	//Defines a custom Domain policy as specified
	AddCustomDomainPolicy(context.Context, *AddCustomDomainPolicyRequest) (*AddCustomDomainPolicyResponse, error)
	//Updates a custom Domain policy as specified
	UpdateCustomDomainPolicy(context.Context, *UpdateCustomDomainPolicyRequest) (*UpdateCustomDomainPolicyResponse, error)
	//Resets the org iam policy of the organisation to default
	// ZITADEL will fallback to the default policy defined by the ZITADEL administrators
	ResetCustomDomainPolicyToDefault(context.Context, *ResetCustomDomainPolicyToDefaultRequest) (*ResetCustomDomainPolicyToDefaultResponse, error)
	//Returns the label policy defined by the administrators of ZITADEL
	GetLabelPolicy(context.Context, *GetLabelPolicyRequest) (*GetLabelPolicyResponse, error)
	//Returns the preview label policy defined by the administrators of ZITADEL
	GetPreviewLabelPolicy(context.Context, *GetPreviewLabelPolicyRequest) (*GetPreviewLabelPolicyResponse, error)
	//Updates the default label policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLabelPolicy(context.Context, *UpdateLabelPolicyRequest) (*UpdateLabelPolicyResponse, error)
	// Activates all changes of the label policy
	ActivateLabelPolicy(context.Context, *ActivateLabelPolicyRequest) (*ActivateLabelPolicyResponse, error)
	// Removes the logo of the label policy
	RemoveLabelPolicyLogo(context.Context, *RemoveLabelPolicyLogoRequest) (*RemoveLabelPolicyLogoResponse, error)
	// Removes the logo dark of the label policy
	RemoveLabelPolicyLogoDark(context.Context, *RemoveLabelPolicyLogoDarkRequest) (*RemoveLabelPolicyLogoDarkResponse, error)
	// Removes the icon of the label policy
	RemoveLabelPolicyIcon(context.Context, *RemoveLabelPolicyIconRequest) (*RemoveLabelPolicyIconResponse, error)
	// Removes the logo dark of the label policy
	RemoveLabelPolicyIconDark(context.Context, *RemoveLabelPolicyIconDarkRequest) (*RemoveLabelPolicyIconDarkResponse, error)
	// Removes the font of the label policy
	RemoveLabelPolicyFont(context.Context, *RemoveLabelPolicyFontRequest) (*RemoveLabelPolicyFontResponse, error)
	//Returns the login policy defined by the administrators of ZITADEL
	GetLoginPolicy(context.Context, *GetLoginPolicyRequest) (*GetLoginPolicyResponse, error)
	//Updates the default login policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLoginPolicy(context.Context, *UpdateLoginPolicyRequest) (*UpdateLoginPolicyResponse, error)
	//Returns the idps linked to the default login policy,
	// defined by the administrators of ZITADEL
	ListLoginPolicyIDPs(context.Context, *ListLoginPolicyIDPsRequest) (*ListLoginPolicyIDPsResponse, error)
	//Adds the povided idp to the default login policy.
	// It impacts all organisations without a customised policy
	AddIDPToLoginPolicy(context.Context, *AddIDPToLoginPolicyRequest) (*AddIDPToLoginPolicyResponse, error)
	//Removes the povided idp from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveIDPFromLoginPolicy(context.Context, *RemoveIDPFromLoginPolicyRequest) (*RemoveIDPFromLoginPolicyResponse, error)
	//Returns the available second factors defined by the administrators of ZITADEL
	ListLoginPolicySecondFactors(context.Context, *ListLoginPolicySecondFactorsRequest) (*ListLoginPolicySecondFactorsResponse, error)
	//Adds a second factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddSecondFactorToLoginPolicy(context.Context, *AddSecondFactorToLoginPolicyRequest) (*AddSecondFactorToLoginPolicyResponse, error)
	//Removes a second factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveSecondFactorFromLoginPolicy(context.Context, *RemoveSecondFactorFromLoginPolicyRequest) (*RemoveSecondFactorFromLoginPolicyResponse, error)
	//Returns the available multi factors defined by the administrators of ZITADEL
	ListLoginPolicyMultiFactors(context.Context, *ListLoginPolicyMultiFactorsRequest) (*ListLoginPolicyMultiFactorsResponse, error)
	//Adds a multi factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddMultiFactorToLoginPolicy(context.Context, *AddMultiFactorToLoginPolicyRequest) (*AddMultiFactorToLoginPolicyResponse, error)
	//Removes a multi factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveMultiFactorFromLoginPolicy(context.Context, *RemoveMultiFactorFromLoginPolicyRequest) (*RemoveMultiFactorFromLoginPolicyResponse, error)
	//Returns the password complexity policy defined by the administrators of ZITADEL
	GetPasswordComplexityPolicy(context.Context, *GetPasswordComplexityPolicyRequest) (*GetPasswordComplexityPolicyResponse, error)
	//Updates the default password complexity policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordComplexityPolicy(context.Context, *UpdatePasswordComplexityPolicyRequest) (*UpdatePasswordComplexityPolicyResponse, error)
	//Returns the password age policy defined by the administrators of ZITADEL
	GetPasswordAgePolicy(context.Context, *GetPasswordAgePolicyRequest) (*GetPasswordAgePolicyResponse, error)
	//Updates the default password age policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordAgePolicy(context.Context, *UpdatePasswordAgePolicyRequest) (*UpdatePasswordAgePolicyResponse, error)
	//Returns the lockout policy defined by the administrators of ZITADEL
	GetLockoutPolicy(context.Context, *GetLockoutPolicyRequest) (*GetLockoutPolicyResponse, error)
	//Updates the default lockout policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLockoutPolicy(context.Context, *UpdateLockoutPolicyRequest) (*UpdateLockoutPolicyResponse, error)
	//Returns the privacy policy defined by the administrators of ZITADEL
	GetPrivacyPolicy(context.Context, *GetPrivacyPolicyRequest) (*GetPrivacyPolicyResponse, error)
	//Updates the default privacy policy of ZITADEL
	// it impacts all organisations without a customised policy
	// Variable {{.Lang}} can be set to have different links based on the language
	UpdatePrivacyPolicy(context.Context, *UpdatePrivacyPolicyRequest) (*UpdatePrivacyPolicyResponse, error)
	//Returns the default text for initial message (translation file)
	GetDefaultInitMessageText(context.Context, *GetDefaultInitMessageTextRequest) (*GetDefaultInitMessageTextResponse, error)
	//Returns the custom text for initial message (overwritten in eventstore)
	GetCustomInitMessageText(context.Context, *GetCustomInitMessageTextRequest) (*GetCustomInitMessageTextResponse, error)
	//Sets the default custom text for initial message
	// it impacts all organisations without customized initial message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultInitMessageText(context.Context, *SetDefaultInitMessageTextRequest) (*SetDefaultInitMessageTextResponse, error)
	// Removes the custom init message text of the system
	// The default text from the translation file will trigger after
	ResetCustomInitMessageTextToDefault(context.Context, *ResetCustomInitMessageTextToDefaultRequest) (*ResetCustomInitMessageTextToDefaultResponse, error)
	//Returns the default text for password reset message (translation file)
	GetDefaultPasswordResetMessageText(context.Context, *GetDefaultPasswordResetMessageTextRequest) (*GetDefaultPasswordResetMessageTextResponse, error)
	//Returns the custom text for password reset message (overwritten in eventstore)
	GetCustomPasswordResetMessageText(context.Context, *GetCustomPasswordResetMessageTextRequest) (*GetCustomPasswordResetMessageTextResponse, error)
	//Sets the default custom text for password reset message
	// it impacts all organisations without customized password reset message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultPasswordResetMessageText(context.Context, *SetDefaultPasswordResetMessageTextRequest) (*SetDefaultPasswordResetMessageTextResponse, error)
	// Removes the custom password reset message text of the system
	// The default text from the translation file will trigger after
	ResetCustomPasswordResetMessageTextToDefault(context.Context, *ResetCustomPasswordResetMessageTextToDefaultRequest) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error)
	//Returns the default text for verify email message (translation files)
	GetDefaultVerifyEmailMessageText(context.Context, *GetDefaultVerifyEmailMessageTextRequest) (*GetDefaultVerifyEmailMessageTextResponse, error)
	//Returns the custom text for verify email message (overwritten in eventstore)
	GetCustomVerifyEmailMessageText(context.Context, *GetCustomVerifyEmailMessageTextRequest) (*GetCustomVerifyEmailMessageTextResponse, error)
	//Sets the default custom text for verify email message
	// it impacts all organisations without customized verify email message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultVerifyEmailMessageText(context.Context, *SetDefaultVerifyEmailMessageTextRequest) (*SetDefaultVerifyEmailMessageTextResponse, error)
	// Removes the custom verify email message text of the system
	// The default text from the translation file will trigger after
	ResetCustomVerifyEmailMessageTextToDefault(context.Context, *ResetCustomVerifyEmailMessageTextToDefaultRequest) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error)
	//Returns the default text for verify phone message (translation file)
	GetDefaultVerifyPhoneMessageText(context.Context, *GetDefaultVerifyPhoneMessageTextRequest) (*GetDefaultVerifyPhoneMessageTextResponse, error)
	//Returns the custom text for verify phone message
	GetCustomVerifyPhoneMessageText(context.Context, *GetCustomVerifyPhoneMessageTextRequest) (*GetCustomVerifyPhoneMessageTextResponse, error)
	//Sets the default custom text for verify phone message
	// it impacts all organisations without customized verify phone message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultVerifyPhoneMessageText(context.Context, *SetDefaultVerifyPhoneMessageTextRequest) (*SetDefaultVerifyPhoneMessageTextResponse, error)
	// Removes the custom verify phone text of the system
	// The default text from the translation file will trigger after
	ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *ResetCustomVerifyPhoneMessageTextToDefaultRequest) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error)
	//Returns the default text for domain claimed message (translation file)
	GetDefaultDomainClaimedMessageText(context.Context, *GetDefaultDomainClaimedMessageTextRequest) (*GetDefaultDomainClaimedMessageTextResponse, error)
	//Returns the custom text for domain claimed message (overwritten in eventstore)
	GetCustomDomainClaimedMessageText(context.Context, *GetCustomDomainClaimedMessageTextRequest) (*GetCustomDomainClaimedMessageTextResponse, error)
	//Sets the default custom text for domain claimed phone message
	// it impacts all organisations without customized domain claimed message text
	// The Following Variables can be used:
	// {{.Domain}} {{.TempUsername}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultDomainClaimedMessageText(context.Context, *SetDefaultDomainClaimedMessageTextRequest) (*SetDefaultDomainClaimedMessageTextResponse, error)
	// Removes the custom domain claimed message text of the system
	// The default text from the translation file will trigger after
	ResetCustomDomainClaimedMessageTextToDefault(context.Context, *ResetCustomDomainClaimedMessageTextToDefaultRequest) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error)
	//Returns the default text for passwordless registration message (translation file)
	GetDefaultPasswordlessRegistrationMessageText(context.Context, *GetDefaultPasswordlessRegistrationMessageTextRequest) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error)
	//Returns the custom text for passwordless registration message (overwritten in eventstore)
	GetCustomPasswordlessRegistrationMessageText(context.Context, *GetCustomPasswordlessRegistrationMessageTextRequest) (*GetCustomPasswordlessRegistrationMessageTextResponse, error)
	//Sets the default custom text for passwordless registration message
	// it impacts all organisations without customized passwordless registration message text
	// The Following Variables can be used:
	// {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetDefaultPasswordlessRegistrationMessageText(context.Context, *SetDefaultPasswordlessRegistrationMessageTextRequest) (*SetDefaultPasswordlessRegistrationMessageTextResponse, error)
	// Removes the custom passwordless link message text of the system
	// The default text from the translation file will trigger after
	ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error)
	//Returns the default custom texts for login ui (translation file)
	GetDefaultLoginTexts(context.Context, *GetDefaultLoginTextsRequest) (*GetDefaultLoginTextsResponse, error)
	//Returns the custom texts for login ui
	GetCustomLoginTexts(context.Context, *GetCustomLoginTextsRequest) (*GetCustomLoginTextsResponse, error)
	//Sets the custom text for login ui
	//it impacts all organisations without customized login ui texts
	SetCustomLoginText(context.Context, *SetCustomLoginTextsRequest) (*SetCustomLoginTextsResponse, error)
	// Removes the custom texts for login ui
	// it impacts all organisations without customized login ui texts
	// The default text form translation file will trigger after
	ResetCustomLoginTextToDefault(context.Context, *ResetCustomLoginTextsToDefaultRequest) (*ResetCustomLoginTextsToDefaultResponse, error)
	//Returns the IAM roles visible for the requested user
	ListIAMMemberRoles(context.Context, *ListIAMMemberRolesRequest) (*ListIAMMemberRolesResponse, error)
	//Returns all members matching the request
	// all queries need to match (ANDed)
	ListIAMMembers(context.Context, *ListIAMMembersRequest) (*ListIAMMembersResponse, error)
	//Adds a user to the membership list of ZITADEL with the given roles
	// undefined roles will be dropped
	AddIAMMember(context.Context, *AddIAMMemberRequest) (*AddIAMMemberResponse, error)
	//Sets the given roles on a member.
	// The member has only roles provided by this call
	UpdateIAMMember(context.Context, *UpdateIAMMemberRequest) (*UpdateIAMMemberResponse, error)
	//Removes the user from the membership list of ZITADEL
	RemoveIAMMember(context.Context, *RemoveIAMMemberRequest) (*RemoveIAMMemberResponse, error)
	//Returns all stored read models of ZITADEL
	// views are used for search optimisation and optimise request latencies
	// they represent the delta of the event happend on the objects
	ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error)
	//Returns event descriptions which cannot be processed.
	// It's possible that some events need some retries.
	// For example if the SMTP-API wasn't able to send an email at the first time
	ListFailedEvents(context.Context, *ListFailedEventsRequest) (*ListFailedEventsResponse, error)
	//Deletes the event from failed events view.
	// the event is not removed from the change stream
	// This call is usefull if the system was able to process the event later.
	// e.g. if the second try of sending an email was successful. the first try produced a
	// failed event. You can find out if it worked on the `failure_count`
	RemoveFailedEvent(context.Context, *RemoveFailedEventRequest) (*RemoveFailedEventResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedAdminServiceServer) GetSupportedLanguages(context.Context, *GetSupportedLanguagesRequest) (*GetSupportedLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedLanguages not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultLanguage(context.Context, *SetDefaultLanguageRequest) (*SetDefaultLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultLanguage not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultLanguage(context.Context, *GetDefaultLanguageRequest) (*GetDefaultLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLanguage not implemented")
}
func (UnimplementedAdminServiceServer) GetMyInstance(context.Context, *GetMyInstanceRequest) (*GetMyInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyInstance not implemented")
}
func (UnimplementedAdminServiceServer) ListInstanceDomains(context.Context, *ListInstanceDomainsRequest) (*ListInstanceDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstanceDomains not implemented")
}
func (UnimplementedAdminServiceServer) ListSecretGenerators(context.Context, *ListSecretGeneratorsRequest) (*ListSecretGeneratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecretGenerators not implemented")
}
func (UnimplementedAdminServiceServer) GetSecretGenerator(context.Context, *GetSecretGeneratorRequest) (*GetSecretGeneratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretGenerator not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSecretGenerator(context.Context, *UpdateSecretGeneratorRequest) (*UpdateSecretGeneratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecretGenerator not implemented")
}
func (UnimplementedAdminServiceServer) GetSMTPConfig(context.Context, *GetSMTPConfigRequest) (*GetSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) AddSMTPConfig(context.Context, *AddSMTPConfigRequest) (*AddSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSMTPConfig(context.Context, *UpdateSMTPConfigRequest) (*UpdateSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSMTPConfigPassword(context.Context, *UpdateSMTPConfigPasswordRequest) (*UpdateSMTPConfigPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSMTPConfigPassword not implemented")
}
func (UnimplementedAdminServiceServer) RemoveSMTPConfig(context.Context, *RemoveSMTPConfigRequest) (*RemoveSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) ListSMSProviders(context.Context, *ListSMSProvidersRequest) (*ListSMSProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSMSProviders not implemented")
}
func (UnimplementedAdminServiceServer) GetSMSProvider(context.Context, *GetSMSProviderRequest) (*GetSMSProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMSProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddSMSProviderTwilio(context.Context, *AddSMSProviderTwilioRequest) (*AddSMSProviderTwilioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSMSProviderTwilio not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSMSProviderTwilio(context.Context, *UpdateSMSProviderTwilioRequest) (*UpdateSMSProviderTwilioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSMSProviderTwilio not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSMSProviderTwilioToken(context.Context, *UpdateSMSProviderTwilioTokenRequest) (*UpdateSMSProviderTwilioTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSMSProviderTwilioToken not implemented")
}
func (UnimplementedAdminServiceServer) ActivateSMSProvider(context.Context, *ActivateSMSProviderRequest) (*ActivateSMSProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSMSProvider not implemented")
}
func (UnimplementedAdminServiceServer) DeactivateSMSProvider(context.Context, *DeactivateSMSProviderRequest) (*DeactivateSMSProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateSMSProvider not implemented")
}
func (UnimplementedAdminServiceServer) RemoveSMSProvider(context.Context, *RemoveSMSProviderRequest) (*RemoveSMSProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSMSProvider not implemented")
}
func (UnimplementedAdminServiceServer) GetOIDCSettings(context.Context, *GetOIDCSettingsRequest) (*GetOIDCSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOIDCSettings not implemented")
}
func (UnimplementedAdminServiceServer) UpdateOIDCSettings(context.Context, *UpdateOIDCSettingsRequest) (*UpdateOIDCSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOIDCSettings not implemented")
}
func (UnimplementedAdminServiceServer) GetFileSystemNotificationProvider(context.Context, *GetFileSystemNotificationProviderRequest) (*GetFileSystemNotificationProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileSystemNotificationProvider not implemented")
}
func (UnimplementedAdminServiceServer) GetLogNotificationProvider(context.Context, *GetLogNotificationProviderRequest) (*GetLogNotificationProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogNotificationProvider not implemented")
}
func (UnimplementedAdminServiceServer) GetOrgByID(context.Context, *GetOrgByIDRequest) (*GetOrgByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByID not implemented")
}
func (UnimplementedAdminServiceServer) IsOrgUnique(context.Context, *IsOrgUniqueRequest) (*IsOrgUniqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOrgUnique not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultOrg(context.Context, *SetDefaultOrgRequest) (*SetDefaultOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultOrg not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultOrg(context.Context, *GetDefaultOrgRequest) (*GetDefaultOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultOrg not implemented")
}
func (UnimplementedAdminServiceServer) ListOrgs(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgs not implemented")
}
func (UnimplementedAdminServiceServer) SetUpOrg(context.Context, *SetUpOrgRequest) (*SetUpOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpOrg not implemented")
}
func (UnimplementedAdminServiceServer) GetIDPByID(context.Context, *GetIDPByIDRequest) (*GetIDPByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDPByID not implemented")
}
func (UnimplementedAdminServiceServer) ListIDPs(context.Context, *ListIDPsRequest) (*ListIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIDPs not implemented")
}
func (UnimplementedAdminServiceServer) AddOIDCIDP(context.Context, *AddOIDCIDPRequest) (*AddOIDCIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOIDCIDP not implemented")
}
func (UnimplementedAdminServiceServer) AddJWTIDP(context.Context, *AddJWTIDPRequest) (*AddJWTIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJWTIDP not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIDP(context.Context, *UpdateIDPRequest) (*UpdateIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDP not implemented")
}
func (UnimplementedAdminServiceServer) DeactivateIDP(context.Context, *DeactivateIDPRequest) (*DeactivateIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateIDP not implemented")
}
func (UnimplementedAdminServiceServer) ReactivateIDP(context.Context, *ReactivateIDPRequest) (*ReactivateIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateIDP not implemented")
}
func (UnimplementedAdminServiceServer) RemoveIDP(context.Context, *RemoveIDPRequest) (*RemoveIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIDP not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIDPOIDCConfig(context.Context, *UpdateIDPOIDCConfigRequest) (*UpdateIDPOIDCConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDPOIDCConfig not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIDPJWTConfig(context.Context, *UpdateIDPJWTConfigRequest) (*UpdateIDPJWTConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDPJWTConfig not implemented")
}
func (UnimplementedAdminServiceServer) GetOrgIAMPolicy(context.Context, *GetOrgIAMPolicyRequest) (*GetOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateOrgIAMPolicy(context.Context, *UpdateOrgIAMPolicyRequest) (*UpdateOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomOrgIAMPolicy(context.Context, *GetCustomOrgIAMPolicyRequest) (*GetCustomOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) AddCustomOrgIAMPolicy(context.Context, *AddCustomOrgIAMPolicyRequest) (*AddCustomOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateCustomOrgIAMPolicy(context.Context, *UpdateCustomOrgIAMPolicyRequest) (*UpdateCustomOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomOrgIAMPolicyToDefault(context.Context, *ResetCustomOrgIAMPolicyToDefaultRequest) (*ResetCustomOrgIAMPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomOrgIAMPolicyToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDomainPolicy(context.Context, *GetDomainPolicyRequest) (*GetDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDomainPolicy(context.Context, *UpdateDomainPolicyRequest) (*UpdateDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomainPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomDomainPolicy(context.Context, *GetCustomDomainPolicyRequest) (*GetCustomDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomDomainPolicy not implemented")
}
func (UnimplementedAdminServiceServer) AddCustomDomainPolicy(context.Context, *AddCustomDomainPolicyRequest) (*AddCustomDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomDomainPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateCustomDomainPolicy(context.Context, *UpdateCustomDomainPolicyRequest) (*UpdateCustomDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomDomainPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomDomainPolicyToDefault(context.Context, *ResetCustomDomainPolicyToDefaultRequest) (*ResetCustomDomainPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomDomainPolicyToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetLabelPolicy(context.Context, *GetLabelPolicyRequest) (*GetLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPreviewLabelPolicy(context.Context, *GetPreviewLabelPolicyRequest) (*GetPreviewLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviewLabelPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateLabelPolicy(context.Context, *UpdateLabelPolicyRequest) (*UpdateLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabelPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ActivateLabelPolicy(context.Context, *ActivateLabelPolicyRequest) (*ActivateLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateLabelPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveLabelPolicyLogo(context.Context, *RemoveLabelPolicyLogoRequest) (*RemoveLabelPolicyLogoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelPolicyLogo not implemented")
}
func (UnimplementedAdminServiceServer) RemoveLabelPolicyLogoDark(context.Context, *RemoveLabelPolicyLogoDarkRequest) (*RemoveLabelPolicyLogoDarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelPolicyLogoDark not implemented")
}
func (UnimplementedAdminServiceServer) RemoveLabelPolicyIcon(context.Context, *RemoveLabelPolicyIconRequest) (*RemoveLabelPolicyIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelPolicyIcon not implemented")
}
func (UnimplementedAdminServiceServer) RemoveLabelPolicyIconDark(context.Context, *RemoveLabelPolicyIconDarkRequest) (*RemoveLabelPolicyIconDarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelPolicyIconDark not implemented")
}
func (UnimplementedAdminServiceServer) RemoveLabelPolicyFont(context.Context, *RemoveLabelPolicyFontRequest) (*RemoveLabelPolicyFontResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelPolicyFont not implemented")
}
func (UnimplementedAdminServiceServer) GetLoginPolicy(context.Context, *GetLoginPolicyRequest) (*GetLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateLoginPolicy(context.Context, *UpdateLoginPolicyRequest) (*UpdateLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListLoginPolicyIDPs(context.Context, *ListLoginPolicyIDPsRequest) (*ListLoginPolicyIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicyIDPs not implemented")
}
func (UnimplementedAdminServiceServer) AddIDPToLoginPolicy(context.Context, *AddIDPToLoginPolicyRequest) (*AddIDPToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIDPToLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveIDPFromLoginPolicy(context.Context, *RemoveIDPFromLoginPolicyRequest) (*RemoveIDPFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIDPFromLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListLoginPolicySecondFactors(context.Context, *ListLoginPolicySecondFactorsRequest) (*ListLoginPolicySecondFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicySecondFactors not implemented")
}
func (UnimplementedAdminServiceServer) AddSecondFactorToLoginPolicy(context.Context, *AddSecondFactorToLoginPolicyRequest) (*AddSecondFactorToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecondFactorToLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveSecondFactorFromLoginPolicy(context.Context, *RemoveSecondFactorFromLoginPolicyRequest) (*RemoveSecondFactorFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSecondFactorFromLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListLoginPolicyMultiFactors(context.Context, *ListLoginPolicyMultiFactorsRequest) (*ListLoginPolicyMultiFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicyMultiFactors not implemented")
}
func (UnimplementedAdminServiceServer) AddMultiFactorToLoginPolicy(context.Context, *AddMultiFactorToLoginPolicyRequest) (*AddMultiFactorToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiFactorToLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveMultiFactorFromLoginPolicy(context.Context, *RemoveMultiFactorFromLoginPolicyRequest) (*RemoveMultiFactorFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMultiFactorFromLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPasswordComplexityPolicy(context.Context, *GetPasswordComplexityPolicyRequest) (*GetPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordComplexityPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePasswordComplexityPolicy(context.Context, *UpdatePasswordComplexityPolicyRequest) (*UpdatePasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordComplexityPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPasswordAgePolicy(context.Context, *GetPasswordAgePolicyRequest) (*GetPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordAgePolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePasswordAgePolicy(context.Context, *UpdatePasswordAgePolicyRequest) (*UpdatePasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordAgePolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetLockoutPolicy(context.Context, *GetLockoutPolicyRequest) (*GetLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockoutPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateLockoutPolicy(context.Context, *UpdateLockoutPolicyRequest) (*UpdateLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLockoutPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPrivacyPolicy(context.Context, *GetPrivacyPolicyRequest) (*GetPrivacyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivacyPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePrivacyPolicy(context.Context, *UpdatePrivacyPolicyRequest) (*UpdatePrivacyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivacyPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultInitMessageText(context.Context, *GetDefaultInitMessageTextRequest) (*GetDefaultInitMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultInitMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomInitMessageText(context.Context, *GetCustomInitMessageTextRequest) (*GetCustomInitMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomInitMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultInitMessageText(context.Context, *SetDefaultInitMessageTextRequest) (*SetDefaultInitMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultInitMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomInitMessageTextToDefault(context.Context, *ResetCustomInitMessageTextToDefaultRequest) (*ResetCustomInitMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomInitMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultPasswordResetMessageText(context.Context, *GetDefaultPasswordResetMessageTextRequest) (*GetDefaultPasswordResetMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordResetMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomPasswordResetMessageText(context.Context, *GetCustomPasswordResetMessageTextRequest) (*GetCustomPasswordResetMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomPasswordResetMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultPasswordResetMessageText(context.Context, *SetDefaultPasswordResetMessageTextRequest) (*SetDefaultPasswordResetMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPasswordResetMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomPasswordResetMessageTextToDefault(context.Context, *ResetCustomPasswordResetMessageTextToDefaultRequest) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomPasswordResetMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultVerifyEmailMessageText(context.Context, *GetDefaultVerifyEmailMessageTextRequest) (*GetDefaultVerifyEmailMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVerifyEmailMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomVerifyEmailMessageText(context.Context, *GetCustomVerifyEmailMessageTextRequest) (*GetCustomVerifyEmailMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVerifyEmailMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultVerifyEmailMessageText(context.Context, *SetDefaultVerifyEmailMessageTextRequest) (*SetDefaultVerifyEmailMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVerifyEmailMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomVerifyEmailMessageTextToDefault(context.Context, *ResetCustomVerifyEmailMessageTextToDefaultRequest) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomVerifyEmailMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultVerifyPhoneMessageText(context.Context, *GetDefaultVerifyPhoneMessageTextRequest) (*GetDefaultVerifyPhoneMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVerifyPhoneMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomVerifyPhoneMessageText(context.Context, *GetCustomVerifyPhoneMessageTextRequest) (*GetCustomVerifyPhoneMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVerifyPhoneMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultVerifyPhoneMessageText(context.Context, *SetDefaultVerifyPhoneMessageTextRequest) (*SetDefaultVerifyPhoneMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVerifyPhoneMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *ResetCustomVerifyPhoneMessageTextToDefaultRequest) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomVerifyPhoneMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultDomainClaimedMessageText(context.Context, *GetDefaultDomainClaimedMessageTextRequest) (*GetDefaultDomainClaimedMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultDomainClaimedMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomDomainClaimedMessageText(context.Context, *GetCustomDomainClaimedMessageTextRequest) (*GetCustomDomainClaimedMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomDomainClaimedMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultDomainClaimedMessageText(context.Context, *SetDefaultDomainClaimedMessageTextRequest) (*SetDefaultDomainClaimedMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultDomainClaimedMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomDomainClaimedMessageTextToDefault(context.Context, *ResetCustomDomainClaimedMessageTextToDefaultRequest) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomDomainClaimedMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultPasswordlessRegistrationMessageText(context.Context, *GetDefaultPasswordlessRegistrationMessageTextRequest) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordlessRegistrationMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomPasswordlessRegistrationMessageText(context.Context, *GetCustomPasswordlessRegistrationMessageTextRequest) (*GetCustomPasswordlessRegistrationMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomPasswordlessRegistrationMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultPasswordlessRegistrationMessageText(context.Context, *SetDefaultPasswordlessRegistrationMessageTextRequest) (*SetDefaultPasswordlessRegistrationMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPasswordlessRegistrationMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomPasswordlessRegistrationMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultLoginTexts(context.Context, *GetDefaultLoginTextsRequest) (*GetDefaultLoginTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLoginTexts not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomLoginTexts(context.Context, *GetCustomLoginTextsRequest) (*GetCustomLoginTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomLoginTexts not implemented")
}
func (UnimplementedAdminServiceServer) SetCustomLoginText(context.Context, *SetCustomLoginTextsRequest) (*SetCustomLoginTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomLoginText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomLoginTextToDefault(context.Context, *ResetCustomLoginTextsToDefaultRequest) (*ResetCustomLoginTextsToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomLoginTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) ListIAMMemberRoles(context.Context, *ListIAMMemberRolesRequest) (*ListIAMMemberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIAMMemberRoles not implemented")
}
func (UnimplementedAdminServiceServer) ListIAMMembers(context.Context, *ListIAMMembersRequest) (*ListIAMMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIAMMembers not implemented")
}
func (UnimplementedAdminServiceServer) AddIAMMember(context.Context, *AddIAMMemberRequest) (*AddIAMMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIAMMember not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIAMMember(context.Context, *UpdateIAMMemberRequest) (*UpdateIAMMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIAMMember not implemented")
}
func (UnimplementedAdminServiceServer) RemoveIAMMember(context.Context, *RemoveIAMMemberRequest) (*RemoveIAMMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIAMMember not implemented")
}
func (UnimplementedAdminServiceServer) ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViews not implemented")
}
func (UnimplementedAdminServiceServer) ListFailedEvents(context.Context, *ListFailedEventsRequest) (*ListFailedEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFailedEvents not implemented")
}
func (UnimplementedAdminServiceServer) RemoveFailedEvent(context.Context, *RemoveFailedEventRequest) (*RemoveFailedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFailedEvent not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSupportedLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSupportedLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetSupportedLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSupportedLanguages(ctx, req.(*GetSupportedLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetDefaultLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultLanguage(ctx, req.(*SetDefaultLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDefaultLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultLanguage(ctx, req.(*GetDefaultLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetMyInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetMyInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetMyInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetMyInstance(ctx, req.(*GetMyInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListInstanceDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstanceDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListInstanceDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListInstanceDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListInstanceDomains(ctx, req.(*ListInstanceDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListSecretGenerators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretGeneratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListSecretGenerators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListSecretGenerators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListSecretGenerators(ctx, req.(*ListSecretGeneratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSecretGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretGeneratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSecretGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetSecretGenerator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSecretGenerator(ctx, req.(*GetSecretGeneratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSecretGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretGeneratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSecretGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateSecretGenerator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSecretGenerator(ctx, req.(*UpdateSecretGeneratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetSMTPConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSMTPConfig(ctx, req.(*GetSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddSMTPConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddSMTPConfig(ctx, req.(*AddSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateSMTPConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSMTPConfig(ctx, req.(*UpdateSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSMTPConfigPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSMTPConfigPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSMTPConfigPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateSMTPConfigPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSMTPConfigPassword(ctx, req.(*UpdateSMTPConfigPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveSMTPConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveSMTPConfig(ctx, req.(*RemoveSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListSMSProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSMSProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListSMSProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListSMSProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListSMSProviders(ctx, req.(*ListSMSProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSMSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSMSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSMSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetSMSProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSMSProvider(ctx, req.(*GetSMSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddSMSProviderTwilio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSMSProviderTwilioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddSMSProviderTwilio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddSMSProviderTwilio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddSMSProviderTwilio(ctx, req.(*AddSMSProviderTwilioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSMSProviderTwilio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSMSProviderTwilioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSMSProviderTwilio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSMSProviderTwilio(ctx, req.(*UpdateSMSProviderTwilioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSMSProviderTwilioToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSMSProviderTwilioTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSMSProviderTwilioToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilioToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSMSProviderTwilioToken(ctx, req.(*UpdateSMSProviderTwilioTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ActivateSMSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateSMSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ActivateSMSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ActivateSMSProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ActivateSMSProvider(ctx, req.(*ActivateSMSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeactivateSMSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateSMSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeactivateSMSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/DeactivateSMSProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeactivateSMSProvider(ctx, req.(*DeactivateSMSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveSMSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSMSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveSMSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveSMSProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveSMSProvider(ctx, req.(*RemoveSMSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOIDCSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOIDCSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOIDCSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetOIDCSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOIDCSettings(ctx, req.(*GetOIDCSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateOIDCSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOIDCSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateOIDCSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateOIDCSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateOIDCSettings(ctx, req.(*UpdateOIDCSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetFileSystemNotificationProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileSystemNotificationProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetFileSystemNotificationProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetFileSystemNotificationProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetFileSystemNotificationProvider(ctx, req.(*GetFileSystemNotificationProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLogNotificationProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogNotificationProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLogNotificationProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetLogNotificationProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLogNotificationProvider(ctx, req.(*GetLogNotificationProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOrgByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOrgByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetOrgByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOrgByID(ctx, req.(*GetOrgByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_IsOrgUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsOrgUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).IsOrgUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/IsOrgUnique",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).IsOrgUnique(ctx, req.(*IsOrgUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetDefaultOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultOrg(ctx, req.(*SetDefaultOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDefaultOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultOrg(ctx, req.(*GetDefaultOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrgs(ctx, req.(*ListOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetUpOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetUpOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetUpOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetUpOrg(ctx, req.(*SetUpOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetIDPByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIDPByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetIDPByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetIDPByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetIDPByID(ctx, req.(*GetIDPByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIDPs(ctx, req.(*ListIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddOIDCIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOIDCIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddOIDCIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddOIDCIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddOIDCIDP(ctx, req.(*AddOIDCIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddJWTIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJWTIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddJWTIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddJWTIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddJWTIDP(ctx, req.(*AddJWTIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIDP(ctx, req.(*UpdateIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeactivateIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeactivateIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/DeactivateIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeactivateIDP(ctx, req.(*DeactivateIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ReactivateIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ReactivateIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ReactivateIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ReactivateIDP(ctx, req.(*ReactivateIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveIDP(ctx, req.(*RemoveIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIDPOIDCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIDPOIDCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIDPOIDCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateIDPOIDCConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIDPOIDCConfig(ctx, req.(*UpdateIDPOIDCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIDPJWTConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIDPJWTConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIDPJWTConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateIDPJWTConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIDPJWTConfig(ctx, req.(*UpdateIDPJWTConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOrgIAMPolicy(ctx, req.(*GetOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateOrgIAMPolicy(ctx, req.(*UpdateOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetCustomOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomOrgIAMPolicy(ctx, req.(*GetCustomOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddCustomOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddCustomOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddCustomOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddCustomOrgIAMPolicy(ctx, req.(*AddCustomOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateCustomOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateCustomOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateCustomOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateCustomOrgIAMPolicy(ctx, req.(*UpdateCustomOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomOrgIAMPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomOrgIAMPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomOrgIAMPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetCustomOrgIAMPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomOrgIAMPolicyToDefault(ctx, req.(*ResetCustomOrgIAMPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDomainPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDomainPolicy(ctx, req.(*GetDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateDomainPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDomainPolicy(ctx, req.(*UpdateDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetCustomDomainPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomDomainPolicy(ctx, req.(*GetCustomDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddCustomDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddCustomDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddCustomDomainPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddCustomDomainPolicy(ctx, req.(*AddCustomDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateCustomDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateCustomDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateCustomDomainPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateCustomDomainPolicy(ctx, req.(*UpdateCustomDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomDomainPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomDomainPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomDomainPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetCustomDomainPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomDomainPolicyToDefault(ctx, req.(*ResetCustomDomainPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLabelPolicy(ctx, req.(*GetLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPreviewLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviewLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPreviewLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetPreviewLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPreviewLabelPolicy(ctx, req.(*GetPreviewLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLabelPolicy(ctx, req.(*UpdateLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ActivateLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ActivateLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ActivateLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ActivateLabelPolicy(ctx, req.(*ActivateLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveLabelPolicyLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelPolicyLogoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveLabelPolicyLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveLabelPolicyLogo(ctx, req.(*RemoveLabelPolicyLogoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveLabelPolicyLogoDark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelPolicyLogoDarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveLabelPolicyLogoDark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogoDark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveLabelPolicyLogoDark(ctx, req.(*RemoveLabelPolicyLogoDarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveLabelPolicyIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelPolicyIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveLabelPolicyIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveLabelPolicyIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveLabelPolicyIcon(ctx, req.(*RemoveLabelPolicyIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveLabelPolicyIconDark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelPolicyIconDarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveLabelPolicyIconDark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveLabelPolicyIconDark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveLabelPolicyIconDark(ctx, req.(*RemoveLabelPolicyIconDarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveLabelPolicyFont_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelPolicyFontRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveLabelPolicyFont(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveLabelPolicyFont",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveLabelPolicyFont(ctx, req.(*RemoveLabelPolicyFontRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLoginPolicy(ctx, req.(*GetLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLoginPolicy(ctx, req.(*UpdateLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLoginPolicyIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicyIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLoginPolicyIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListLoginPolicyIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLoginPolicyIDPs(ctx, req.(*ListLoginPolicyIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddIDPToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIDPToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddIDPToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddIDPToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddIDPToLoginPolicy(ctx, req.(*AddIDPToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveIDPFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIDPFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveIDPFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveIDPFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveIDPFromLoginPolicy(ctx, req.(*RemoveIDPFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLoginPolicySecondFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicySecondFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLoginPolicySecondFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListLoginPolicySecondFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLoginPolicySecondFactors(ctx, req.(*ListLoginPolicySecondFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddSecondFactorToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecondFactorToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddSecondFactorToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddSecondFactorToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddSecondFactorToLoginPolicy(ctx, req.(*AddSecondFactorToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveSecondFactorFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSecondFactorFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveSecondFactorFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveSecondFactorFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveSecondFactorFromLoginPolicy(ctx, req.(*RemoveSecondFactorFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLoginPolicyMultiFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicyMultiFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLoginPolicyMultiFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListLoginPolicyMultiFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLoginPolicyMultiFactors(ctx, req.(*ListLoginPolicyMultiFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddMultiFactorToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMultiFactorToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddMultiFactorToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddMultiFactorToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddMultiFactorToLoginPolicy(ctx, req.(*AddMultiFactorToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveMultiFactorFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMultiFactorFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveMultiFactorFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveMultiFactorFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveMultiFactorFromLoginPolicy(ctx, req.(*RemoveMultiFactorFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPasswordComplexityPolicy(ctx, req.(*GetPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdatePasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePasswordComplexityPolicy(ctx, req.(*UpdatePasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetPasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPasswordAgePolicy(ctx, req.(*GetPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdatePasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePasswordAgePolicy(ctx, req.(*UpdatePasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLockoutPolicy(ctx, req.(*GetLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLockoutPolicy(ctx, req.(*UpdateLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivacyPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetPrivacyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPrivacyPolicy(ctx, req.(*GetPrivacyPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrivacyPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdatePrivacyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePrivacyPolicy(ctx, req.(*UpdatePrivacyPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultInitMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultInitMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultInitMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDefaultInitMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultInitMessageText(ctx, req.(*GetDefaultInitMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomInitMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomInitMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomInitMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetCustomInitMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomInitMessageText(ctx, req.(*GetCustomInitMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultInitMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultInitMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultInitMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetDefaultInitMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultInitMessageText(ctx, req.(*SetDefaultInitMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomInitMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomInitMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomInitMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetCustomInitMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomInitMessageTextToDefault(ctx, req.(*ResetCustomInitMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultPasswordResetMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordResetMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultPasswordResetMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDefaultPasswordResetMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultPasswordResetMessageText(ctx, req.(*GetDefaultPasswordResetMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomPasswordResetMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomPasswordResetMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomPasswordResetMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetCustomPasswordResetMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomPasswordResetMessageText(ctx, req.(*GetCustomPasswordResetMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultPasswordResetMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPasswordResetMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultPasswordResetMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetDefaultPasswordResetMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultPasswordResetMessageText(ctx, req.(*SetDefaultPasswordResetMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomPasswordResetMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomPasswordResetMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomPasswordResetMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetCustomPasswordResetMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomPasswordResetMessageTextToDefault(ctx, req.(*ResetCustomPasswordResetMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultVerifyEmailMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultVerifyEmailMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultVerifyEmailMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDefaultVerifyEmailMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultVerifyEmailMessageText(ctx, req.(*GetDefaultVerifyEmailMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomVerifyEmailMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomVerifyEmailMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomVerifyEmailMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetCustomVerifyEmailMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomVerifyEmailMessageText(ctx, req.(*GetCustomVerifyEmailMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultVerifyEmailMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultVerifyEmailMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultVerifyEmailMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetDefaultVerifyEmailMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultVerifyEmailMessageText(ctx, req.(*SetDefaultVerifyEmailMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomVerifyEmailMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomVerifyEmailMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomVerifyEmailMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetCustomVerifyEmailMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomVerifyEmailMessageTextToDefault(ctx, req.(*ResetCustomVerifyEmailMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultVerifyPhoneMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultVerifyPhoneMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultVerifyPhoneMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDefaultVerifyPhoneMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultVerifyPhoneMessageText(ctx, req.(*GetDefaultVerifyPhoneMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomVerifyPhoneMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomVerifyPhoneMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomVerifyPhoneMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetCustomVerifyPhoneMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomVerifyPhoneMessageText(ctx, req.(*GetCustomVerifyPhoneMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultVerifyPhoneMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultVerifyPhoneMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultVerifyPhoneMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetDefaultVerifyPhoneMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultVerifyPhoneMessageText(ctx, req.(*SetDefaultVerifyPhoneMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomVerifyPhoneMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomVerifyPhoneMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomVerifyPhoneMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetCustomVerifyPhoneMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomVerifyPhoneMessageTextToDefault(ctx, req.(*ResetCustomVerifyPhoneMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultDomainClaimedMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultDomainClaimedMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultDomainClaimedMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDefaultDomainClaimedMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultDomainClaimedMessageText(ctx, req.(*GetDefaultDomainClaimedMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomDomainClaimedMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomDomainClaimedMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomDomainClaimedMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetCustomDomainClaimedMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomDomainClaimedMessageText(ctx, req.(*GetCustomDomainClaimedMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultDomainClaimedMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultDomainClaimedMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultDomainClaimedMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetDefaultDomainClaimedMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultDomainClaimedMessageText(ctx, req.(*SetDefaultDomainClaimedMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomDomainClaimedMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomDomainClaimedMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomDomainClaimedMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetCustomDomainClaimedMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomDomainClaimedMessageTextToDefault(ctx, req.(*ResetCustomDomainClaimedMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultPasswordlessRegistrationMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordlessRegistrationMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultPasswordlessRegistrationMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDefaultPasswordlessRegistrationMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultPasswordlessRegistrationMessageText(ctx, req.(*GetDefaultPasswordlessRegistrationMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomPasswordlessRegistrationMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomPasswordlessRegistrationMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomPasswordlessRegistrationMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetCustomPasswordlessRegistrationMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomPasswordlessRegistrationMessageText(ctx, req.(*GetCustomPasswordlessRegistrationMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultPasswordlessRegistrationMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPasswordlessRegistrationMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultPasswordlessRegistrationMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetDefaultPasswordlessRegistrationMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultPasswordlessRegistrationMessageText(ctx, req.(*SetDefaultPasswordlessRegistrationMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomPasswordlessRegistrationMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetCustomPasswordlessRegistrationMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx, req.(*ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultLoginTexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLoginTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultLoginTexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetDefaultLoginTexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultLoginTexts(ctx, req.(*GetDefaultLoginTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomLoginTexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomLoginTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomLoginTexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/GetCustomLoginTexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomLoginTexts(ctx, req.(*GetCustomLoginTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetCustomLoginText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomLoginTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetCustomLoginText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/SetCustomLoginText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetCustomLoginText(ctx, req.(*SetCustomLoginTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomLoginTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomLoginTextsToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomLoginTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ResetCustomLoginTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomLoginTextToDefault(ctx, req.(*ResetCustomLoginTextsToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIAMMemberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIAMMemberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIAMMemberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListIAMMemberRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIAMMemberRoles(ctx, req.(*ListIAMMemberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIAMMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIAMMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIAMMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListIAMMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIAMMembers(ctx, req.(*ListIAMMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddIAMMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIAMMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddIAMMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/AddIAMMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddIAMMember(ctx, req.(*AddIAMMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIAMMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIAMMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIAMMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/UpdateIAMMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIAMMember(ctx, req.(*UpdateIAMMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveIAMMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIAMMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveIAMMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveIAMMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveIAMMember(ctx, req.(*RemoveIAMMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListViews(ctx, req.(*ListViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListFailedEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFailedEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListFailedEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/ListFailedEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListFailedEvents(ctx, req.(*ListFailedEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveFailedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFailedEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveFailedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.admin.v1.AdminService/RemoveFailedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveFailedEvent(ctx, req.(*RemoveFailedEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.admin.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _AdminService_Healthz_Handler,
		},
		{
			MethodName: "GetSupportedLanguages",
			Handler:    _AdminService_GetSupportedLanguages_Handler,
		},
		{
			MethodName: "SetDefaultLanguage",
			Handler:    _AdminService_SetDefaultLanguage_Handler,
		},
		{
			MethodName: "GetDefaultLanguage",
			Handler:    _AdminService_GetDefaultLanguage_Handler,
		},
		{
			MethodName: "GetMyInstance",
			Handler:    _AdminService_GetMyInstance_Handler,
		},
		{
			MethodName: "ListInstanceDomains",
			Handler:    _AdminService_ListInstanceDomains_Handler,
		},
		{
			MethodName: "ListSecretGenerators",
			Handler:    _AdminService_ListSecretGenerators_Handler,
		},
		{
			MethodName: "GetSecretGenerator",
			Handler:    _AdminService_GetSecretGenerator_Handler,
		},
		{
			MethodName: "UpdateSecretGenerator",
			Handler:    _AdminService_UpdateSecretGenerator_Handler,
		},
		{
			MethodName: "GetSMTPConfig",
			Handler:    _AdminService_GetSMTPConfig_Handler,
		},
		{
			MethodName: "AddSMTPConfig",
			Handler:    _AdminService_AddSMTPConfig_Handler,
		},
		{
			MethodName: "UpdateSMTPConfig",
			Handler:    _AdminService_UpdateSMTPConfig_Handler,
		},
		{
			MethodName: "UpdateSMTPConfigPassword",
			Handler:    _AdminService_UpdateSMTPConfigPassword_Handler,
		},
		{
			MethodName: "RemoveSMTPConfig",
			Handler:    _AdminService_RemoveSMTPConfig_Handler,
		},
		{
			MethodName: "ListSMSProviders",
			Handler:    _AdminService_ListSMSProviders_Handler,
		},
		{
			MethodName: "GetSMSProvider",
			Handler:    _AdminService_GetSMSProvider_Handler,
		},
		{
			MethodName: "AddSMSProviderTwilio",
			Handler:    _AdminService_AddSMSProviderTwilio_Handler,
		},
		{
			MethodName: "UpdateSMSProviderTwilio",
			Handler:    _AdminService_UpdateSMSProviderTwilio_Handler,
		},
		{
			MethodName: "UpdateSMSProviderTwilioToken",
			Handler:    _AdminService_UpdateSMSProviderTwilioToken_Handler,
		},
		{
			MethodName: "ActivateSMSProvider",
			Handler:    _AdminService_ActivateSMSProvider_Handler,
		},
		{
			MethodName: "DeactivateSMSProvider",
			Handler:    _AdminService_DeactivateSMSProvider_Handler,
		},
		{
			MethodName: "RemoveSMSProvider",
			Handler:    _AdminService_RemoveSMSProvider_Handler,
		},
		{
			MethodName: "GetOIDCSettings",
			Handler:    _AdminService_GetOIDCSettings_Handler,
		},
		{
			MethodName: "UpdateOIDCSettings",
			Handler:    _AdminService_UpdateOIDCSettings_Handler,
		},
		{
			MethodName: "GetFileSystemNotificationProvider",
			Handler:    _AdminService_GetFileSystemNotificationProvider_Handler,
		},
		{
			MethodName: "GetLogNotificationProvider",
			Handler:    _AdminService_GetLogNotificationProvider_Handler,
		},
		{
			MethodName: "GetOrgByID",
			Handler:    _AdminService_GetOrgByID_Handler,
		},
		{
			MethodName: "IsOrgUnique",
			Handler:    _AdminService_IsOrgUnique_Handler,
		},
		{
			MethodName: "SetDefaultOrg",
			Handler:    _AdminService_SetDefaultOrg_Handler,
		},
		{
			MethodName: "GetDefaultOrg",
			Handler:    _AdminService_GetDefaultOrg_Handler,
		},
		{
			MethodName: "ListOrgs",
			Handler:    _AdminService_ListOrgs_Handler,
		},
		{
			MethodName: "SetUpOrg",
			Handler:    _AdminService_SetUpOrg_Handler,
		},
		{
			MethodName: "GetIDPByID",
			Handler:    _AdminService_GetIDPByID_Handler,
		},
		{
			MethodName: "ListIDPs",
			Handler:    _AdminService_ListIDPs_Handler,
		},
		{
			MethodName: "AddOIDCIDP",
			Handler:    _AdminService_AddOIDCIDP_Handler,
		},
		{
			MethodName: "AddJWTIDP",
			Handler:    _AdminService_AddJWTIDP_Handler,
		},
		{
			MethodName: "UpdateIDP",
			Handler:    _AdminService_UpdateIDP_Handler,
		},
		{
			MethodName: "DeactivateIDP",
			Handler:    _AdminService_DeactivateIDP_Handler,
		},
		{
			MethodName: "ReactivateIDP",
			Handler:    _AdminService_ReactivateIDP_Handler,
		},
		{
			MethodName: "RemoveIDP",
			Handler:    _AdminService_RemoveIDP_Handler,
		},
		{
			MethodName: "UpdateIDPOIDCConfig",
			Handler:    _AdminService_UpdateIDPOIDCConfig_Handler,
		},
		{
			MethodName: "UpdateIDPJWTConfig",
			Handler:    _AdminService_UpdateIDPJWTConfig_Handler,
		},
		{
			MethodName: "GetOrgIAMPolicy",
			Handler:    _AdminService_GetOrgIAMPolicy_Handler,
		},
		{
			MethodName: "UpdateOrgIAMPolicy",
			Handler:    _AdminService_UpdateOrgIAMPolicy_Handler,
		},
		{
			MethodName: "GetCustomOrgIAMPolicy",
			Handler:    _AdminService_GetCustomOrgIAMPolicy_Handler,
		},
		{
			MethodName: "AddCustomOrgIAMPolicy",
			Handler:    _AdminService_AddCustomOrgIAMPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomOrgIAMPolicy",
			Handler:    _AdminService_UpdateCustomOrgIAMPolicy_Handler,
		},
		{
			MethodName: "ResetCustomOrgIAMPolicyToDefault",
			Handler:    _AdminService_ResetCustomOrgIAMPolicyToDefault_Handler,
		},
		{
			MethodName: "GetDomainPolicy",
			Handler:    _AdminService_GetDomainPolicy_Handler,
		},
		{
			MethodName: "UpdateDomainPolicy",
			Handler:    _AdminService_UpdateDomainPolicy_Handler,
		},
		{
			MethodName: "GetCustomDomainPolicy",
			Handler:    _AdminService_GetCustomDomainPolicy_Handler,
		},
		{
			MethodName: "AddCustomDomainPolicy",
			Handler:    _AdminService_AddCustomDomainPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomDomainPolicy",
			Handler:    _AdminService_UpdateCustomDomainPolicy_Handler,
		},
		{
			MethodName: "ResetCustomDomainPolicyToDefault",
			Handler:    _AdminService_ResetCustomDomainPolicyToDefault_Handler,
		},
		{
			MethodName: "GetLabelPolicy",
			Handler:    _AdminService_GetLabelPolicy_Handler,
		},
		{
			MethodName: "GetPreviewLabelPolicy",
			Handler:    _AdminService_GetPreviewLabelPolicy_Handler,
		},
		{
			MethodName: "UpdateLabelPolicy",
			Handler:    _AdminService_UpdateLabelPolicy_Handler,
		},
		{
			MethodName: "ActivateLabelPolicy",
			Handler:    _AdminService_ActivateLabelPolicy_Handler,
		},
		{
			MethodName: "RemoveLabelPolicyLogo",
			Handler:    _AdminService_RemoveLabelPolicyLogo_Handler,
		},
		{
			MethodName: "RemoveLabelPolicyLogoDark",
			Handler:    _AdminService_RemoveLabelPolicyLogoDark_Handler,
		},
		{
			MethodName: "RemoveLabelPolicyIcon",
			Handler:    _AdminService_RemoveLabelPolicyIcon_Handler,
		},
		{
			MethodName: "RemoveLabelPolicyIconDark",
			Handler:    _AdminService_RemoveLabelPolicyIconDark_Handler,
		},
		{
			MethodName: "RemoveLabelPolicyFont",
			Handler:    _AdminService_RemoveLabelPolicyFont_Handler,
		},
		{
			MethodName: "GetLoginPolicy",
			Handler:    _AdminService_GetLoginPolicy_Handler,
		},
		{
			MethodName: "UpdateLoginPolicy",
			Handler:    _AdminService_UpdateLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicyIDPs",
			Handler:    _AdminService_ListLoginPolicyIDPs_Handler,
		},
		{
			MethodName: "AddIDPToLoginPolicy",
			Handler:    _AdminService_AddIDPToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveIDPFromLoginPolicy",
			Handler:    _AdminService_RemoveIDPFromLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicySecondFactors",
			Handler:    _AdminService_ListLoginPolicySecondFactors_Handler,
		},
		{
			MethodName: "AddSecondFactorToLoginPolicy",
			Handler:    _AdminService_AddSecondFactorToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveSecondFactorFromLoginPolicy",
			Handler:    _AdminService_RemoveSecondFactorFromLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicyMultiFactors",
			Handler:    _AdminService_ListLoginPolicyMultiFactors_Handler,
		},
		{
			MethodName: "AddMultiFactorToLoginPolicy",
			Handler:    _AdminService_AddMultiFactorToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveMultiFactorFromLoginPolicy",
			Handler:    _AdminService_RemoveMultiFactorFromLoginPolicy_Handler,
		},
		{
			MethodName: "GetPasswordComplexityPolicy",
			Handler:    _AdminService_GetPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "UpdatePasswordComplexityPolicy",
			Handler:    _AdminService_UpdatePasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "GetPasswordAgePolicy",
			Handler:    _AdminService_GetPasswordAgePolicy_Handler,
		},
		{
			MethodName: "UpdatePasswordAgePolicy",
			Handler:    _AdminService_UpdatePasswordAgePolicy_Handler,
		},
		{
			MethodName: "GetLockoutPolicy",
			Handler:    _AdminService_GetLockoutPolicy_Handler,
		},
		{
			MethodName: "UpdateLockoutPolicy",
			Handler:    _AdminService_UpdateLockoutPolicy_Handler,
		},
		{
			MethodName: "GetPrivacyPolicy",
			Handler:    _AdminService_GetPrivacyPolicy_Handler,
		},
		{
			MethodName: "UpdatePrivacyPolicy",
			Handler:    _AdminService_UpdatePrivacyPolicy_Handler,
		},
		{
			MethodName: "GetDefaultInitMessageText",
			Handler:    _AdminService_GetDefaultInitMessageText_Handler,
		},
		{
			MethodName: "GetCustomInitMessageText",
			Handler:    _AdminService_GetCustomInitMessageText_Handler,
		},
		{
			MethodName: "SetDefaultInitMessageText",
			Handler:    _AdminService_SetDefaultInitMessageText_Handler,
		},
		{
			MethodName: "ResetCustomInitMessageTextToDefault",
			Handler:    _AdminService_ResetCustomInitMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultPasswordResetMessageText",
			Handler:    _AdminService_GetDefaultPasswordResetMessageText_Handler,
		},
		{
			MethodName: "GetCustomPasswordResetMessageText",
			Handler:    _AdminService_GetCustomPasswordResetMessageText_Handler,
		},
		{
			MethodName: "SetDefaultPasswordResetMessageText",
			Handler:    _AdminService_SetDefaultPasswordResetMessageText_Handler,
		},
		{
			MethodName: "ResetCustomPasswordResetMessageTextToDefault",
			Handler:    _AdminService_ResetCustomPasswordResetMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultVerifyEmailMessageText",
			Handler:    _AdminService_GetDefaultVerifyEmailMessageText_Handler,
		},
		{
			MethodName: "GetCustomVerifyEmailMessageText",
			Handler:    _AdminService_GetCustomVerifyEmailMessageText_Handler,
		},
		{
			MethodName: "SetDefaultVerifyEmailMessageText",
			Handler:    _AdminService_SetDefaultVerifyEmailMessageText_Handler,
		},
		{
			MethodName: "ResetCustomVerifyEmailMessageTextToDefault",
			Handler:    _AdminService_ResetCustomVerifyEmailMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultVerifyPhoneMessageText",
			Handler:    _AdminService_GetDefaultVerifyPhoneMessageText_Handler,
		},
		{
			MethodName: "GetCustomVerifyPhoneMessageText",
			Handler:    _AdminService_GetCustomVerifyPhoneMessageText_Handler,
		},
		{
			MethodName: "SetDefaultVerifyPhoneMessageText",
			Handler:    _AdminService_SetDefaultVerifyPhoneMessageText_Handler,
		},
		{
			MethodName: "ResetCustomVerifyPhoneMessageTextToDefault",
			Handler:    _AdminService_ResetCustomVerifyPhoneMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultDomainClaimedMessageText",
			Handler:    _AdminService_GetDefaultDomainClaimedMessageText_Handler,
		},
		{
			MethodName: "GetCustomDomainClaimedMessageText",
			Handler:    _AdminService_GetCustomDomainClaimedMessageText_Handler,
		},
		{
			MethodName: "SetDefaultDomainClaimedMessageText",
			Handler:    _AdminService_SetDefaultDomainClaimedMessageText_Handler,
		},
		{
			MethodName: "ResetCustomDomainClaimedMessageTextToDefault",
			Handler:    _AdminService_ResetCustomDomainClaimedMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultPasswordlessRegistrationMessageText",
			Handler:    _AdminService_GetDefaultPasswordlessRegistrationMessageText_Handler,
		},
		{
			MethodName: "GetCustomPasswordlessRegistrationMessageText",
			Handler:    _AdminService_GetCustomPasswordlessRegistrationMessageText_Handler,
		},
		{
			MethodName: "SetDefaultPasswordlessRegistrationMessageText",
			Handler:    _AdminService_SetDefaultPasswordlessRegistrationMessageText_Handler,
		},
		{
			MethodName: "ResetCustomPasswordlessRegistrationMessageTextToDefault",
			Handler:    _AdminService_ResetCustomPasswordlessRegistrationMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultLoginTexts",
			Handler:    _AdminService_GetDefaultLoginTexts_Handler,
		},
		{
			MethodName: "GetCustomLoginTexts",
			Handler:    _AdminService_GetCustomLoginTexts_Handler,
		},
		{
			MethodName: "SetCustomLoginText",
			Handler:    _AdminService_SetCustomLoginText_Handler,
		},
		{
			MethodName: "ResetCustomLoginTextToDefault",
			Handler:    _AdminService_ResetCustomLoginTextToDefault_Handler,
		},
		{
			MethodName: "ListIAMMemberRoles",
			Handler:    _AdminService_ListIAMMemberRoles_Handler,
		},
		{
			MethodName: "ListIAMMembers",
			Handler:    _AdminService_ListIAMMembers_Handler,
		},
		{
			MethodName: "AddIAMMember",
			Handler:    _AdminService_AddIAMMember_Handler,
		},
		{
			MethodName: "UpdateIAMMember",
			Handler:    _AdminService_UpdateIAMMember_Handler,
		},
		{
			MethodName: "RemoveIAMMember",
			Handler:    _AdminService_RemoveIAMMember_Handler,
		},
		{
			MethodName: "ListViews",
			Handler:    _AdminService_ListViews_Handler,
		},
		{
			MethodName: "ListFailedEvents",
			Handler:    _AdminService_ListFailedEvents_Handler,
		},
		{
			MethodName: "RemoveFailedEvent",
			Handler:    _AdminService_RemoveFailedEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/admin.proto",
}
