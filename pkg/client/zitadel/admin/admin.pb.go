// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: zitadel/admin.proto

package admin

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/zitadel/zitadel-go/pkg/client/zitadel/authoption"
	features "github.com/zitadel/zitadel-go/pkg/client/zitadel/features"
	idp "github.com/zitadel/zitadel-go/pkg/client/zitadel/idp"
	member "github.com/zitadel/zitadel-go/pkg/client/zitadel/member"
	object "github.com/zitadel/zitadel-go/pkg/client/zitadel/object"
	org "github.com/zitadel/zitadel-go/pkg/client/zitadel/org"
	policy "github.com/zitadel/zitadel-go/pkg/client/zitadel/policy"
	text "github.com/zitadel/zitadel-go/pkg/client/zitadel/text"
	user "github.com/zitadel/zitadel-go/pkg/client/zitadel/user"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//This is an empty request
type HealthzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthzRequest) Reset() {
	*x = HealthzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzRequest) ProtoMessage() {}

func (x *HealthzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzRequest.ProtoReflect.Descriptor instead.
func (*HealthzRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{0}
}

//This is an empty response
type HealthzResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthzResponse) Reset() {
	*x = HealthzResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzResponse) ProtoMessage() {}

func (x *HealthzResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzResponse.ProtoReflect.Descriptor instead.
func (*HealthzResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{1}
}

//This is an empty request
type GetSupportedLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSupportedLanguagesRequest) Reset() {
	*x = GetSupportedLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportedLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedLanguagesRequest) ProtoMessage() {}

func (x *GetSupportedLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedLanguagesRequest.ProtoReflect.Descriptor instead.
func (*GetSupportedLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{2}
}

type GetSupportedLanguagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Languages []string `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
}

func (x *GetSupportedLanguagesResponse) Reset() {
	*x = GetSupportedLanguagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportedLanguagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedLanguagesResponse) ProtoMessage() {}

func (x *GetSupportedLanguagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedLanguagesResponse.ProtoReflect.Descriptor instead.
func (*GetSupportedLanguagesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{3}
}

func (x *GetSupportedLanguagesResponse) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

// if name or domain is already in use, org is not unique
type IsOrgUniqueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *IsOrgUniqueRequest) Reset() {
	*x = IsOrgUniqueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOrgUniqueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOrgUniqueRequest) ProtoMessage() {}

func (x *IsOrgUniqueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOrgUniqueRequest.ProtoReflect.Descriptor instead.
func (*IsOrgUniqueRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{4}
}

func (x *IsOrgUniqueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IsOrgUniqueRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type IsOrgUniqueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUnique bool `protobuf:"varint,1,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
}

func (x *IsOrgUniqueResponse) Reset() {
	*x = IsOrgUniqueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOrgUniqueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOrgUniqueResponse) ProtoMessage() {}

func (x *IsOrgUniqueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOrgUniqueResponse.ProtoReflect.Descriptor instead.
func (*IsOrgUniqueResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{5}
}

func (x *IsOrgUniqueResponse) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

type GetOrgByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrgByIDRequest) Reset() {
	*x = GetOrgByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgByIDRequest) ProtoMessage() {}

func (x *GetOrgByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgByIDRequest.ProtoReflect.Descriptor instead.
func (*GetOrgByIDRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{6}
}

func (x *GetOrgByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOrgByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org *org.Org `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
}

func (x *GetOrgByIDResponse) Reset() {
	*x = GetOrgByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgByIDResponse) ProtoMessage() {}

func (x *GetOrgByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgByIDResponse.ProtoReflect.Descriptor instead.
func (*GetOrgByIDResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{7}
}

func (x *GetOrgByIDResponse) GetOrg() *org.Org {
	if x != nil {
		return x.Org
	}
	return nil
}

type ListOrgsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//list limitations and ordering
	Query *object.ListQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// the field the result is sorted
	SortingColumn org.OrgFieldName `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.org.v1.OrgFieldName" json:"sorting_column,omitempty"`
	//criterias the client is looking for
	Queries []*org.OrgQuery `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ListOrgsRequest) Reset() {
	*x = ListOrgsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgsRequest) ProtoMessage() {}

func (x *ListOrgsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgsRequest.ProtoReflect.Descriptor instead.
func (*ListOrgsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{8}
}

func (x *ListOrgsRequest) GetQuery() *object.ListQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListOrgsRequest) GetSortingColumn() org.OrgFieldName {
	if x != nil {
		return x.SortingColumn
	}
	return org.OrgFieldName(0)
}

func (x *ListOrgsRequest) GetQueries() []*org.OrgQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type ListOrgsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details       *object.ListDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	SortingColumn org.OrgFieldName    `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.org.v1.OrgFieldName" json:"sorting_column,omitempty"`
	Result        []*org.Org          `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListOrgsResponse) Reset() {
	*x = ListOrgsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgsResponse) ProtoMessage() {}

func (x *ListOrgsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgsResponse.ProtoReflect.Descriptor instead.
func (*ListOrgsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{9}
}

func (x *ListOrgsResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListOrgsResponse) GetSortingColumn() org.OrgFieldName {
	if x != nil {
		return x.SortingColumn
	}
	return org.OrgFieldName(0)
}

func (x *ListOrgsResponse) GetResult() []*org.Org {
	if x != nil {
		return x.Result
	}
	return nil
}

type SetUpOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org *SetUpOrgRequest_Org `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	// Types that are assignable to User:
	//	*SetUpOrgRequest_Human_
	User isSetUpOrgRequest_User `protobuf_oneof:"user"`
}

func (x *SetUpOrgRequest) Reset() {
	*x = SetUpOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest) ProtoMessage() {}

func (x *SetUpOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{10}
}

func (x *SetUpOrgRequest) GetOrg() *SetUpOrgRequest_Org {
	if x != nil {
		return x.Org
	}
	return nil
}

func (m *SetUpOrgRequest) GetUser() isSetUpOrgRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (x *SetUpOrgRequest) GetHuman() *SetUpOrgRequest_Human {
	if x, ok := x.GetUser().(*SetUpOrgRequest_Human_); ok {
		return x.Human
	}
	return nil
}

type isSetUpOrgRequest_User interface {
	isSetUpOrgRequest_User()
}

type SetUpOrgRequest_Human_ struct {
	// oneof field for the user managing the organisation
	Human *SetUpOrgRequest_Human `protobuf:"bytes,2,opt,name=human,proto3,oneof"`
}

func (*SetUpOrgRequest_Human_) isSetUpOrgRequest_User() {}

type SetUpOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	OrgId   string                `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserId  string                `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SetUpOrgResponse) Reset() {
	*x = SetUpOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgResponse) ProtoMessage() {}

func (x *SetUpOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgResponse.ProtoReflect.Descriptor instead.
func (*SetUpOrgResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{11}
}

func (x *SetUpOrgResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SetUpOrgResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SetUpOrgResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetIDPByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIDPByIDRequest) Reset() {
	*x = GetIDPByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIDPByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIDPByIDRequest) ProtoMessage() {}

func (x *GetIDPByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIDPByIDRequest.ProtoReflect.Descriptor instead.
func (*GetIDPByIDRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{12}
}

func (x *GetIDPByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetIDPByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idp *idp.IDP `protobuf:"bytes,1,opt,name=idp,proto3" json:"idp,omitempty"`
}

func (x *GetIDPByIDResponse) Reset() {
	*x = GetIDPByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIDPByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIDPByIDResponse) ProtoMessage() {}

func (x *GetIDPByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIDPByIDResponse.ProtoReflect.Descriptor instead.
func (*GetIDPByIDResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{13}
}

func (x *GetIDPByIDResponse) GetIdp() *idp.IDP {
	if x != nil {
		return x.Idp
	}
	return nil
}

type ListIDPsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//list limitations and ordering
	Query *object.ListQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// the field the result is sorted
	SortingColumn idp.IDPFieldName `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.idp.v1.IDPFieldName" json:"sorting_column,omitempty"`
	//criterias the client is looking for
	Queries []*IDPQuery `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ListIDPsRequest) Reset() {
	*x = ListIDPsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIDPsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIDPsRequest) ProtoMessage() {}

func (x *ListIDPsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIDPsRequest.ProtoReflect.Descriptor instead.
func (*ListIDPsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{14}
}

func (x *ListIDPsRequest) GetQuery() *object.ListQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListIDPsRequest) GetSortingColumn() idp.IDPFieldName {
	if x != nil {
		return x.SortingColumn
	}
	return idp.IDPFieldName(0)
}

func (x *ListIDPsRequest) GetQueries() []*IDPQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type IDPQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*IDPQuery_IdpIdQuery
	//	*IDPQuery_IdpNameQuery
	Query isIDPQuery_Query `protobuf_oneof:"query"`
}

func (x *IDPQuery) Reset() {
	*x = IDPQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPQuery) ProtoMessage() {}

func (x *IDPQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPQuery.ProtoReflect.Descriptor instead.
func (*IDPQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{15}
}

func (m *IDPQuery) GetQuery() isIDPQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *IDPQuery) GetIdpIdQuery() *idp.IDPIDQuery {
	if x, ok := x.GetQuery().(*IDPQuery_IdpIdQuery); ok {
		return x.IdpIdQuery
	}
	return nil
}

func (x *IDPQuery) GetIdpNameQuery() *idp.IDPNameQuery {
	if x, ok := x.GetQuery().(*IDPQuery_IdpNameQuery); ok {
		return x.IdpNameQuery
	}
	return nil
}

type isIDPQuery_Query interface {
	isIDPQuery_Query()
}

type IDPQuery_IdpIdQuery struct {
	IdpIdQuery *idp.IDPIDQuery `protobuf:"bytes,1,opt,name=idp_id_query,json=idpIdQuery,proto3,oneof"`
}

type IDPQuery_IdpNameQuery struct {
	IdpNameQuery *idp.IDPNameQuery `protobuf:"bytes,2,opt,name=idp_name_query,json=idpNameQuery,proto3,oneof"`
}

func (*IDPQuery_IdpIdQuery) isIDPQuery_Query() {}

func (*IDPQuery_IdpNameQuery) isIDPQuery_Query() {}

type ListIDPsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details       *object.ListDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	SortingColumn idp.IDPFieldName    `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.idp.v1.IDPFieldName" json:"sorting_column,omitempty"`
	Result        []*idp.IDP          `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListIDPsResponse) Reset() {
	*x = ListIDPsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIDPsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIDPsResponse) ProtoMessage() {}

func (x *ListIDPsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIDPsResponse.ProtoReflect.Descriptor instead.
func (*ListIDPsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{16}
}

func (x *ListIDPsResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListIDPsResponse) GetSortingColumn() idp.IDPFieldName {
	if x != nil {
		return x.SortingColumn
	}
	return idp.IDPFieldName(0)
}

func (x *ListIDPsResponse) GetResult() []*idp.IDP {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddOIDCIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StylingType        idp.IDPStylingType   `protobuf:"varint,2,opt,name=styling_type,json=stylingType,proto3,enum=zitadel.idp.v1.IDPStylingType" json:"styling_type,omitempty"`
	ClientId           string               `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret       string               `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Issuer             string               `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Scopes             []string             `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
	DisplayNameMapping idp.OIDCMappingField `protobuf:"varint,7,opt,name=display_name_mapping,json=displayNameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"display_name_mapping,omitempty"`
	UsernameMapping    idp.OIDCMappingField `protobuf:"varint,8,opt,name=username_mapping,json=usernameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"username_mapping,omitempty"`
	AutoRegister       bool                 `protobuf:"varint,9,opt,name=auto_register,json=autoRegister,proto3" json:"auto_register,omitempty"`
}

func (x *AddOIDCIDPRequest) Reset() {
	*x = AddOIDCIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOIDCIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOIDCIDPRequest) ProtoMessage() {}

func (x *AddOIDCIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOIDCIDPRequest.ProtoReflect.Descriptor instead.
func (*AddOIDCIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{17}
}

func (x *AddOIDCIDPRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOIDCIDPRequest) GetStylingType() idp.IDPStylingType {
	if x != nil {
		return x.StylingType
	}
	return idp.IDPStylingType(0)
}

func (x *AddOIDCIDPRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AddOIDCIDPRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *AddOIDCIDPRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *AddOIDCIDPRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *AddOIDCIDPRequest) GetDisplayNameMapping() idp.OIDCMappingField {
	if x != nil {
		return x.DisplayNameMapping
	}
	return idp.OIDCMappingField(0)
}

func (x *AddOIDCIDPRequest) GetUsernameMapping() idp.OIDCMappingField {
	if x != nil {
		return x.UsernameMapping
	}
	return idp.OIDCMappingField(0)
}

func (x *AddOIDCIDPRequest) GetAutoRegister() bool {
	if x != nil {
		return x.AutoRegister
	}
	return false
}

type AddOIDCIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	IdpId   string                `protobuf:"bytes,2,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *AddOIDCIDPResponse) Reset() {
	*x = AddOIDCIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOIDCIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOIDCIDPResponse) ProtoMessage() {}

func (x *AddOIDCIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOIDCIDPResponse.ProtoReflect.Descriptor instead.
func (*AddOIDCIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{18}
}

func (x *AddOIDCIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *AddOIDCIDPResponse) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type AddJWTIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StylingType  idp.IDPStylingType `protobuf:"varint,2,opt,name=styling_type,json=stylingType,proto3,enum=zitadel.idp.v1.IDPStylingType" json:"styling_type,omitempty"`
	JwtEndpoint  string             `protobuf:"bytes,3,opt,name=jwt_endpoint,json=jwtEndpoint,proto3" json:"jwt_endpoint,omitempty"`
	Issuer       string             `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	KeysEndpoint string             `protobuf:"bytes,5,opt,name=keys_endpoint,json=keysEndpoint,proto3" json:"keys_endpoint,omitempty"`
	HeaderName   string             `protobuf:"bytes,6,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	AutoRegister bool               `protobuf:"varint,7,opt,name=auto_register,json=autoRegister,proto3" json:"auto_register,omitempty"`
}

func (x *AddJWTIDPRequest) Reset() {
	*x = AddJWTIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddJWTIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddJWTIDPRequest) ProtoMessage() {}

func (x *AddJWTIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddJWTIDPRequest.ProtoReflect.Descriptor instead.
func (*AddJWTIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{19}
}

func (x *AddJWTIDPRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddJWTIDPRequest) GetStylingType() idp.IDPStylingType {
	if x != nil {
		return x.StylingType
	}
	return idp.IDPStylingType(0)
}

func (x *AddJWTIDPRequest) GetJwtEndpoint() string {
	if x != nil {
		return x.JwtEndpoint
	}
	return ""
}

func (x *AddJWTIDPRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *AddJWTIDPRequest) GetKeysEndpoint() string {
	if x != nil {
		return x.KeysEndpoint
	}
	return ""
}

func (x *AddJWTIDPRequest) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *AddJWTIDPRequest) GetAutoRegister() bool {
	if x != nil {
		return x.AutoRegister
	}
	return false
}

type AddJWTIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	IdpId   string                `protobuf:"bytes,2,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *AddJWTIDPResponse) Reset() {
	*x = AddJWTIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddJWTIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddJWTIDPResponse) ProtoMessage() {}

func (x *AddJWTIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddJWTIDPResponse.ProtoReflect.Descriptor instead.
func (*AddJWTIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{20}
}

func (x *AddJWTIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *AddJWTIDPResponse) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type UpdateIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId        string             `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	Name         string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StylingType  idp.IDPStylingType `protobuf:"varint,3,opt,name=styling_type,json=stylingType,proto3,enum=zitadel.idp.v1.IDPStylingType" json:"styling_type,omitempty"`
	AutoRegister bool               `protobuf:"varint,4,opt,name=auto_register,json=autoRegister,proto3" json:"auto_register,omitempty"`
}

func (x *UpdateIDPRequest) Reset() {
	*x = UpdateIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIDPRequest) ProtoMessage() {}

func (x *UpdateIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIDPRequest.ProtoReflect.Descriptor instead.
func (*UpdateIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateIDPRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *UpdateIDPRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateIDPRequest) GetStylingType() idp.IDPStylingType {
	if x != nil {
		return x.StylingType
	}
	return idp.IDPStylingType(0)
}

func (x *UpdateIDPRequest) GetAutoRegister() bool {
	if x != nil {
		return x.AutoRegister
	}
	return false
}

type UpdateIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateIDPResponse) Reset() {
	*x = UpdateIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIDPResponse) ProtoMessage() {}

func (x *UpdateIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIDPResponse.ProtoReflect.Descriptor instead.
func (*UpdateIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type DeactivateIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *DeactivateIDPRequest) Reset() {
	*x = DeactivateIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateIDPRequest) ProtoMessage() {}

func (x *DeactivateIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateIDPRequest.ProtoReflect.Descriptor instead.
func (*DeactivateIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{23}
}

func (x *DeactivateIDPRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type DeactivateIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *DeactivateIDPResponse) Reset() {
	*x = DeactivateIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateIDPResponse) ProtoMessage() {}

func (x *DeactivateIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateIDPResponse.ProtoReflect.Descriptor instead.
func (*DeactivateIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{24}
}

func (x *DeactivateIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ReactivateIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *ReactivateIDPRequest) Reset() {
	*x = ReactivateIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactivateIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactivateIDPRequest) ProtoMessage() {}

func (x *ReactivateIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactivateIDPRequest.ProtoReflect.Descriptor instead.
func (*ReactivateIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{25}
}

func (x *ReactivateIDPRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type ReactivateIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ReactivateIDPResponse) Reset() {
	*x = ReactivateIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactivateIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactivateIDPResponse) ProtoMessage() {}

func (x *ReactivateIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactivateIDPResponse.ProtoReflect.Descriptor instead.
func (*ReactivateIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{26}
}

func (x *ReactivateIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *RemoveIDPRequest) Reset() {
	*x = RemoveIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIDPRequest) ProtoMessage() {}

func (x *RemoveIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIDPRequest.ProtoReflect.Descriptor instead.
func (*RemoveIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{27}
}

func (x *RemoveIDPRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type RemoveIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveIDPResponse) Reset() {
	*x = RemoveIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIDPResponse) ProtoMessage() {}

func (x *RemoveIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIDPResponse.ProtoReflect.Descriptor instead.
func (*RemoveIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{28}
}

func (x *RemoveIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type UpdateIDPOIDCConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId              string               `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	Issuer             string               `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ClientId           string               `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret       string               `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scopes             []string             `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`
	DisplayNameMapping idp.OIDCMappingField `protobuf:"varint,6,opt,name=display_name_mapping,json=displayNameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"display_name_mapping,omitempty"`
	UsernameMapping    idp.OIDCMappingField `protobuf:"varint,7,opt,name=username_mapping,json=usernameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"username_mapping,omitempty"`
}

func (x *UpdateIDPOIDCConfigRequest) Reset() {
	*x = UpdateIDPOIDCConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIDPOIDCConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIDPOIDCConfigRequest) ProtoMessage() {}

func (x *UpdateIDPOIDCConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIDPOIDCConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateIDPOIDCConfigRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateIDPOIDCConfigRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *UpdateIDPOIDCConfigRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *UpdateIDPOIDCConfigRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UpdateIDPOIDCConfigRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *UpdateIDPOIDCConfigRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *UpdateIDPOIDCConfigRequest) GetDisplayNameMapping() idp.OIDCMappingField {
	if x != nil {
		return x.DisplayNameMapping
	}
	return idp.OIDCMappingField(0)
}

func (x *UpdateIDPOIDCConfigRequest) GetUsernameMapping() idp.OIDCMappingField {
	if x != nil {
		return x.UsernameMapping
	}
	return idp.OIDCMappingField(0)
}

type UpdateIDPOIDCConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateIDPOIDCConfigResponse) Reset() {
	*x = UpdateIDPOIDCConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIDPOIDCConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIDPOIDCConfigResponse) ProtoMessage() {}

func (x *UpdateIDPOIDCConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIDPOIDCConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateIDPOIDCConfigResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateIDPOIDCConfigResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type UpdateIDPJWTConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId        string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	JwtEndpoint  string `protobuf:"bytes,2,opt,name=jwt_endpoint,json=jwtEndpoint,proto3" json:"jwt_endpoint,omitempty"`
	Issuer       string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	KeysEndpoint string `protobuf:"bytes,4,opt,name=keys_endpoint,json=keysEndpoint,proto3" json:"keys_endpoint,omitempty"`
	HeaderName   string `protobuf:"bytes,5,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
}

func (x *UpdateIDPJWTConfigRequest) Reset() {
	*x = UpdateIDPJWTConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIDPJWTConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIDPJWTConfigRequest) ProtoMessage() {}

func (x *UpdateIDPJWTConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIDPJWTConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateIDPJWTConfigRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateIDPJWTConfigRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *UpdateIDPJWTConfigRequest) GetJwtEndpoint() string {
	if x != nil {
		return x.JwtEndpoint
	}
	return ""
}

func (x *UpdateIDPJWTConfigRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *UpdateIDPJWTConfigRequest) GetKeysEndpoint() string {
	if x != nil {
		return x.KeysEndpoint
	}
	return ""
}

func (x *UpdateIDPJWTConfigRequest) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

type UpdateIDPJWTConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateIDPJWTConfigResponse) Reset() {
	*x = UpdateIDPJWTConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIDPJWTConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIDPJWTConfigResponse) ProtoMessage() {}

func (x *UpdateIDPJWTConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIDPJWTConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateIDPJWTConfigResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateIDPJWTConfigResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetDefaultFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDefaultFeaturesRequest) Reset() {
	*x = GetDefaultFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultFeaturesRequest) ProtoMessage() {}

func (x *GetDefaultFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultFeaturesRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{33}
}

type GetDefaultFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features *features.Features `protobuf:"bytes,1,opt,name=features,proto3" json:"features,omitempty"`
}

func (x *GetDefaultFeaturesResponse) Reset() {
	*x = GetDefaultFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultFeaturesResponse) ProtoMessage() {}

func (x *GetDefaultFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{34}
}

func (x *GetDefaultFeaturesResponse) GetFeatures() *features.Features {
	if x != nil {
		return x.Features
	}
	return nil
}

type SetDefaultFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TierName                 string                  `protobuf:"bytes,1,opt,name=tier_name,json=tierName,proto3" json:"tier_name,omitempty"`
	Description              string                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AuditLogRetention        *durationpb.Duration    `protobuf:"bytes,5,opt,name=audit_log_retention,json=auditLogRetention,proto3" json:"audit_log_retention,omitempty"`
	LoginPolicyUsernameLogin bool                    `protobuf:"varint,6,opt,name=login_policy_username_login,json=loginPolicyUsernameLogin,proto3" json:"login_policy_username_login,omitempty"`
	LoginPolicyRegistration  bool                    `protobuf:"varint,7,opt,name=login_policy_registration,json=loginPolicyRegistration,proto3" json:"login_policy_registration,omitempty"`
	LoginPolicyIdp           bool                    `protobuf:"varint,8,opt,name=login_policy_idp,json=loginPolicyIdp,proto3" json:"login_policy_idp,omitempty"`
	LoginPolicyFactors       bool                    `protobuf:"varint,9,opt,name=login_policy_factors,json=loginPolicyFactors,proto3" json:"login_policy_factors,omitempty"`
	LoginPolicyPasswordless  bool                    `protobuf:"varint,10,opt,name=login_policy_passwordless,json=loginPolicyPasswordless,proto3" json:"login_policy_passwordless,omitempty"`
	PasswordComplexityPolicy bool                    `protobuf:"varint,11,opt,name=password_complexity_policy,json=passwordComplexityPolicy,proto3" json:"password_complexity_policy,omitempty"`
	LabelPolicy              bool                    `protobuf:"varint,12,opt,name=label_policy,json=labelPolicy,proto3" json:"label_policy,omitempty"`
	CustomDomain             bool                    `protobuf:"varint,13,opt,name=custom_domain,json=customDomain,proto3" json:"custom_domain,omitempty"`
	LoginPolicyPasswordReset bool                    `protobuf:"varint,14,opt,name=login_policy_password_reset,json=loginPolicyPasswordReset,proto3" json:"login_policy_password_reset,omitempty"`
	LabelPolicyPrivateLabel  bool                    `protobuf:"varint,15,opt,name=label_policy_private_label,json=labelPolicyPrivateLabel,proto3" json:"label_policy_private_label,omitempty"`
	LabelPolicyWatermark     bool                    `protobuf:"varint,16,opt,name=label_policy_watermark,json=labelPolicyWatermark,proto3" json:"label_policy_watermark,omitempty"`
	CustomText               bool                    `protobuf:"varint,17,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
	PrivacyPolicy            bool                    `protobuf:"varint,18,opt,name=privacy_policy,json=privacyPolicy,proto3" json:"privacy_policy,omitempty"`
	MetadataUser             bool                    `protobuf:"varint,19,opt,name=metadata_user,json=metadataUser,proto3" json:"metadata_user,omitempty"`
	CustomTextMessage        bool                    `protobuf:"varint,20,opt,name=custom_text_message,json=customTextMessage,proto3" json:"custom_text_message,omitempty"`
	CustomTextLogin          bool                    `protobuf:"varint,21,opt,name=custom_text_login,json=customTextLogin,proto3" json:"custom_text_login,omitempty"`
	LockoutPolicy            bool                    `protobuf:"varint,22,opt,name=lockout_policy,json=lockoutPolicy,proto3" json:"lockout_policy,omitempty"`
	Actions                  bool                    `protobuf:"varint,23,opt,name=actions,proto3" json:"actions,omitempty"`
	ActionsAllowed           features.ActionsAllowed `protobuf:"varint,24,opt,name=actions_allowed,json=actionsAllowed,proto3,enum=zitadel.features.v1.ActionsAllowed" json:"actions_allowed,omitempty"`
	MaxActions               int32                   `protobuf:"varint,25,opt,name=max_actions,json=maxActions,proto3" json:"max_actions,omitempty"`
}

func (x *SetDefaultFeaturesRequest) Reset() {
	*x = SetDefaultFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultFeaturesRequest) ProtoMessage() {}

func (x *SetDefaultFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultFeaturesRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{35}
}

func (x *SetDefaultFeaturesRequest) GetTierName() string {
	if x != nil {
		return x.TierName
	}
	return ""
}

func (x *SetDefaultFeaturesRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetDefaultFeaturesRequest) GetAuditLogRetention() *durationpb.Duration {
	if x != nil {
		return x.AuditLogRetention
	}
	return nil
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyUsernameLogin() bool {
	if x != nil {
		return x.LoginPolicyUsernameLogin
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyRegistration() bool {
	if x != nil {
		return x.LoginPolicyRegistration
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyIdp() bool {
	if x != nil {
		return x.LoginPolicyIdp
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyFactors() bool {
	if x != nil {
		return x.LoginPolicyFactors
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyPasswordless() bool {
	if x != nil {
		return x.LoginPolicyPasswordless
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetPasswordComplexityPolicy() bool {
	if x != nil {
		return x.PasswordComplexityPolicy
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLabelPolicy() bool {
	if x != nil {
		return x.LabelPolicy
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetCustomDomain() bool {
	if x != nil {
		return x.CustomDomain
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyPasswordReset() bool {
	if x != nil {
		return x.LoginPolicyPasswordReset
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLabelPolicyPrivateLabel() bool {
	if x != nil {
		return x.LabelPolicyPrivateLabel
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLabelPolicyWatermark() bool {
	if x != nil {
		return x.LabelPolicyWatermark
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetCustomText() bool {
	if x != nil {
		return x.CustomText
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetPrivacyPolicy() bool {
	if x != nil {
		return x.PrivacyPolicy
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetMetadataUser() bool {
	if x != nil {
		return x.MetadataUser
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetCustomTextMessage() bool {
	if x != nil {
		return x.CustomTextMessage
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetCustomTextLogin() bool {
	if x != nil {
		return x.CustomTextLogin
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLockoutPolicy() bool {
	if x != nil {
		return x.LockoutPolicy
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetActions() bool {
	if x != nil {
		return x.Actions
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetActionsAllowed() features.ActionsAllowed {
	if x != nil {
		return x.ActionsAllowed
	}
	return features.ActionsAllowed(0)
}

func (x *SetDefaultFeaturesRequest) GetMaxActions() int32 {
	if x != nil {
		return x.MaxActions
	}
	return 0
}

type SetDefaultFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetDefaultFeaturesResponse) Reset() {
	*x = SetDefaultFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultFeaturesResponse) ProtoMessage() {}

func (x *SetDefaultFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultFeaturesResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{36}
}

func (x *SetDefaultFeaturesResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetOrgFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetOrgFeaturesRequest) Reset() {
	*x = GetOrgFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgFeaturesRequest) ProtoMessage() {}

func (x *GetOrgFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgFeaturesRequest.ProtoReflect.Descriptor instead.
func (*GetOrgFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{37}
}

func (x *GetOrgFeaturesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetOrgFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features *features.Features `protobuf:"bytes,1,opt,name=features,proto3" json:"features,omitempty"`
}

func (x *GetOrgFeaturesResponse) Reset() {
	*x = GetOrgFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgFeaturesResponse) ProtoMessage() {}

func (x *GetOrgFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetOrgFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{38}
}

func (x *GetOrgFeaturesResponse) GetFeatures() *features.Features {
	if x != nil {
		return x.Features
	}
	return nil
}

type SetOrgFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                    string                  `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	TierName                 string                  `protobuf:"bytes,2,opt,name=tier_name,json=tierName,proto3" json:"tier_name,omitempty"`
	Description              string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State                    features.FeaturesState  `protobuf:"varint,4,opt,name=state,proto3,enum=zitadel.features.v1.FeaturesState" json:"state,omitempty"`
	StateDescription         string                  `protobuf:"bytes,5,opt,name=state_description,json=stateDescription,proto3" json:"state_description,omitempty"`
	AuditLogRetention        *durationpb.Duration    `protobuf:"bytes,6,opt,name=audit_log_retention,json=auditLogRetention,proto3" json:"audit_log_retention,omitempty"`
	LoginPolicyUsernameLogin bool                    `protobuf:"varint,7,opt,name=login_policy_username_login,json=loginPolicyUsernameLogin,proto3" json:"login_policy_username_login,omitempty"`
	LoginPolicyRegistration  bool                    `protobuf:"varint,8,opt,name=login_policy_registration,json=loginPolicyRegistration,proto3" json:"login_policy_registration,omitempty"`
	LoginPolicyIdp           bool                    `protobuf:"varint,9,opt,name=login_policy_idp,json=loginPolicyIdp,proto3" json:"login_policy_idp,omitempty"`
	LoginPolicyFactors       bool                    `protobuf:"varint,10,opt,name=login_policy_factors,json=loginPolicyFactors,proto3" json:"login_policy_factors,omitempty"`
	LoginPolicyPasswordless  bool                    `protobuf:"varint,11,opt,name=login_policy_passwordless,json=loginPolicyPasswordless,proto3" json:"login_policy_passwordless,omitempty"`
	PasswordComplexityPolicy bool                    `protobuf:"varint,12,opt,name=password_complexity_policy,json=passwordComplexityPolicy,proto3" json:"password_complexity_policy,omitempty"`
	LabelPolicy              bool                    `protobuf:"varint,13,opt,name=label_policy,json=labelPolicy,proto3" json:"label_policy,omitempty"`
	CustomDomain             bool                    `protobuf:"varint,14,opt,name=custom_domain,json=customDomain,proto3" json:"custom_domain,omitempty"`
	LoginPolicyPasswordReset bool                    `protobuf:"varint,15,opt,name=login_policy_password_reset,json=loginPolicyPasswordReset,proto3" json:"login_policy_password_reset,omitempty"`
	LabelPolicyPrivateLabel  bool                    `protobuf:"varint,16,opt,name=label_policy_private_label,json=labelPolicyPrivateLabel,proto3" json:"label_policy_private_label,omitempty"`
	LabelPolicyWatermark     bool                    `protobuf:"varint,17,opt,name=label_policy_watermark,json=labelPolicyWatermark,proto3" json:"label_policy_watermark,omitempty"`
	CustomText               bool                    `protobuf:"varint,18,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
	PrivacyPolicy            bool                    `protobuf:"varint,19,opt,name=privacy_policy,json=privacyPolicy,proto3" json:"privacy_policy,omitempty"`
	MetadataUser             bool                    `protobuf:"varint,20,opt,name=metadata_user,json=metadataUser,proto3" json:"metadata_user,omitempty"`
	CustomTextMessage        bool                    `protobuf:"varint,21,opt,name=custom_text_message,json=customTextMessage,proto3" json:"custom_text_message,omitempty"`
	CustomTextLogin          bool                    `protobuf:"varint,22,opt,name=custom_text_login,json=customTextLogin,proto3" json:"custom_text_login,omitempty"`
	LockoutPolicy            bool                    `protobuf:"varint,23,opt,name=lockout_policy,json=lockoutPolicy,proto3" json:"lockout_policy,omitempty"`
	Actions                  bool                    `protobuf:"varint,24,opt,name=actions,proto3" json:"actions,omitempty"`
	ActionsAllowed           features.ActionsAllowed `protobuf:"varint,25,opt,name=actions_allowed,json=actionsAllowed,proto3,enum=zitadel.features.v1.ActionsAllowed" json:"actions_allowed,omitempty"`
	MaxActions               int32                   `protobuf:"varint,26,opt,name=max_actions,json=maxActions,proto3" json:"max_actions,omitempty"`
}

func (x *SetOrgFeaturesRequest) Reset() {
	*x = SetOrgFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgFeaturesRequest) ProtoMessage() {}

func (x *SetOrgFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgFeaturesRequest.ProtoReflect.Descriptor instead.
func (*SetOrgFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{39}
}

func (x *SetOrgFeaturesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SetOrgFeaturesRequest) GetTierName() string {
	if x != nil {
		return x.TierName
	}
	return ""
}

func (x *SetOrgFeaturesRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetOrgFeaturesRequest) GetState() features.FeaturesState {
	if x != nil {
		return x.State
	}
	return features.FeaturesState(0)
}

func (x *SetOrgFeaturesRequest) GetStateDescription() string {
	if x != nil {
		return x.StateDescription
	}
	return ""
}

func (x *SetOrgFeaturesRequest) GetAuditLogRetention() *durationpb.Duration {
	if x != nil {
		return x.AuditLogRetention
	}
	return nil
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyUsernameLogin() bool {
	if x != nil {
		return x.LoginPolicyUsernameLogin
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyRegistration() bool {
	if x != nil {
		return x.LoginPolicyRegistration
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyIdp() bool {
	if x != nil {
		return x.LoginPolicyIdp
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyFactors() bool {
	if x != nil {
		return x.LoginPolicyFactors
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyPasswordless() bool {
	if x != nil {
		return x.LoginPolicyPasswordless
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetPasswordComplexityPolicy() bool {
	if x != nil {
		return x.PasswordComplexityPolicy
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLabelPolicy() bool {
	if x != nil {
		return x.LabelPolicy
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetCustomDomain() bool {
	if x != nil {
		return x.CustomDomain
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyPasswordReset() bool {
	if x != nil {
		return x.LoginPolicyPasswordReset
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLabelPolicyPrivateLabel() bool {
	if x != nil {
		return x.LabelPolicyPrivateLabel
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLabelPolicyWatermark() bool {
	if x != nil {
		return x.LabelPolicyWatermark
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetCustomText() bool {
	if x != nil {
		return x.CustomText
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetPrivacyPolicy() bool {
	if x != nil {
		return x.PrivacyPolicy
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetMetadataUser() bool {
	if x != nil {
		return x.MetadataUser
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetCustomTextMessage() bool {
	if x != nil {
		return x.CustomTextMessage
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetCustomTextLogin() bool {
	if x != nil {
		return x.CustomTextLogin
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLockoutPolicy() bool {
	if x != nil {
		return x.LockoutPolicy
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetActions() bool {
	if x != nil {
		return x.Actions
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetActionsAllowed() features.ActionsAllowed {
	if x != nil {
		return x.ActionsAllowed
	}
	return features.ActionsAllowed(0)
}

func (x *SetOrgFeaturesRequest) GetMaxActions() int32 {
	if x != nil {
		return x.MaxActions
	}
	return 0
}

type SetOrgFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetOrgFeaturesResponse) Reset() {
	*x = SetOrgFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgFeaturesResponse) ProtoMessage() {}

func (x *SetOrgFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgFeaturesResponse.ProtoReflect.Descriptor instead.
func (*SetOrgFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{40}
}

func (x *SetOrgFeaturesResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetOrgFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *ResetOrgFeaturesRequest) Reset() {
	*x = ResetOrgFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetOrgFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetOrgFeaturesRequest) ProtoMessage() {}

func (x *ResetOrgFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetOrgFeaturesRequest.ProtoReflect.Descriptor instead.
func (*ResetOrgFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{41}
}

func (x *ResetOrgFeaturesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ResetOrgFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetOrgFeaturesResponse) Reset() {
	*x = ResetOrgFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetOrgFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetOrgFeaturesResponse) ProtoMessage() {}

func (x *ResetOrgFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetOrgFeaturesResponse.ProtoReflect.Descriptor instead.
func (*ResetOrgFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{42}
}

func (x *ResetOrgFeaturesResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOrgIAMPolicyRequest) Reset() {
	*x = GetOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgIAMPolicyRequest) ProtoMessage() {}

func (x *GetOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{43}
}

type GetOrgIAMPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.OrgIAMPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetOrgIAMPolicyResponse) Reset() {
	*x = GetOrgIAMPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgIAMPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgIAMPolicyResponse) ProtoMessage() {}

func (x *GetOrgIAMPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgIAMPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetOrgIAMPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{44}
}

func (x *GetOrgIAMPolicyResponse) GetPolicy() *policy.OrgIAMPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdateOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLoginMustBeDomain bool `protobuf:"varint,1,opt,name=user_login_must_be_domain,json=userLoginMustBeDomain,proto3" json:"user_login_must_be_domain,omitempty"`
}

func (x *UpdateOrgIAMPolicyRequest) Reset() {
	*x = UpdateOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgIAMPolicyRequest) ProtoMessage() {}

func (x *UpdateOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateOrgIAMPolicyRequest) GetUserLoginMustBeDomain() bool {
	if x != nil {
		return x.UserLoginMustBeDomain
	}
	return false
}

type UpdateOrgIAMPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateOrgIAMPolicyResponse) Reset() {
	*x = UpdateOrgIAMPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgIAMPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgIAMPolicyResponse) ProtoMessage() {}

func (x *UpdateOrgIAMPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgIAMPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrgIAMPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateOrgIAMPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetCustomOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetCustomOrgIAMPolicyRequest) Reset() {
	*x = GetCustomOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomOrgIAMPolicyRequest) ProtoMessage() {}

func (x *GetCustomOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetCustomOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{47}
}

func (x *GetCustomOrgIAMPolicyRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetCustomOrgIAMPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.OrgIAMPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	//deprecated: is_default is also defined in zitadel.policy.v1.OrgIAMPolicy
	IsDefault bool `protobuf:"varint,2,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *GetCustomOrgIAMPolicyResponse) Reset() {
	*x = GetCustomOrgIAMPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomOrgIAMPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomOrgIAMPolicyResponse) ProtoMessage() {}

func (x *GetCustomOrgIAMPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomOrgIAMPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetCustomOrgIAMPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{48}
}

func (x *GetCustomOrgIAMPolicyResponse) GetPolicy() *policy.OrgIAMPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *GetCustomOrgIAMPolicyResponse) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type AddCustomOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                 string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserLoginMustBeDomain bool   `protobuf:"varint,2,opt,name=user_login_must_be_domain,json=userLoginMustBeDomain,proto3" json:"user_login_must_be_domain,omitempty"` // the username has to end with the domain of it's organisation (uniqueness is organisation based)
}

func (x *AddCustomOrgIAMPolicyRequest) Reset() {
	*x = AddCustomOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomOrgIAMPolicyRequest) ProtoMessage() {}

func (x *AddCustomOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddCustomOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{49}
}

func (x *AddCustomOrgIAMPolicyRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AddCustomOrgIAMPolicyRequest) GetUserLoginMustBeDomain() bool {
	if x != nil {
		return x.UserLoginMustBeDomain
	}
	return false
}

type AddCustomOrgIAMPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddCustomOrgIAMPolicyResponse) Reset() {
	*x = AddCustomOrgIAMPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomOrgIAMPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomOrgIAMPolicyResponse) ProtoMessage() {}

func (x *AddCustomOrgIAMPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomOrgIAMPolicyResponse.ProtoReflect.Descriptor instead.
func (*AddCustomOrgIAMPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{50}
}

func (x *AddCustomOrgIAMPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type UpdateCustomOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                 string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserLoginMustBeDomain bool   `protobuf:"varint,2,opt,name=user_login_must_be_domain,json=userLoginMustBeDomain,proto3" json:"user_login_must_be_domain,omitempty"`
}

func (x *UpdateCustomOrgIAMPolicyRequest) Reset() {
	*x = UpdateCustomOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomOrgIAMPolicyRequest) ProtoMessage() {}

func (x *UpdateCustomOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateCustomOrgIAMPolicyRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateCustomOrgIAMPolicyRequest) GetUserLoginMustBeDomain() bool {
	if x != nil {
		return x.UserLoginMustBeDomain
	}
	return false
}

type UpdateCustomOrgIAMPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateCustomOrgIAMPolicyResponse) Reset() {
	*x = UpdateCustomOrgIAMPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomOrgIAMPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomOrgIAMPolicyResponse) ProtoMessage() {}

func (x *UpdateCustomOrgIAMPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomOrgIAMPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomOrgIAMPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateCustomOrgIAMPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetCustomOrgIAMPolicyToDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *ResetCustomOrgIAMPolicyToDefaultRequest) Reset() {
	*x = ResetCustomOrgIAMPolicyToDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomOrgIAMPolicyToDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomOrgIAMPolicyToDefaultRequest) ProtoMessage() {}

func (x *ResetCustomOrgIAMPolicyToDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomOrgIAMPolicyToDefaultRequest.ProtoReflect.Descriptor instead.
func (*ResetCustomOrgIAMPolicyToDefaultRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{53}
}

func (x *ResetCustomOrgIAMPolicyToDefaultRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ResetCustomOrgIAMPolicyToDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetCustomOrgIAMPolicyToDefaultResponse) Reset() {
	*x = ResetCustomOrgIAMPolicyToDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomOrgIAMPolicyToDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomOrgIAMPolicyToDefaultResponse) ProtoMessage() {}

func (x *ResetCustomOrgIAMPolicyToDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomOrgIAMPolicyToDefaultResponse.ProtoReflect.Descriptor instead.
func (*ResetCustomOrgIAMPolicyToDefaultResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{54}
}

func (x *ResetCustomOrgIAMPolicyToDefaultResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type GetLabelPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLabelPolicyRequest) Reset() {
	*x = GetLabelPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelPolicyRequest) ProtoMessage() {}

func (x *GetLabelPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetLabelPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{55}
}

type GetLabelPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.LabelPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetLabelPolicyResponse) Reset() {
	*x = GetLabelPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelPolicyResponse) ProtoMessage() {}

func (x *GetLabelPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetLabelPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{56}
}

func (x *GetLabelPolicyResponse) GetPolicy() *policy.LabelPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

//This is an empty request
type GetPreviewLabelPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPreviewLabelPolicyRequest) Reset() {
	*x = GetPreviewLabelPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPreviewLabelPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreviewLabelPolicyRequest) ProtoMessage() {}

func (x *GetPreviewLabelPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreviewLabelPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPreviewLabelPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{57}
}

type GetPreviewLabelPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.LabelPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetPreviewLabelPolicyResponse) Reset() {
	*x = GetPreviewLabelPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPreviewLabelPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreviewLabelPolicyResponse) ProtoMessage() {}

func (x *GetPreviewLabelPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreviewLabelPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPreviewLabelPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{58}
}

func (x *GetPreviewLabelPolicyResponse) GetPolicy() *policy.LabelPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdateLabelPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryColor        string `protobuf:"bytes,1,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	HideLoginNameSuffix bool   `protobuf:"varint,3,opt,name=hide_login_name_suffix,json=hideLoginNameSuffix,proto3" json:"hide_login_name_suffix,omitempty"`
	WarnColor           string `protobuf:"bytes,4,opt,name=warn_color,json=warnColor,proto3" json:"warn_color,omitempty"`
	BackgroundColor     string `protobuf:"bytes,5,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	FontColor           string `protobuf:"bytes,6,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`
	PrimaryColorDark    string `protobuf:"bytes,7,opt,name=primary_color_dark,json=primaryColorDark,proto3" json:"primary_color_dark,omitempty"`
	BackgroundColorDark string `protobuf:"bytes,8,opt,name=background_color_dark,json=backgroundColorDark,proto3" json:"background_color_dark,omitempty"`
	WarnColorDark       string `protobuf:"bytes,9,opt,name=warn_color_dark,json=warnColorDark,proto3" json:"warn_color_dark,omitempty"`
	FontColorDark       string `protobuf:"bytes,10,opt,name=font_color_dark,json=fontColorDark,proto3" json:"font_color_dark,omitempty"`
	DisableWatermark    bool   `protobuf:"varint,11,opt,name=disable_watermark,json=disableWatermark,proto3" json:"disable_watermark,omitempty"`
}

func (x *UpdateLabelPolicyRequest) Reset() {
	*x = UpdateLabelPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelPolicyRequest) ProtoMessage() {}

func (x *UpdateLabelPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabelPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateLabelPolicyRequest) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *UpdateLabelPolicyRequest) GetHideLoginNameSuffix() bool {
	if x != nil {
		return x.HideLoginNameSuffix
	}
	return false
}

func (x *UpdateLabelPolicyRequest) GetWarnColor() string {
	if x != nil {
		return x.WarnColor
	}
	return ""
}

func (x *UpdateLabelPolicyRequest) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *UpdateLabelPolicyRequest) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

func (x *UpdateLabelPolicyRequest) GetPrimaryColorDark() string {
	if x != nil {
		return x.PrimaryColorDark
	}
	return ""
}

func (x *UpdateLabelPolicyRequest) GetBackgroundColorDark() string {
	if x != nil {
		return x.BackgroundColorDark
	}
	return ""
}

func (x *UpdateLabelPolicyRequest) GetWarnColorDark() string {
	if x != nil {
		return x.WarnColorDark
	}
	return ""
}

func (x *UpdateLabelPolicyRequest) GetFontColorDark() string {
	if x != nil {
		return x.FontColorDark
	}
	return ""
}

func (x *UpdateLabelPolicyRequest) GetDisableWatermark() bool {
	if x != nil {
		return x.DisableWatermark
	}
	return false
}

type UpdateLabelPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateLabelPolicyResponse) Reset() {
	*x = UpdateLabelPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelPolicyResponse) ProtoMessage() {}

func (x *UpdateLabelPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateLabelPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateLabelPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type ActivateLabelPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateLabelPolicyRequest) Reset() {
	*x = ActivateLabelPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateLabelPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateLabelPolicyRequest) ProtoMessage() {}

func (x *ActivateLabelPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateLabelPolicyRequest.ProtoReflect.Descriptor instead.
func (*ActivateLabelPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{61}
}

type ActivateLabelPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ActivateLabelPolicyResponse) Reset() {
	*x = ActivateLabelPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateLabelPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateLabelPolicyResponse) ProtoMessage() {}

func (x *ActivateLabelPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateLabelPolicyResponse.ProtoReflect.Descriptor instead.
func (*ActivateLabelPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{62}
}

func (x *ActivateLabelPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type RemoveLabelPolicyLogoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveLabelPolicyLogoRequest) Reset() {
	*x = RemoveLabelPolicyLogoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLabelPolicyLogoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLabelPolicyLogoRequest) ProtoMessage() {}

func (x *RemoveLabelPolicyLogoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLabelPolicyLogoRequest.ProtoReflect.Descriptor instead.
func (*RemoveLabelPolicyLogoRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{63}
}

type RemoveLabelPolicyLogoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveLabelPolicyLogoResponse) Reset() {
	*x = RemoveLabelPolicyLogoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLabelPolicyLogoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLabelPolicyLogoResponse) ProtoMessage() {}

func (x *RemoveLabelPolicyLogoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLabelPolicyLogoResponse.ProtoReflect.Descriptor instead.
func (*RemoveLabelPolicyLogoResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{64}
}

func (x *RemoveLabelPolicyLogoResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type RemoveLabelPolicyLogoDarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveLabelPolicyLogoDarkRequest) Reset() {
	*x = RemoveLabelPolicyLogoDarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLabelPolicyLogoDarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLabelPolicyLogoDarkRequest) ProtoMessage() {}

func (x *RemoveLabelPolicyLogoDarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLabelPolicyLogoDarkRequest.ProtoReflect.Descriptor instead.
func (*RemoveLabelPolicyLogoDarkRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{65}
}

type RemoveLabelPolicyLogoDarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveLabelPolicyLogoDarkResponse) Reset() {
	*x = RemoveLabelPolicyLogoDarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLabelPolicyLogoDarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLabelPolicyLogoDarkResponse) ProtoMessage() {}

func (x *RemoveLabelPolicyLogoDarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLabelPolicyLogoDarkResponse.ProtoReflect.Descriptor instead.
func (*RemoveLabelPolicyLogoDarkResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{66}
}

func (x *RemoveLabelPolicyLogoDarkResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type RemoveLabelPolicyIconRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveLabelPolicyIconRequest) Reset() {
	*x = RemoveLabelPolicyIconRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLabelPolicyIconRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLabelPolicyIconRequest) ProtoMessage() {}

func (x *RemoveLabelPolicyIconRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLabelPolicyIconRequest.ProtoReflect.Descriptor instead.
func (*RemoveLabelPolicyIconRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{67}
}

type RemoveLabelPolicyIconResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveLabelPolicyIconResponse) Reset() {
	*x = RemoveLabelPolicyIconResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLabelPolicyIconResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLabelPolicyIconResponse) ProtoMessage() {}

func (x *RemoveLabelPolicyIconResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLabelPolicyIconResponse.ProtoReflect.Descriptor instead.
func (*RemoveLabelPolicyIconResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{68}
}

func (x *RemoveLabelPolicyIconResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type RemoveLabelPolicyIconDarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveLabelPolicyIconDarkRequest) Reset() {
	*x = RemoveLabelPolicyIconDarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLabelPolicyIconDarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLabelPolicyIconDarkRequest) ProtoMessage() {}

func (x *RemoveLabelPolicyIconDarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLabelPolicyIconDarkRequest.ProtoReflect.Descriptor instead.
func (*RemoveLabelPolicyIconDarkRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{69}
}

type RemoveLabelPolicyIconDarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveLabelPolicyIconDarkResponse) Reset() {
	*x = RemoveLabelPolicyIconDarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLabelPolicyIconDarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLabelPolicyIconDarkResponse) ProtoMessage() {}

func (x *RemoveLabelPolicyIconDarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLabelPolicyIconDarkResponse.ProtoReflect.Descriptor instead.
func (*RemoveLabelPolicyIconDarkResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{70}
}

func (x *RemoveLabelPolicyIconDarkResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type RemoveLabelPolicyFontRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveLabelPolicyFontRequest) Reset() {
	*x = RemoveLabelPolicyFontRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLabelPolicyFontRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLabelPolicyFontRequest) ProtoMessage() {}

func (x *RemoveLabelPolicyFontRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLabelPolicyFontRequest.ProtoReflect.Descriptor instead.
func (*RemoveLabelPolicyFontRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{71}
}

type RemoveLabelPolicyFontResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveLabelPolicyFontResponse) Reset() {
	*x = RemoveLabelPolicyFontResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLabelPolicyFontResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLabelPolicyFontResponse) ProtoMessage() {}

func (x *RemoveLabelPolicyFontResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLabelPolicyFontResponse.ProtoReflect.Descriptor instead.
func (*RemoveLabelPolicyFontResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{72}
}

func (x *RemoveLabelPolicyFontResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type GetLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLoginPolicyRequest) Reset() {
	*x = GetLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginPolicyRequest) ProtoMessage() {}

func (x *GetLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{73}
}

type GetLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.LoginPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetLoginPolicyResponse) Reset() {
	*x = GetLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginPolicyResponse) ProtoMessage() {}

func (x *GetLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{74}
}

func (x *GetLoginPolicyResponse) GetPolicy() *policy.LoginPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdateLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowUsernamePassword  bool                    `protobuf:"varint,1,opt,name=allow_username_password,json=allowUsernamePassword,proto3" json:"allow_username_password,omitempty"`
	AllowRegister          bool                    `protobuf:"varint,2,opt,name=allow_register,json=allowRegister,proto3" json:"allow_register,omitempty"`
	AllowExternalIdp       bool                    `protobuf:"varint,3,opt,name=allow_external_idp,json=allowExternalIdp,proto3" json:"allow_external_idp,omitempty"`
	ForceMfa               bool                    `protobuf:"varint,4,opt,name=force_mfa,json=forceMfa,proto3" json:"force_mfa,omitempty"`
	PasswordlessType       policy.PasswordlessType `protobuf:"varint,5,opt,name=passwordless_type,json=passwordlessType,proto3,enum=zitadel.policy.v1.PasswordlessType" json:"passwordless_type,omitempty"`
	HidePasswordReset      bool                    `protobuf:"varint,6,opt,name=hide_password_reset,json=hidePasswordReset,proto3" json:"hide_password_reset,omitempty"`
	IgnoreUnknownUsernames bool                    `protobuf:"varint,7,opt,name=ignore_unknown_usernames,json=ignoreUnknownUsernames,proto3" json:"ignore_unknown_usernames,omitempty"`
	DefaultRedirectUri     string                  `protobuf:"bytes,8,opt,name=default_redirect_uri,json=defaultRedirectUri,proto3" json:"default_redirect_uri,omitempty"`
}

func (x *UpdateLoginPolicyRequest) Reset() {
	*x = UpdateLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLoginPolicyRequest) ProtoMessage() {}

func (x *UpdateLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{75}
}

func (x *UpdateLoginPolicyRequest) GetAllowUsernamePassword() bool {
	if x != nil {
		return x.AllowUsernamePassword
	}
	return false
}

func (x *UpdateLoginPolicyRequest) GetAllowRegister() bool {
	if x != nil {
		return x.AllowRegister
	}
	return false
}

func (x *UpdateLoginPolicyRequest) GetAllowExternalIdp() bool {
	if x != nil {
		return x.AllowExternalIdp
	}
	return false
}

func (x *UpdateLoginPolicyRequest) GetForceMfa() bool {
	if x != nil {
		return x.ForceMfa
	}
	return false
}

func (x *UpdateLoginPolicyRequest) GetPasswordlessType() policy.PasswordlessType {
	if x != nil {
		return x.PasswordlessType
	}
	return policy.PasswordlessType(0)
}

func (x *UpdateLoginPolicyRequest) GetHidePasswordReset() bool {
	if x != nil {
		return x.HidePasswordReset
	}
	return false
}

func (x *UpdateLoginPolicyRequest) GetIgnoreUnknownUsernames() bool {
	if x != nil {
		return x.IgnoreUnknownUsernames
	}
	return false
}

func (x *UpdateLoginPolicyRequest) GetDefaultRedirectUri() string {
	if x != nil {
		return x.DefaultRedirectUri
	}
	return ""
}

type UpdateLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateLoginPolicyResponse) Reset() {
	*x = UpdateLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLoginPolicyResponse) ProtoMessage() {}

func (x *UpdateLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{76}
}

func (x *UpdateLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ListLoginPolicyIDPsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//list limitations and ordering
	Query *object.ListQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListLoginPolicyIDPsRequest) Reset() {
	*x = ListLoginPolicyIDPsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicyIDPsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicyIDPsRequest) ProtoMessage() {}

func (x *ListLoginPolicyIDPsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicyIDPsRequest.ProtoReflect.Descriptor instead.
func (*ListLoginPolicyIDPsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{77}
}

func (x *ListLoginPolicyIDPsRequest) GetQuery() *object.ListQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type ListLoginPolicyIDPsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ListDetails       `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Result  []*idp.IDPLoginPolicyLink `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListLoginPolicyIDPsResponse) Reset() {
	*x = ListLoginPolicyIDPsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicyIDPsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicyIDPsResponse) ProtoMessage() {}

func (x *ListLoginPolicyIDPsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicyIDPsResponse.ProtoReflect.Descriptor instead.
func (*ListLoginPolicyIDPsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{78}
}

func (x *ListLoginPolicyIDPsResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListLoginPolicyIDPsResponse) GetResult() []*idp.IDPLoginPolicyLink {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddIDPToLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"` // Id of the predefined idp configuration
}

func (x *AddIDPToLoginPolicyRequest) Reset() {
	*x = AddIDPToLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIDPToLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIDPToLoginPolicyRequest) ProtoMessage() {}

func (x *AddIDPToLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIDPToLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddIDPToLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{79}
}

func (x *AddIDPToLoginPolicyRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type AddIDPToLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddIDPToLoginPolicyResponse) Reset() {
	*x = AddIDPToLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIDPToLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIDPToLoginPolicyResponse) ProtoMessage() {}

func (x *AddIDPToLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIDPToLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*AddIDPToLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{80}
}

func (x *AddIDPToLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveIDPFromLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *RemoveIDPFromLoginPolicyRequest) Reset() {
	*x = RemoveIDPFromLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIDPFromLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIDPFromLoginPolicyRequest) ProtoMessage() {}

func (x *RemoveIDPFromLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIDPFromLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*RemoveIDPFromLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{81}
}

func (x *RemoveIDPFromLoginPolicyRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type RemoveIDPFromLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveIDPFromLoginPolicyResponse) Reset() {
	*x = RemoveIDPFromLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIDPFromLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIDPFromLoginPolicyResponse) ProtoMessage() {}

func (x *RemoveIDPFromLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIDPFromLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*RemoveIDPFromLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{82}
}

func (x *RemoveIDPFromLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type ListLoginPolicySecondFactorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListLoginPolicySecondFactorsRequest) Reset() {
	*x = ListLoginPolicySecondFactorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicySecondFactorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicySecondFactorsRequest) ProtoMessage() {}

func (x *ListLoginPolicySecondFactorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicySecondFactorsRequest.ProtoReflect.Descriptor instead.
func (*ListLoginPolicySecondFactorsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{83}
}

type ListLoginPolicySecondFactorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ListDetails       `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Result  []policy.SecondFactorType `protobuf:"varint,2,rep,packed,name=result,proto3,enum=zitadel.policy.v1.SecondFactorType" json:"result,omitempty"`
}

func (x *ListLoginPolicySecondFactorsResponse) Reset() {
	*x = ListLoginPolicySecondFactorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicySecondFactorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicySecondFactorsResponse) ProtoMessage() {}

func (x *ListLoginPolicySecondFactorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicySecondFactorsResponse.ProtoReflect.Descriptor instead.
func (*ListLoginPolicySecondFactorsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{84}
}

func (x *ListLoginPolicySecondFactorsResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListLoginPolicySecondFactorsResponse) GetResult() []policy.SecondFactorType {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddSecondFactorToLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type policy.SecondFactorType `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.policy.v1.SecondFactorType" json:"type,omitempty"`
}

func (x *AddSecondFactorToLoginPolicyRequest) Reset() {
	*x = AddSecondFactorToLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSecondFactorToLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSecondFactorToLoginPolicyRequest) ProtoMessage() {}

func (x *AddSecondFactorToLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSecondFactorToLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddSecondFactorToLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{85}
}

func (x *AddSecondFactorToLoginPolicyRequest) GetType() policy.SecondFactorType {
	if x != nil {
		return x.Type
	}
	return policy.SecondFactorType(0)
}

type AddSecondFactorToLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddSecondFactorToLoginPolicyResponse) Reset() {
	*x = AddSecondFactorToLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSecondFactorToLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSecondFactorToLoginPolicyResponse) ProtoMessage() {}

func (x *AddSecondFactorToLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSecondFactorToLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*AddSecondFactorToLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{86}
}

func (x *AddSecondFactorToLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveSecondFactorFromLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type policy.SecondFactorType `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.policy.v1.SecondFactorType" json:"type,omitempty"`
}

func (x *RemoveSecondFactorFromLoginPolicyRequest) Reset() {
	*x = RemoveSecondFactorFromLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSecondFactorFromLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSecondFactorFromLoginPolicyRequest) ProtoMessage() {}

func (x *RemoveSecondFactorFromLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSecondFactorFromLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*RemoveSecondFactorFromLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{87}
}

func (x *RemoveSecondFactorFromLoginPolicyRequest) GetType() policy.SecondFactorType {
	if x != nil {
		return x.Type
	}
	return policy.SecondFactorType(0)
}

type RemoveSecondFactorFromLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveSecondFactorFromLoginPolicyResponse) Reset() {
	*x = RemoveSecondFactorFromLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSecondFactorFromLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSecondFactorFromLoginPolicyResponse) ProtoMessage() {}

func (x *RemoveSecondFactorFromLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSecondFactorFromLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*RemoveSecondFactorFromLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{88}
}

func (x *RemoveSecondFactorFromLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type ListLoginPolicyMultiFactorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListLoginPolicyMultiFactorsRequest) Reset() {
	*x = ListLoginPolicyMultiFactorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicyMultiFactorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicyMultiFactorsRequest) ProtoMessage() {}

func (x *ListLoginPolicyMultiFactorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicyMultiFactorsRequest.ProtoReflect.Descriptor instead.
func (*ListLoginPolicyMultiFactorsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{89}
}

type ListLoginPolicyMultiFactorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ListDetails      `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Result  []policy.MultiFactorType `protobuf:"varint,2,rep,packed,name=result,proto3,enum=zitadel.policy.v1.MultiFactorType" json:"result,omitempty"`
}

func (x *ListLoginPolicyMultiFactorsResponse) Reset() {
	*x = ListLoginPolicyMultiFactorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicyMultiFactorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicyMultiFactorsResponse) ProtoMessage() {}

func (x *ListLoginPolicyMultiFactorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicyMultiFactorsResponse.ProtoReflect.Descriptor instead.
func (*ListLoginPolicyMultiFactorsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{90}
}

func (x *ListLoginPolicyMultiFactorsResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListLoginPolicyMultiFactorsResponse) GetResult() []policy.MultiFactorType {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddMultiFactorToLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type policy.MultiFactorType `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.policy.v1.MultiFactorType" json:"type,omitempty"`
}

func (x *AddMultiFactorToLoginPolicyRequest) Reset() {
	*x = AddMultiFactorToLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMultiFactorToLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMultiFactorToLoginPolicyRequest) ProtoMessage() {}

func (x *AddMultiFactorToLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMultiFactorToLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddMultiFactorToLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{91}
}

func (x *AddMultiFactorToLoginPolicyRequest) GetType() policy.MultiFactorType {
	if x != nil {
		return x.Type
	}
	return policy.MultiFactorType(0)
}

type AddMultiFactorToLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddMultiFactorToLoginPolicyResponse) Reset() {
	*x = AddMultiFactorToLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMultiFactorToLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMultiFactorToLoginPolicyResponse) ProtoMessage() {}

func (x *AddMultiFactorToLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMultiFactorToLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*AddMultiFactorToLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{92}
}

func (x *AddMultiFactorToLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveMultiFactorFromLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type policy.MultiFactorType `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.policy.v1.MultiFactorType" json:"type,omitempty"`
}

func (x *RemoveMultiFactorFromLoginPolicyRequest) Reset() {
	*x = RemoveMultiFactorFromLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMultiFactorFromLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMultiFactorFromLoginPolicyRequest) ProtoMessage() {}

func (x *RemoveMultiFactorFromLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMultiFactorFromLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*RemoveMultiFactorFromLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{93}
}

func (x *RemoveMultiFactorFromLoginPolicyRequest) GetType() policy.MultiFactorType {
	if x != nil {
		return x.Type
	}
	return policy.MultiFactorType(0)
}

type RemoveMultiFactorFromLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveMultiFactorFromLoginPolicyResponse) Reset() {
	*x = RemoveMultiFactorFromLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMultiFactorFromLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMultiFactorFromLoginPolicyResponse) ProtoMessage() {}

func (x *RemoveMultiFactorFromLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMultiFactorFromLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*RemoveMultiFactorFromLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{94}
}

func (x *RemoveMultiFactorFromLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetPasswordComplexityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPasswordComplexityPolicyRequest) Reset() {
	*x = GetPasswordComplexityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordComplexityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordComplexityPolicyRequest) ProtoMessage() {}

func (x *GetPasswordComplexityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordComplexityPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPasswordComplexityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{95}
}

type GetPasswordComplexityPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.PasswordComplexityPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetPasswordComplexityPolicyResponse) Reset() {
	*x = GetPasswordComplexityPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordComplexityPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordComplexityPolicyResponse) ProtoMessage() {}

func (x *GetPasswordComplexityPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordComplexityPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPasswordComplexityPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{96}
}

func (x *GetPasswordComplexityPolicyResponse) GetPolicy() *policy.PasswordComplexityPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdatePasswordComplexityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinLength    uint32 `protobuf:"varint,1,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	HasUppercase bool   `protobuf:"varint,2,opt,name=has_uppercase,json=hasUppercase,proto3" json:"has_uppercase,omitempty"`
	HasLowercase bool   `protobuf:"varint,3,opt,name=has_lowercase,json=hasLowercase,proto3" json:"has_lowercase,omitempty"`
	HasNumber    bool   `protobuf:"varint,4,opt,name=has_number,json=hasNumber,proto3" json:"has_number,omitempty"`
	HasSymbol    bool   `protobuf:"varint,5,opt,name=has_symbol,json=hasSymbol,proto3" json:"has_symbol,omitempty"`
}

func (x *UpdatePasswordComplexityPolicyRequest) Reset() {
	*x = UpdatePasswordComplexityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordComplexityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordComplexityPolicyRequest) ProtoMessage() {}

func (x *UpdatePasswordComplexityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordComplexityPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePasswordComplexityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{97}
}

func (x *UpdatePasswordComplexityPolicyRequest) GetMinLength() uint32 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *UpdatePasswordComplexityPolicyRequest) GetHasUppercase() bool {
	if x != nil {
		return x.HasUppercase
	}
	return false
}

func (x *UpdatePasswordComplexityPolicyRequest) GetHasLowercase() bool {
	if x != nil {
		return x.HasLowercase
	}
	return false
}

func (x *UpdatePasswordComplexityPolicyRequest) GetHasNumber() bool {
	if x != nil {
		return x.HasNumber
	}
	return false
}

func (x *UpdatePasswordComplexityPolicyRequest) GetHasSymbol() bool {
	if x != nil {
		return x.HasSymbol
	}
	return false
}

type UpdatePasswordComplexityPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdatePasswordComplexityPolicyResponse) Reset() {
	*x = UpdatePasswordComplexityPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordComplexityPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordComplexityPolicyResponse) ProtoMessage() {}

func (x *UpdatePasswordComplexityPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordComplexityPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePasswordComplexityPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{98}
}

func (x *UpdatePasswordComplexityPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type GetPasswordAgePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPasswordAgePolicyRequest) Reset() {
	*x = GetPasswordAgePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordAgePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordAgePolicyRequest) ProtoMessage() {}

func (x *GetPasswordAgePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordAgePolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPasswordAgePolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{99}
}

type GetPasswordAgePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.PasswordAgePolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetPasswordAgePolicyResponse) Reset() {
	*x = GetPasswordAgePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordAgePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordAgePolicyResponse) ProtoMessage() {}

func (x *GetPasswordAgePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordAgePolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPasswordAgePolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{100}
}

func (x *GetPasswordAgePolicyResponse) GetPolicy() *policy.PasswordAgePolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdatePasswordAgePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAgeDays     uint32 `protobuf:"varint,1,opt,name=max_age_days,json=maxAgeDays,proto3" json:"max_age_days,omitempty"`
	ExpireWarnDays uint32 `protobuf:"varint,2,opt,name=expire_warn_days,json=expireWarnDays,proto3" json:"expire_warn_days,omitempty"`
}

func (x *UpdatePasswordAgePolicyRequest) Reset() {
	*x = UpdatePasswordAgePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordAgePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordAgePolicyRequest) ProtoMessage() {}

func (x *UpdatePasswordAgePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordAgePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePasswordAgePolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{101}
}

func (x *UpdatePasswordAgePolicyRequest) GetMaxAgeDays() uint32 {
	if x != nil {
		return x.MaxAgeDays
	}
	return 0
}

func (x *UpdatePasswordAgePolicyRequest) GetExpireWarnDays() uint32 {
	if x != nil {
		return x.ExpireWarnDays
	}
	return 0
}

type UpdatePasswordAgePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdatePasswordAgePolicyResponse) Reset() {
	*x = UpdatePasswordAgePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordAgePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordAgePolicyResponse) ProtoMessage() {}

func (x *UpdatePasswordAgePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordAgePolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePasswordAgePolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{102}
}

func (x *UpdatePasswordAgePolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type GetLockoutPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLockoutPolicyRequest) Reset() {
	*x = GetLockoutPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLockoutPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockoutPolicyRequest) ProtoMessage() {}

func (x *GetLockoutPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockoutPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetLockoutPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{103}
}

type GetLockoutPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.LockoutPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetLockoutPolicyResponse) Reset() {
	*x = GetLockoutPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLockoutPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockoutPolicyResponse) ProtoMessage() {}

func (x *GetLockoutPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockoutPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetLockoutPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{104}
}

func (x *GetLockoutPolicyResponse) GetPolicy() *policy.LockoutPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdateLockoutPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// failed attempts until a user gets locked
	MaxPasswordAttempts uint32 `protobuf:"varint,1,opt,name=max_password_attempts,json=maxPasswordAttempts,proto3" json:"max_password_attempts,omitempty"`
}

func (x *UpdateLockoutPolicyRequest) Reset() {
	*x = UpdateLockoutPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLockoutPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLockoutPolicyRequest) ProtoMessage() {}

func (x *UpdateLockoutPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLockoutPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateLockoutPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{105}
}

func (x *UpdateLockoutPolicyRequest) GetMaxPasswordAttempts() uint32 {
	if x != nil {
		return x.MaxPasswordAttempts
	}
	return 0
}

type UpdateLockoutPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateLockoutPolicyResponse) Reset() {
	*x = UpdateLockoutPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLockoutPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLockoutPolicyResponse) ProtoMessage() {}

func (x *UpdateLockoutPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLockoutPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateLockoutPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{106}
}

func (x *UpdateLockoutPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type GetPrivacyPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPrivacyPolicyRequest) Reset() {
	*x = GetPrivacyPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivacyPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivacyPolicyRequest) ProtoMessage() {}

func (x *GetPrivacyPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivacyPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPrivacyPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{107}
}

type GetPrivacyPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.PrivacyPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetPrivacyPolicyResponse) Reset() {
	*x = GetPrivacyPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivacyPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivacyPolicyResponse) ProtoMessage() {}

func (x *GetPrivacyPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivacyPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPrivacyPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{108}
}

func (x *GetPrivacyPolicyResponse) GetPolicy() *policy.PrivacyPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdatePrivacyPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TosLink     string `protobuf:"bytes,1,opt,name=tos_link,json=tosLink,proto3" json:"tos_link,omitempty"`
	PrivacyLink string `protobuf:"bytes,2,opt,name=privacy_link,json=privacyLink,proto3" json:"privacy_link,omitempty"`
	HelpLink    string `protobuf:"bytes,3,opt,name=help_link,json=helpLink,proto3" json:"help_link,omitempty"`
}

func (x *UpdatePrivacyPolicyRequest) Reset() {
	*x = UpdatePrivacyPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrivacyPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivacyPolicyRequest) ProtoMessage() {}

func (x *UpdatePrivacyPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivacyPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePrivacyPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{109}
}

func (x *UpdatePrivacyPolicyRequest) GetTosLink() string {
	if x != nil {
		return x.TosLink
	}
	return ""
}

func (x *UpdatePrivacyPolicyRequest) GetPrivacyLink() string {
	if x != nil {
		return x.PrivacyLink
	}
	return ""
}

func (x *UpdatePrivacyPolicyRequest) GetHelpLink() string {
	if x != nil {
		return x.HelpLink
	}
	return ""
}

type UpdatePrivacyPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdatePrivacyPolicyResponse) Reset() {
	*x = UpdatePrivacyPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrivacyPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivacyPolicyResponse) ProtoMessage() {}

func (x *UpdatePrivacyPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivacyPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePrivacyPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{110}
}

func (x *UpdatePrivacyPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetDefaultInitMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetDefaultInitMessageTextRequest) Reset() {
	*x = GetDefaultInitMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultInitMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultInitMessageTextRequest) ProtoMessage() {}

func (x *GetDefaultInitMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultInitMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultInitMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{111}
}

func (x *GetDefaultInitMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetDefaultInitMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetDefaultInitMessageTextResponse) Reset() {
	*x = GetDefaultInitMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultInitMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultInitMessageTextResponse) ProtoMessage() {}

func (x *GetDefaultInitMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultInitMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultInitMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{112}
}

func (x *GetDefaultInitMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type GetCustomInitMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetCustomInitMessageTextRequest) Reset() {
	*x = GetCustomInitMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomInitMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomInitMessageTextRequest) ProtoMessage() {}

func (x *GetCustomInitMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomInitMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetCustomInitMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{113}
}

func (x *GetCustomInitMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetCustomInitMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetCustomInitMessageTextResponse) Reset() {
	*x = GetCustomInitMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomInitMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomInitMessageTextResponse) ProtoMessage() {}

func (x *GetCustomInitMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomInitMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetCustomInitMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{114}
}

func (x *GetCustomInitMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type SetDefaultInitMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language   string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PreHeader  string `protobuf:"bytes,3,opt,name=pre_header,json=preHeader,proto3" json:"pre_header,omitempty"`
	Subject    string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Greeting   string `protobuf:"bytes,5,opt,name=greeting,proto3" json:"greeting,omitempty"`
	Text       string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	ButtonText string `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	FooterText string `protobuf:"bytes,8,opt,name=footer_text,json=footerText,proto3" json:"footer_text,omitempty"`
}

func (x *SetDefaultInitMessageTextRequest) Reset() {
	*x = SetDefaultInitMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultInitMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultInitMessageTextRequest) ProtoMessage() {}

func (x *SetDefaultInitMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultInitMessageTextRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultInitMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{115}
}

func (x *SetDefaultInitMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SetDefaultInitMessageTextRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SetDefaultInitMessageTextRequest) GetPreHeader() string {
	if x != nil {
		return x.PreHeader
	}
	return ""
}

func (x *SetDefaultInitMessageTextRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SetDefaultInitMessageTextRequest) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *SetDefaultInitMessageTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SetDefaultInitMessageTextRequest) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *SetDefaultInitMessageTextRequest) GetFooterText() string {
	if x != nil {
		return x.FooterText
	}
	return ""
}

type SetDefaultInitMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetDefaultInitMessageTextResponse) Reset() {
	*x = SetDefaultInitMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultInitMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultInitMessageTextResponse) ProtoMessage() {}

func (x *SetDefaultInitMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultInitMessageTextResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultInitMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{116}
}

func (x *SetDefaultInitMessageTextResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetCustomInitMessageTextToDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ResetCustomInitMessageTextToDefaultRequest) Reset() {
	*x = ResetCustomInitMessageTextToDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomInitMessageTextToDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomInitMessageTextToDefaultRequest) ProtoMessage() {}

func (x *ResetCustomInitMessageTextToDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomInitMessageTextToDefaultRequest.ProtoReflect.Descriptor instead.
func (*ResetCustomInitMessageTextToDefaultRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{117}
}

func (x *ResetCustomInitMessageTextToDefaultRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ResetCustomInitMessageTextToDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetCustomInitMessageTextToDefaultResponse) Reset() {
	*x = ResetCustomInitMessageTextToDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomInitMessageTextToDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomInitMessageTextToDefaultResponse) ProtoMessage() {}

func (x *ResetCustomInitMessageTextToDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomInitMessageTextToDefaultResponse.ProtoReflect.Descriptor instead.
func (*ResetCustomInitMessageTextToDefaultResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{118}
}

func (x *ResetCustomInitMessageTextToDefaultResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetDefaultPasswordResetMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetDefaultPasswordResetMessageTextRequest) Reset() {
	*x = GetDefaultPasswordResetMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultPasswordResetMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultPasswordResetMessageTextRequest) ProtoMessage() {}

func (x *GetDefaultPasswordResetMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultPasswordResetMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultPasswordResetMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{119}
}

func (x *GetDefaultPasswordResetMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetDefaultPasswordResetMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetDefaultPasswordResetMessageTextResponse) Reset() {
	*x = GetDefaultPasswordResetMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultPasswordResetMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultPasswordResetMessageTextResponse) ProtoMessage() {}

func (x *GetDefaultPasswordResetMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultPasswordResetMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultPasswordResetMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{120}
}

func (x *GetDefaultPasswordResetMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type GetCustomPasswordResetMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetCustomPasswordResetMessageTextRequest) Reset() {
	*x = GetCustomPasswordResetMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomPasswordResetMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomPasswordResetMessageTextRequest) ProtoMessage() {}

func (x *GetCustomPasswordResetMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomPasswordResetMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetCustomPasswordResetMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{121}
}

func (x *GetCustomPasswordResetMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetCustomPasswordResetMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetCustomPasswordResetMessageTextResponse) Reset() {
	*x = GetCustomPasswordResetMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomPasswordResetMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomPasswordResetMessageTextResponse) ProtoMessage() {}

func (x *GetCustomPasswordResetMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomPasswordResetMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetCustomPasswordResetMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{122}
}

func (x *GetCustomPasswordResetMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type SetDefaultPasswordResetMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language   string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PreHeader  string `protobuf:"bytes,3,opt,name=pre_header,json=preHeader,proto3" json:"pre_header,omitempty"`
	Subject    string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Greeting   string `protobuf:"bytes,5,opt,name=greeting,proto3" json:"greeting,omitempty"`
	Text       string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	ButtonText string `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	FooterText string `protobuf:"bytes,8,opt,name=footer_text,json=footerText,proto3" json:"footer_text,omitempty"`
}

func (x *SetDefaultPasswordResetMessageTextRequest) Reset() {
	*x = SetDefaultPasswordResetMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultPasswordResetMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultPasswordResetMessageTextRequest) ProtoMessage() {}

func (x *SetDefaultPasswordResetMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultPasswordResetMessageTextRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultPasswordResetMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{123}
}

func (x *SetDefaultPasswordResetMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SetDefaultPasswordResetMessageTextRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SetDefaultPasswordResetMessageTextRequest) GetPreHeader() string {
	if x != nil {
		return x.PreHeader
	}
	return ""
}

func (x *SetDefaultPasswordResetMessageTextRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SetDefaultPasswordResetMessageTextRequest) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *SetDefaultPasswordResetMessageTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SetDefaultPasswordResetMessageTextRequest) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *SetDefaultPasswordResetMessageTextRequest) GetFooterText() string {
	if x != nil {
		return x.FooterText
	}
	return ""
}

type SetDefaultPasswordResetMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetDefaultPasswordResetMessageTextResponse) Reset() {
	*x = SetDefaultPasswordResetMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultPasswordResetMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultPasswordResetMessageTextResponse) ProtoMessage() {}

func (x *SetDefaultPasswordResetMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultPasswordResetMessageTextResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultPasswordResetMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{124}
}

func (x *SetDefaultPasswordResetMessageTextResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetCustomPasswordResetMessageTextToDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ResetCustomPasswordResetMessageTextToDefaultRequest) Reset() {
	*x = ResetCustomPasswordResetMessageTextToDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomPasswordResetMessageTextToDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomPasswordResetMessageTextToDefaultRequest) ProtoMessage() {}

func (x *ResetCustomPasswordResetMessageTextToDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomPasswordResetMessageTextToDefaultRequest.ProtoReflect.Descriptor instead.
func (*ResetCustomPasswordResetMessageTextToDefaultRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{125}
}

func (x *ResetCustomPasswordResetMessageTextToDefaultRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ResetCustomPasswordResetMessageTextToDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetCustomPasswordResetMessageTextToDefaultResponse) Reset() {
	*x = ResetCustomPasswordResetMessageTextToDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomPasswordResetMessageTextToDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomPasswordResetMessageTextToDefaultResponse) ProtoMessage() {}

func (x *ResetCustomPasswordResetMessageTextToDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomPasswordResetMessageTextToDefaultResponse.ProtoReflect.Descriptor instead.
func (*ResetCustomPasswordResetMessageTextToDefaultResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{126}
}

func (x *ResetCustomPasswordResetMessageTextToDefaultResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetDefaultVerifyEmailMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetDefaultVerifyEmailMessageTextRequest) Reset() {
	*x = GetDefaultVerifyEmailMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultVerifyEmailMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultVerifyEmailMessageTextRequest) ProtoMessage() {}

func (x *GetDefaultVerifyEmailMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultVerifyEmailMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultVerifyEmailMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{127}
}

func (x *GetDefaultVerifyEmailMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetDefaultVerifyEmailMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetDefaultVerifyEmailMessageTextResponse) Reset() {
	*x = GetDefaultVerifyEmailMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultVerifyEmailMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultVerifyEmailMessageTextResponse) ProtoMessage() {}

func (x *GetDefaultVerifyEmailMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultVerifyEmailMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultVerifyEmailMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{128}
}

func (x *GetDefaultVerifyEmailMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type GetCustomVerifyEmailMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetCustomVerifyEmailMessageTextRequest) Reset() {
	*x = GetCustomVerifyEmailMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomVerifyEmailMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomVerifyEmailMessageTextRequest) ProtoMessage() {}

func (x *GetCustomVerifyEmailMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomVerifyEmailMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetCustomVerifyEmailMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{129}
}

func (x *GetCustomVerifyEmailMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetCustomVerifyEmailMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetCustomVerifyEmailMessageTextResponse) Reset() {
	*x = GetCustomVerifyEmailMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomVerifyEmailMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomVerifyEmailMessageTextResponse) ProtoMessage() {}

func (x *GetCustomVerifyEmailMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomVerifyEmailMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetCustomVerifyEmailMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{130}
}

func (x *GetCustomVerifyEmailMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type SetDefaultVerifyEmailMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language   string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PreHeader  string `protobuf:"bytes,3,opt,name=pre_header,json=preHeader,proto3" json:"pre_header,omitempty"`
	Subject    string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Greeting   string `protobuf:"bytes,5,opt,name=greeting,proto3" json:"greeting,omitempty"`
	Text       string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	ButtonText string `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	FooterText string `protobuf:"bytes,8,opt,name=footer_text,json=footerText,proto3" json:"footer_text,omitempty"`
}

func (x *SetDefaultVerifyEmailMessageTextRequest) Reset() {
	*x = SetDefaultVerifyEmailMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultVerifyEmailMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultVerifyEmailMessageTextRequest) ProtoMessage() {}

func (x *SetDefaultVerifyEmailMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultVerifyEmailMessageTextRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultVerifyEmailMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{131}
}

func (x *SetDefaultVerifyEmailMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SetDefaultVerifyEmailMessageTextRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SetDefaultVerifyEmailMessageTextRequest) GetPreHeader() string {
	if x != nil {
		return x.PreHeader
	}
	return ""
}

func (x *SetDefaultVerifyEmailMessageTextRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SetDefaultVerifyEmailMessageTextRequest) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *SetDefaultVerifyEmailMessageTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SetDefaultVerifyEmailMessageTextRequest) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *SetDefaultVerifyEmailMessageTextRequest) GetFooterText() string {
	if x != nil {
		return x.FooterText
	}
	return ""
}

type SetDefaultVerifyEmailMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetDefaultVerifyEmailMessageTextResponse) Reset() {
	*x = SetDefaultVerifyEmailMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultVerifyEmailMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultVerifyEmailMessageTextResponse) ProtoMessage() {}

func (x *SetDefaultVerifyEmailMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultVerifyEmailMessageTextResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultVerifyEmailMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{132}
}

func (x *SetDefaultVerifyEmailMessageTextResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetCustomVerifyEmailMessageTextToDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultRequest) Reset() {
	*x = ResetCustomVerifyEmailMessageTextToDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomVerifyEmailMessageTextToDefaultRequest) ProtoMessage() {}

func (x *ResetCustomVerifyEmailMessageTextToDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomVerifyEmailMessageTextToDefaultRequest.ProtoReflect.Descriptor instead.
func (*ResetCustomVerifyEmailMessageTextToDefaultRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{133}
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ResetCustomVerifyEmailMessageTextToDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultResponse) Reset() {
	*x = ResetCustomVerifyEmailMessageTextToDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomVerifyEmailMessageTextToDefaultResponse) ProtoMessage() {}

func (x *ResetCustomVerifyEmailMessageTextToDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomVerifyEmailMessageTextToDefaultResponse.ProtoReflect.Descriptor instead.
func (*ResetCustomVerifyEmailMessageTextToDefaultResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{134}
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetDefaultVerifyPhoneMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetDefaultVerifyPhoneMessageTextRequest) Reset() {
	*x = GetDefaultVerifyPhoneMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultVerifyPhoneMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultVerifyPhoneMessageTextRequest) ProtoMessage() {}

func (x *GetDefaultVerifyPhoneMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultVerifyPhoneMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultVerifyPhoneMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{135}
}

func (x *GetDefaultVerifyPhoneMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetDefaultVerifyPhoneMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetDefaultVerifyPhoneMessageTextResponse) Reset() {
	*x = GetDefaultVerifyPhoneMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultVerifyPhoneMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultVerifyPhoneMessageTextResponse) ProtoMessage() {}

func (x *GetDefaultVerifyPhoneMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultVerifyPhoneMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultVerifyPhoneMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{136}
}

func (x *GetDefaultVerifyPhoneMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type GetCustomVerifyPhoneMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetCustomVerifyPhoneMessageTextRequest) Reset() {
	*x = GetCustomVerifyPhoneMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomVerifyPhoneMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomVerifyPhoneMessageTextRequest) ProtoMessage() {}

func (x *GetCustomVerifyPhoneMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomVerifyPhoneMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetCustomVerifyPhoneMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{137}
}

func (x *GetCustomVerifyPhoneMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetCustomVerifyPhoneMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetCustomVerifyPhoneMessageTextResponse) Reset() {
	*x = GetCustomVerifyPhoneMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomVerifyPhoneMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomVerifyPhoneMessageTextResponse) ProtoMessage() {}

func (x *GetCustomVerifyPhoneMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomVerifyPhoneMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetCustomVerifyPhoneMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{138}
}

func (x *GetCustomVerifyPhoneMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type SetDefaultVerifyPhoneMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language   string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PreHeader  string `protobuf:"bytes,3,opt,name=pre_header,json=preHeader,proto3" json:"pre_header,omitempty"`
	Subject    string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Greeting   string `protobuf:"bytes,5,opt,name=greeting,proto3" json:"greeting,omitempty"`
	Text       string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	ButtonText string `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	FooterText string `protobuf:"bytes,8,opt,name=footer_text,json=footerText,proto3" json:"footer_text,omitempty"`
}

func (x *SetDefaultVerifyPhoneMessageTextRequest) Reset() {
	*x = SetDefaultVerifyPhoneMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultVerifyPhoneMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultVerifyPhoneMessageTextRequest) ProtoMessage() {}

func (x *SetDefaultVerifyPhoneMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultVerifyPhoneMessageTextRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultVerifyPhoneMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{139}
}

func (x *SetDefaultVerifyPhoneMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SetDefaultVerifyPhoneMessageTextRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SetDefaultVerifyPhoneMessageTextRequest) GetPreHeader() string {
	if x != nil {
		return x.PreHeader
	}
	return ""
}

func (x *SetDefaultVerifyPhoneMessageTextRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SetDefaultVerifyPhoneMessageTextRequest) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *SetDefaultVerifyPhoneMessageTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SetDefaultVerifyPhoneMessageTextRequest) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *SetDefaultVerifyPhoneMessageTextRequest) GetFooterText() string {
	if x != nil {
		return x.FooterText
	}
	return ""
}

type SetDefaultVerifyPhoneMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetDefaultVerifyPhoneMessageTextResponse) Reset() {
	*x = SetDefaultVerifyPhoneMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultVerifyPhoneMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultVerifyPhoneMessageTextResponse) ProtoMessage() {}

func (x *SetDefaultVerifyPhoneMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultVerifyPhoneMessageTextResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultVerifyPhoneMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{140}
}

func (x *SetDefaultVerifyPhoneMessageTextResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetCustomVerifyPhoneMessageTextToDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultRequest) Reset() {
	*x = ResetCustomVerifyPhoneMessageTextToDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomVerifyPhoneMessageTextToDefaultRequest) ProtoMessage() {}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomVerifyPhoneMessageTextToDefaultRequest.ProtoReflect.Descriptor instead.
func (*ResetCustomVerifyPhoneMessageTextToDefaultRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{141}
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ResetCustomVerifyPhoneMessageTextToDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultResponse) Reset() {
	*x = ResetCustomVerifyPhoneMessageTextToDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomVerifyPhoneMessageTextToDefaultResponse) ProtoMessage() {}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomVerifyPhoneMessageTextToDefaultResponse.ProtoReflect.Descriptor instead.
func (*ResetCustomVerifyPhoneMessageTextToDefaultResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{142}
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetDefaultDomainClaimedMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetDefaultDomainClaimedMessageTextRequest) Reset() {
	*x = GetDefaultDomainClaimedMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultDomainClaimedMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultDomainClaimedMessageTextRequest) ProtoMessage() {}

func (x *GetDefaultDomainClaimedMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultDomainClaimedMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultDomainClaimedMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{143}
}

func (x *GetDefaultDomainClaimedMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetDefaultDomainClaimedMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetDefaultDomainClaimedMessageTextResponse) Reset() {
	*x = GetDefaultDomainClaimedMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultDomainClaimedMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultDomainClaimedMessageTextResponse) ProtoMessage() {}

func (x *GetDefaultDomainClaimedMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultDomainClaimedMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultDomainClaimedMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{144}
}

func (x *GetDefaultDomainClaimedMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type GetCustomDomainClaimedMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetCustomDomainClaimedMessageTextRequest) Reset() {
	*x = GetCustomDomainClaimedMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomDomainClaimedMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomDomainClaimedMessageTextRequest) ProtoMessage() {}

func (x *GetCustomDomainClaimedMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomDomainClaimedMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetCustomDomainClaimedMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{145}
}

func (x *GetCustomDomainClaimedMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetCustomDomainClaimedMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetCustomDomainClaimedMessageTextResponse) Reset() {
	*x = GetCustomDomainClaimedMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomDomainClaimedMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomDomainClaimedMessageTextResponse) ProtoMessage() {}

func (x *GetCustomDomainClaimedMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomDomainClaimedMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetCustomDomainClaimedMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{146}
}

func (x *GetCustomDomainClaimedMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type SetDefaultDomainClaimedMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language   string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PreHeader  string `protobuf:"bytes,3,opt,name=pre_header,json=preHeader,proto3" json:"pre_header,omitempty"`
	Subject    string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Greeting   string `protobuf:"bytes,5,opt,name=greeting,proto3" json:"greeting,omitempty"`
	Text       string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	ButtonText string `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	FooterText string `protobuf:"bytes,8,opt,name=footer_text,json=footerText,proto3" json:"footer_text,omitempty"`
}

func (x *SetDefaultDomainClaimedMessageTextRequest) Reset() {
	*x = SetDefaultDomainClaimedMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultDomainClaimedMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultDomainClaimedMessageTextRequest) ProtoMessage() {}

func (x *SetDefaultDomainClaimedMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultDomainClaimedMessageTextRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultDomainClaimedMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{147}
}

func (x *SetDefaultDomainClaimedMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SetDefaultDomainClaimedMessageTextRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SetDefaultDomainClaimedMessageTextRequest) GetPreHeader() string {
	if x != nil {
		return x.PreHeader
	}
	return ""
}

func (x *SetDefaultDomainClaimedMessageTextRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SetDefaultDomainClaimedMessageTextRequest) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *SetDefaultDomainClaimedMessageTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SetDefaultDomainClaimedMessageTextRequest) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *SetDefaultDomainClaimedMessageTextRequest) GetFooterText() string {
	if x != nil {
		return x.FooterText
	}
	return ""
}

type SetDefaultDomainClaimedMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetDefaultDomainClaimedMessageTextResponse) Reset() {
	*x = SetDefaultDomainClaimedMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultDomainClaimedMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultDomainClaimedMessageTextResponse) ProtoMessage() {}

func (x *SetDefaultDomainClaimedMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultDomainClaimedMessageTextResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultDomainClaimedMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{148}
}

func (x *SetDefaultDomainClaimedMessageTextResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetCustomDomainClaimedMessageTextToDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultRequest) Reset() {
	*x = ResetCustomDomainClaimedMessageTextToDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomDomainClaimedMessageTextToDefaultRequest) ProtoMessage() {}

func (x *ResetCustomDomainClaimedMessageTextToDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomDomainClaimedMessageTextToDefaultRequest.ProtoReflect.Descriptor instead.
func (*ResetCustomDomainClaimedMessageTextToDefaultRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{149}
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ResetCustomDomainClaimedMessageTextToDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultResponse) Reset() {
	*x = ResetCustomDomainClaimedMessageTextToDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomDomainClaimedMessageTextToDefaultResponse) ProtoMessage() {}

func (x *ResetCustomDomainClaimedMessageTextToDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomDomainClaimedMessageTextToDefaultResponse.ProtoReflect.Descriptor instead.
func (*ResetCustomDomainClaimedMessageTextToDefaultResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{150}
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetDefaultPasswordlessRegistrationMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetDefaultPasswordlessRegistrationMessageTextRequest) Reset() {
	*x = GetDefaultPasswordlessRegistrationMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultPasswordlessRegistrationMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultPasswordlessRegistrationMessageTextRequest) ProtoMessage() {}

func (x *GetDefaultPasswordlessRegistrationMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultPasswordlessRegistrationMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultPasswordlessRegistrationMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{151}
}

func (x *GetDefaultPasswordlessRegistrationMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetDefaultPasswordlessRegistrationMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetDefaultPasswordlessRegistrationMessageTextResponse) Reset() {
	*x = GetDefaultPasswordlessRegistrationMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultPasswordlessRegistrationMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultPasswordlessRegistrationMessageTextResponse) ProtoMessage() {}

func (x *GetDefaultPasswordlessRegistrationMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultPasswordlessRegistrationMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultPasswordlessRegistrationMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{152}
}

func (x *GetDefaultPasswordlessRegistrationMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type GetCustomPasswordlessRegistrationMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetCustomPasswordlessRegistrationMessageTextRequest) Reset() {
	*x = GetCustomPasswordlessRegistrationMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomPasswordlessRegistrationMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomPasswordlessRegistrationMessageTextRequest) ProtoMessage() {}

func (x *GetCustomPasswordlessRegistrationMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomPasswordlessRegistrationMessageTextRequest.ProtoReflect.Descriptor instead.
func (*GetCustomPasswordlessRegistrationMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{153}
}

func (x *GetCustomPasswordlessRegistrationMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetCustomPasswordlessRegistrationMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.MessageCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetCustomPasswordlessRegistrationMessageTextResponse) Reset() {
	*x = GetCustomPasswordlessRegistrationMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomPasswordlessRegistrationMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomPasswordlessRegistrationMessageTextResponse) ProtoMessage() {}

func (x *GetCustomPasswordlessRegistrationMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomPasswordlessRegistrationMessageTextResponse.ProtoReflect.Descriptor instead.
func (*GetCustomPasswordlessRegistrationMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{154}
}

func (x *GetCustomPasswordlessRegistrationMessageTextResponse) GetCustomText() *text.MessageCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type SetDefaultPasswordlessRegistrationMessageTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language   string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PreHeader  string `protobuf:"bytes,3,opt,name=pre_header,json=preHeader,proto3" json:"pre_header,omitempty"`
	Subject    string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Greeting   string `protobuf:"bytes,5,opt,name=greeting,proto3" json:"greeting,omitempty"`
	Text       string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	ButtonText string `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	FooterText string `protobuf:"bytes,8,opt,name=footer_text,json=footerText,proto3" json:"footer_text,omitempty"`
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) Reset() {
	*x = SetDefaultPasswordlessRegistrationMessageTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultPasswordlessRegistrationMessageTextRequest) ProtoMessage() {}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultPasswordlessRegistrationMessageTextRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultPasswordlessRegistrationMessageTextRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{155}
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) GetPreHeader() string {
	if x != nil {
		return x.PreHeader
	}
	return ""
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequest) GetFooterText() string {
	if x != nil {
		return x.FooterText
	}
	return ""
}

type SetDefaultPasswordlessRegistrationMessageTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetDefaultPasswordlessRegistrationMessageTextResponse) Reset() {
	*x = SetDefaultPasswordlessRegistrationMessageTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultPasswordlessRegistrationMessageTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultPasswordlessRegistrationMessageTextResponse) ProtoMessage() {}

func (x *SetDefaultPasswordlessRegistrationMessageTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultPasswordlessRegistrationMessageTextResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultPasswordlessRegistrationMessageTextResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{156}
}

func (x *SetDefaultPasswordlessRegistrationMessageTextResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) Reset() {
	*x = ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) ProtoMessage() {}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.ProtoReflect.Descriptor instead.
func (*ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{157}
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse) Reset() {
	*x = ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse) ProtoMessage() {}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.ProtoReflect.Descriptor instead.
func (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{158}
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetDefaultLoginTextsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetDefaultLoginTextsRequest) Reset() {
	*x = GetDefaultLoginTextsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultLoginTextsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultLoginTextsRequest) ProtoMessage() {}

func (x *GetDefaultLoginTextsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultLoginTextsRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultLoginTextsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{159}
}

func (x *GetDefaultLoginTextsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetDefaultLoginTextsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.LoginCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetDefaultLoginTextsResponse) Reset() {
	*x = GetDefaultLoginTextsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultLoginTextsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultLoginTextsResponse) ProtoMessage() {}

func (x *GetDefaultLoginTextsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultLoginTextsResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultLoginTextsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{160}
}

func (x *GetDefaultLoginTextsResponse) GetCustomText() *text.LoginCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type GetCustomLoginTextsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetCustomLoginTextsRequest) Reset() {
	*x = GetCustomLoginTextsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomLoginTextsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomLoginTextsRequest) ProtoMessage() {}

func (x *GetCustomLoginTextsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomLoginTextsRequest.ProtoReflect.Descriptor instead.
func (*GetCustomLoginTextsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{161}
}

func (x *GetCustomLoginTextsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetCustomLoginTextsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomText *text.LoginCustomText `protobuf:"bytes,1,opt,name=custom_text,json=customText,proto3" json:"custom_text,omitempty"`
}

func (x *GetCustomLoginTextsResponse) Reset() {
	*x = GetCustomLoginTextsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomLoginTextsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomLoginTextsResponse) ProtoMessage() {}

func (x *GetCustomLoginTextsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomLoginTextsResponse.ProtoReflect.Descriptor instead.
func (*GetCustomLoginTextsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{162}
}

func (x *GetCustomLoginTextsResponse) GetCustomText() *text.LoginCustomText {
	if x != nil {
		return x.CustomText
	}
	return nil
}

type SetCustomLoginTextsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language                             string                                           `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	SelectAccountText                    *text.SelectAccountScreenText                    `protobuf:"bytes,2,opt,name=select_account_text,json=selectAccountText,proto3" json:"select_account_text,omitempty"`
	LoginText                            *text.LoginScreenText                            `protobuf:"bytes,3,opt,name=login_text,json=loginText,proto3" json:"login_text,omitempty"`
	PasswordText                         *text.PasswordScreenText                         `protobuf:"bytes,4,opt,name=password_text,json=passwordText,proto3" json:"password_text,omitempty"`
	UsernameChangeText                   *text.UsernameChangeScreenText                   `protobuf:"bytes,5,opt,name=username_change_text,json=usernameChangeText,proto3" json:"username_change_text,omitempty"`
	UsernameChangeDoneText               *text.UsernameChangeDoneScreenText               `protobuf:"bytes,6,opt,name=username_change_done_text,json=usernameChangeDoneText,proto3" json:"username_change_done_text,omitempty"`
	InitPasswordText                     *text.InitPasswordScreenText                     `protobuf:"bytes,7,opt,name=init_password_text,json=initPasswordText,proto3" json:"init_password_text,omitempty"`
	InitPasswordDoneText                 *text.InitPasswordDoneScreenText                 `protobuf:"bytes,8,opt,name=init_password_done_text,json=initPasswordDoneText,proto3" json:"init_password_done_text,omitempty"`
	EmailVerificationText                *text.EmailVerificationScreenText                `protobuf:"bytes,9,opt,name=email_verification_text,json=emailVerificationText,proto3" json:"email_verification_text,omitempty"`
	EmailVerificationDoneText            *text.EmailVerificationDoneScreenText            `protobuf:"bytes,10,opt,name=email_verification_done_text,json=emailVerificationDoneText,proto3" json:"email_verification_done_text,omitempty"`
	InitializeUserText                   *text.InitializeUserScreenText                   `protobuf:"bytes,11,opt,name=initialize_user_text,json=initializeUserText,proto3" json:"initialize_user_text,omitempty"`
	InitializeDoneText                   *text.InitializeUserDoneScreenText               `protobuf:"bytes,12,opt,name=initialize_done_text,json=initializeDoneText,proto3" json:"initialize_done_text,omitempty"`
	InitMfaPromptText                    *text.InitMFAPromptScreenText                    `protobuf:"bytes,13,opt,name=init_mfa_prompt_text,json=initMfaPromptText,proto3" json:"init_mfa_prompt_text,omitempty"`
	InitMfaOtpText                       *text.InitMFAOTPScreenText                       `protobuf:"bytes,14,opt,name=init_mfa_otp_text,json=initMfaOtpText,proto3" json:"init_mfa_otp_text,omitempty"`
	InitMfaU2FText                       *text.InitMFAU2FScreenText                       `protobuf:"bytes,15,opt,name=init_mfa_u2f_text,json=initMfaU2fText,proto3" json:"init_mfa_u2f_text,omitempty"`
	InitMfaDoneText                      *text.InitMFADoneScreenText                      `protobuf:"bytes,16,opt,name=init_mfa_done_text,json=initMfaDoneText,proto3" json:"init_mfa_done_text,omitempty"`
	MfaProvidersText                     *text.MFAProvidersText                           `protobuf:"bytes,17,opt,name=mfa_providers_text,json=mfaProvidersText,proto3" json:"mfa_providers_text,omitempty"`
	VerifyMfaOtpText                     *text.VerifyMFAOTPScreenText                     `protobuf:"bytes,18,opt,name=verify_mfa_otp_text,json=verifyMfaOtpText,proto3" json:"verify_mfa_otp_text,omitempty"`
	VerifyMfaU2FText                     *text.VerifyMFAU2FScreenText                     `protobuf:"bytes,19,opt,name=verify_mfa_u2f_text,json=verifyMfaU2fText,proto3" json:"verify_mfa_u2f_text,omitempty"`
	PasswordlessText                     *text.PasswordlessScreenText                     `protobuf:"bytes,20,opt,name=passwordless_text,json=passwordlessText,proto3" json:"passwordless_text,omitempty"`
	PasswordChangeText                   *text.PasswordChangeScreenText                   `protobuf:"bytes,21,opt,name=password_change_text,json=passwordChangeText,proto3" json:"password_change_text,omitempty"`
	PasswordChangeDoneText               *text.PasswordChangeDoneScreenText               `protobuf:"bytes,22,opt,name=password_change_done_text,json=passwordChangeDoneText,proto3" json:"password_change_done_text,omitempty"`
	PasswordResetDoneText                *text.PasswordResetDoneScreenText                `protobuf:"bytes,23,opt,name=password_reset_done_text,json=passwordResetDoneText,proto3" json:"password_reset_done_text,omitempty"`
	RegistrationOptionText               *text.RegistrationOptionScreenText               `protobuf:"bytes,24,opt,name=registration_option_text,json=registrationOptionText,proto3" json:"registration_option_text,omitempty"`
	RegistrationUserText                 *text.RegistrationUserScreenText                 `protobuf:"bytes,25,opt,name=registration_user_text,json=registrationUserText,proto3" json:"registration_user_text,omitempty"`
	RegistrationOrgText                  *text.RegistrationOrgScreenText                  `protobuf:"bytes,26,opt,name=registration_org_text,json=registrationOrgText,proto3" json:"registration_org_text,omitempty"`
	LinkingUserDoneText                  *text.LinkingUserDoneScreenText                  `protobuf:"bytes,27,opt,name=linking_user_done_text,json=linkingUserDoneText,proto3" json:"linking_user_done_text,omitempty"`
	ExternalUserNotFoundText             *text.ExternalUserNotFoundScreenText             `protobuf:"bytes,28,opt,name=external_user_not_found_text,json=externalUserNotFoundText,proto3" json:"external_user_not_found_text,omitempty"`
	SuccessLoginText                     *text.SuccessLoginScreenText                     `protobuf:"bytes,29,opt,name=success_login_text,json=successLoginText,proto3" json:"success_login_text,omitempty"`
	LogoutText                           *text.LogoutDoneScreenText                       `protobuf:"bytes,30,opt,name=logout_text,json=logoutText,proto3" json:"logout_text,omitempty"`
	FooterText                           *text.FooterText                                 `protobuf:"bytes,31,opt,name=footer_text,json=footerText,proto3" json:"footer_text,omitempty"`
	PasswordlessPromptText               *text.PasswordlessPromptScreenText               `protobuf:"bytes,32,opt,name=passwordless_prompt_text,json=passwordlessPromptText,proto3" json:"passwordless_prompt_text,omitempty"`
	PasswordlessRegistrationText         *text.PasswordlessRegistrationScreenText         `protobuf:"bytes,33,opt,name=passwordless_registration_text,json=passwordlessRegistrationText,proto3" json:"passwordless_registration_text,omitempty"`
	PasswordlessRegistrationDoneText     *text.PasswordlessRegistrationDoneScreenText     `protobuf:"bytes,34,opt,name=passwordless_registration_done_text,json=passwordlessRegistrationDoneText,proto3" json:"passwordless_registration_done_text,omitempty"`
	ExternalRegistrationUserOverviewText *text.ExternalRegistrationUserOverviewScreenText `protobuf:"bytes,35,opt,name=external_registration_user_overview_text,json=externalRegistrationUserOverviewText,proto3" json:"external_registration_user_overview_text,omitempty"`
}

func (x *SetCustomLoginTextsRequest) Reset() {
	*x = SetCustomLoginTextsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCustomLoginTextsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCustomLoginTextsRequest) ProtoMessage() {}

func (x *SetCustomLoginTextsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCustomLoginTextsRequest.ProtoReflect.Descriptor instead.
func (*SetCustomLoginTextsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{163}
}

func (x *SetCustomLoginTextsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SetCustomLoginTextsRequest) GetSelectAccountText() *text.SelectAccountScreenText {
	if x != nil {
		return x.SelectAccountText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetLoginText() *text.LoginScreenText {
	if x != nil {
		return x.LoginText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetPasswordText() *text.PasswordScreenText {
	if x != nil {
		return x.PasswordText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetUsernameChangeText() *text.UsernameChangeScreenText {
	if x != nil {
		return x.UsernameChangeText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetUsernameChangeDoneText() *text.UsernameChangeDoneScreenText {
	if x != nil {
		return x.UsernameChangeDoneText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetInitPasswordText() *text.InitPasswordScreenText {
	if x != nil {
		return x.InitPasswordText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetInitPasswordDoneText() *text.InitPasswordDoneScreenText {
	if x != nil {
		return x.InitPasswordDoneText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetEmailVerificationText() *text.EmailVerificationScreenText {
	if x != nil {
		return x.EmailVerificationText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetEmailVerificationDoneText() *text.EmailVerificationDoneScreenText {
	if x != nil {
		return x.EmailVerificationDoneText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetInitializeUserText() *text.InitializeUserScreenText {
	if x != nil {
		return x.InitializeUserText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetInitializeDoneText() *text.InitializeUserDoneScreenText {
	if x != nil {
		return x.InitializeDoneText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetInitMfaPromptText() *text.InitMFAPromptScreenText {
	if x != nil {
		return x.InitMfaPromptText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetInitMfaOtpText() *text.InitMFAOTPScreenText {
	if x != nil {
		return x.InitMfaOtpText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetInitMfaU2FText() *text.InitMFAU2FScreenText {
	if x != nil {
		return x.InitMfaU2FText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetInitMfaDoneText() *text.InitMFADoneScreenText {
	if x != nil {
		return x.InitMfaDoneText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetMfaProvidersText() *text.MFAProvidersText {
	if x != nil {
		return x.MfaProvidersText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetVerifyMfaOtpText() *text.VerifyMFAOTPScreenText {
	if x != nil {
		return x.VerifyMfaOtpText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetVerifyMfaU2FText() *text.VerifyMFAU2FScreenText {
	if x != nil {
		return x.VerifyMfaU2FText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetPasswordlessText() *text.PasswordlessScreenText {
	if x != nil {
		return x.PasswordlessText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetPasswordChangeText() *text.PasswordChangeScreenText {
	if x != nil {
		return x.PasswordChangeText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetPasswordChangeDoneText() *text.PasswordChangeDoneScreenText {
	if x != nil {
		return x.PasswordChangeDoneText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetPasswordResetDoneText() *text.PasswordResetDoneScreenText {
	if x != nil {
		return x.PasswordResetDoneText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetRegistrationOptionText() *text.RegistrationOptionScreenText {
	if x != nil {
		return x.RegistrationOptionText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetRegistrationUserText() *text.RegistrationUserScreenText {
	if x != nil {
		return x.RegistrationUserText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetRegistrationOrgText() *text.RegistrationOrgScreenText {
	if x != nil {
		return x.RegistrationOrgText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetLinkingUserDoneText() *text.LinkingUserDoneScreenText {
	if x != nil {
		return x.LinkingUserDoneText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetExternalUserNotFoundText() *text.ExternalUserNotFoundScreenText {
	if x != nil {
		return x.ExternalUserNotFoundText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetSuccessLoginText() *text.SuccessLoginScreenText {
	if x != nil {
		return x.SuccessLoginText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetLogoutText() *text.LogoutDoneScreenText {
	if x != nil {
		return x.LogoutText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetFooterText() *text.FooterText {
	if x != nil {
		return x.FooterText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetPasswordlessPromptText() *text.PasswordlessPromptScreenText {
	if x != nil {
		return x.PasswordlessPromptText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetPasswordlessRegistrationText() *text.PasswordlessRegistrationScreenText {
	if x != nil {
		return x.PasswordlessRegistrationText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetPasswordlessRegistrationDoneText() *text.PasswordlessRegistrationDoneScreenText {
	if x != nil {
		return x.PasswordlessRegistrationDoneText
	}
	return nil
}

func (x *SetCustomLoginTextsRequest) GetExternalRegistrationUserOverviewText() *text.ExternalRegistrationUserOverviewScreenText {
	if x != nil {
		return x.ExternalRegistrationUserOverviewText
	}
	return nil
}

type SetCustomLoginTextsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetCustomLoginTextsResponse) Reset() {
	*x = SetCustomLoginTextsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCustomLoginTextsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCustomLoginTextsResponse) ProtoMessage() {}

func (x *SetCustomLoginTextsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCustomLoginTextsResponse.ProtoReflect.Descriptor instead.
func (*SetCustomLoginTextsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{164}
}

func (x *SetCustomLoginTextsResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetCustomLoginTextsToDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ResetCustomLoginTextsToDefaultRequest) Reset() {
	*x = ResetCustomLoginTextsToDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomLoginTextsToDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomLoginTextsToDefaultRequest) ProtoMessage() {}

func (x *ResetCustomLoginTextsToDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomLoginTextsToDefaultRequest.ProtoReflect.Descriptor instead.
func (*ResetCustomLoginTextsToDefaultRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{165}
}

func (x *ResetCustomLoginTextsToDefaultRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ResetCustomLoginTextsToDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetCustomLoginTextsToDefaultResponse) Reset() {
	*x = ResetCustomLoginTextsToDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomLoginTextsToDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomLoginTextsToDefaultResponse) ProtoMessage() {}

func (x *ResetCustomLoginTextsToDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomLoginTextsToDefaultResponse.ProtoReflect.Descriptor instead.
func (*ResetCustomLoginTextsToDefaultResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{166}
}

func (x *ResetCustomLoginTextsToDefaultResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type AddIAMMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	//if no roles provided the user won't have any rights
	Roles []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *AddIAMMemberRequest) Reset() {
	*x = AddIAMMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIAMMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIAMMemberRequest) ProtoMessage() {}

func (x *AddIAMMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIAMMemberRequest.ProtoReflect.Descriptor instead.
func (*AddIAMMemberRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{167}
}

func (x *AddIAMMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddIAMMemberRequest) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type AddIAMMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddIAMMemberResponse) Reset() {
	*x = AddIAMMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIAMMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIAMMemberResponse) ProtoMessage() {}

func (x *AddIAMMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIAMMemberResponse.ProtoReflect.Descriptor instead.
func (*AddIAMMemberResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{168}
}

func (x *AddIAMMemberResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type UpdateIAMMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	//if no roles provided the user won't have any rights
	Roles []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *UpdateIAMMemberRequest) Reset() {
	*x = UpdateIAMMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIAMMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIAMMemberRequest) ProtoMessage() {}

func (x *UpdateIAMMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIAMMemberRequest.ProtoReflect.Descriptor instead.
func (*UpdateIAMMemberRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{169}
}

func (x *UpdateIAMMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateIAMMemberRequest) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type UpdateIAMMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateIAMMemberResponse) Reset() {
	*x = UpdateIAMMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIAMMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIAMMemberResponse) ProtoMessage() {}

func (x *UpdateIAMMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIAMMemberResponse.ProtoReflect.Descriptor instead.
func (*UpdateIAMMemberResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{170}
}

func (x *UpdateIAMMemberResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveIAMMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RemoveIAMMemberRequest) Reset() {
	*x = RemoveIAMMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIAMMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIAMMemberRequest) ProtoMessage() {}

func (x *RemoveIAMMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIAMMemberRequest.ProtoReflect.Descriptor instead.
func (*RemoveIAMMemberRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{171}
}

func (x *RemoveIAMMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RemoveIAMMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveIAMMemberResponse) Reset() {
	*x = RemoveIAMMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIAMMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIAMMemberResponse) ProtoMessage() {}

func (x *RemoveIAMMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIAMMemberResponse.ProtoReflect.Descriptor instead.
func (*RemoveIAMMemberResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{172}
}

func (x *RemoveIAMMemberResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type ListIAMMemberRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListIAMMemberRolesRequest) Reset() {
	*x = ListIAMMemberRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIAMMemberRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIAMMemberRolesRequest) ProtoMessage() {}

func (x *ListIAMMemberRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIAMMemberRolesRequest.ProtoReflect.Descriptor instead.
func (*ListIAMMemberRolesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{173}
}

type ListIAMMemberRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ListDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Roles   []string            `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *ListIAMMemberRolesResponse) Reset() {
	*x = ListIAMMemberRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIAMMemberRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIAMMemberRolesResponse) ProtoMessage() {}

func (x *ListIAMMemberRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIAMMemberRolesResponse.ProtoReflect.Descriptor instead.
func (*ListIAMMemberRolesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{174}
}

func (x *ListIAMMemberRolesResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListIAMMemberRolesResponse) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type ListIAMMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//list limitations and ordering
	Query *object.ListQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	//criterias the client is looking for
	Queries []*member.SearchQuery `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ListIAMMembersRequest) Reset() {
	*x = ListIAMMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIAMMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIAMMembersRequest) ProtoMessage() {}

func (x *ListIAMMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIAMMembersRequest.ProtoReflect.Descriptor instead.
func (*ListIAMMembersRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{175}
}

func (x *ListIAMMembersRequest) GetQuery() *object.ListQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListIAMMembersRequest) GetQueries() []*member.SearchQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type ListIAMMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ListDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Result  []*member.Member    `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListIAMMembersResponse) Reset() {
	*x = ListIAMMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIAMMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIAMMembersResponse) ProtoMessage() {}

func (x *ListIAMMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIAMMembersResponse.ProtoReflect.Descriptor instead.
func (*ListIAMMembersResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{176}
}

func (x *ListIAMMembersResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListIAMMembersResponse) GetResult() []*member.Member {
	if x != nil {
		return x.Result
	}
	return nil
}

//This is an empty request
type ListViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListViewsRequest) Reset() {
	*x = ListViewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListViewsRequest) ProtoMessage() {}

func (x *ListViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListViewsRequest.ProtoReflect.Descriptor instead.
func (*ListViewsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{177}
}

type ListViewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//TODO: list details
	Result []*View `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListViewsResponse) Reset() {
	*x = ListViewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListViewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListViewsResponse) ProtoMessage() {}

func (x *ListViewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListViewsResponse.ProtoReflect.Descriptor instead.
func (*ListViewsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{178}
}

func (x *ListViewsResponse) GetResult() []*View {
	if x != nil {
		return x.Result
	}
	return nil
}

type ClearViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	ViewName string `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
}

func (x *ClearViewRequest) Reset() {
	*x = ClearViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearViewRequest) ProtoMessage() {}

func (x *ClearViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearViewRequest.ProtoReflect.Descriptor instead.
func (*ClearViewRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{179}
}

func (x *ClearViewRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClearViewRequest) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

//This is an empty response
type ClearViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearViewResponse) Reset() {
	*x = ClearViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearViewResponse) ProtoMessage() {}

func (x *ClearViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearViewResponse.ProtoReflect.Descriptor instead.
func (*ClearViewResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{180}
}

//This is an empty request
type ListFailedEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFailedEventsRequest) Reset() {
	*x = ListFailedEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFailedEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFailedEventsRequest) ProtoMessage() {}

func (x *ListFailedEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFailedEventsRequest.ProtoReflect.Descriptor instead.
func (*ListFailedEventsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{181}
}

type ListFailedEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//TODO: list details
	Result []*FailedEvent `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListFailedEventsResponse) Reset() {
	*x = ListFailedEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFailedEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFailedEventsResponse) ProtoMessage() {}

func (x *ListFailedEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFailedEventsResponse.ProtoReflect.Descriptor instead.
func (*ListFailedEventsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{182}
}

func (x *ListFailedEventsResponse) GetResult() []*FailedEvent {
	if x != nil {
		return x.Result
	}
	return nil
}

type RemoveFailedEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database       string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	ViewName       string `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	FailedSequence uint64 `protobuf:"varint,3,opt,name=failed_sequence,json=failedSequence,proto3" json:"failed_sequence,omitempty"`
}

func (x *RemoveFailedEventRequest) Reset() {
	*x = RemoveFailedEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFailedEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFailedEventRequest) ProtoMessage() {}

func (x *RemoveFailedEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFailedEventRequest.ProtoReflect.Descriptor instead.
func (*RemoveFailedEventRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{183}
}

func (x *RemoveFailedEventRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *RemoveFailedEventRequest) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *RemoveFailedEventRequest) GetFailedSequence() uint64 {
	if x != nil {
		return x.FailedSequence
	}
	return 0
}

//This is an empty response
type RemoveFailedEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveFailedEventResponse) Reset() {
	*x = RemoveFailedEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFailedEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFailedEventResponse) ProtoMessage() {}

func (x *RemoveFailedEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFailedEventResponse.ProtoReflect.Descriptor instead.
func (*RemoveFailedEventResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{184}
}

type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database                 string                 `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	ViewName                 string                 `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	ProcessedSequence        uint64                 `protobuf:"varint,3,opt,name=processed_sequence,json=processedSequence,proto3" json:"processed_sequence,omitempty"`
	EventTimestamp           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=event_timestamp,json=eventTimestamp,proto3" json:"event_timestamp,omitempty"` // The timestamp the event occured
	LastSuccessfulSpoolerRun *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_successful_spooler_run,json=lastSuccessfulSpoolerRun,proto3" json:"last_successful_spooler_run,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{185}
}

func (x *View) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *View) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *View) GetProcessedSequence() uint64 {
	if x != nil {
		return x.ProcessedSequence
	}
	return 0
}

func (x *View) GetEventTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTimestamp
	}
	return nil
}

func (x *View) GetLastSuccessfulSpoolerRun() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSuccessfulSpoolerRun
	}
	return nil
}

type FailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database       string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	ViewName       string `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	FailedSequence uint64 `protobuf:"varint,3,opt,name=failed_sequence,json=failedSequence,proto3" json:"failed_sequence,omitempty"`
	FailureCount   uint64 `protobuf:"varint,4,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	ErrorMessage   string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *FailedEvent) Reset() {
	*x = FailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedEvent) ProtoMessage() {}

func (x *FailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedEvent.ProtoReflect.Descriptor instead.
func (*FailedEvent) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{186}
}

func (x *FailedEvent) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *FailedEvent) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *FailedEvent) GetFailedSequence() uint64 {
	if x != nil {
		return x.FailedSequence
	}
	return 0
}

func (x *FailedEvent) GetFailureCount() uint64 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *FailedEvent) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type SetUpOrgRequest_Org struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *SetUpOrgRequest_Org) Reset() {
	*x = SetUpOrgRequest_Org{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest_Org) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest_Org) ProtoMessage() {}

func (x *SetUpOrgRequest_Org) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest_Org.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest_Org) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{10, 0}
}

func (x *SetUpOrgRequest_Org) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetUpOrgRequest_Org) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type SetUpOrgRequest_Human struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string                         `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Profile  *SetUpOrgRequest_Human_Profile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	Email    *SetUpOrgRequest_Human_Email   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone    *SetUpOrgRequest_Human_Phone   `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Password string                         `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SetUpOrgRequest_Human) Reset() {
	*x = SetUpOrgRequest_Human{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest_Human) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest_Human) ProtoMessage() {}

func (x *SetUpOrgRequest_Human) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest_Human.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest_Human) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{10, 1}
}

func (x *SetUpOrgRequest_Human) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SetUpOrgRequest_Human) GetProfile() *SetUpOrgRequest_Human_Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *SetUpOrgRequest_Human) GetEmail() *SetUpOrgRequest_Human_Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *SetUpOrgRequest_Human) GetPhone() *SetUpOrgRequest_Human_Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *SetUpOrgRequest_Human) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SetUpOrgRequest_Human_Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName         string      `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName          string      `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	NickName          string      `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	DisplayName       string      `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	PreferredLanguage string      `protobuf:"bytes,5,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	Gender            user.Gender `protobuf:"varint,6,opt,name=gender,proto3,enum=zitadel.user.v1.Gender" json:"gender,omitempty"`
}

func (x *SetUpOrgRequest_Human_Profile) Reset() {
	*x = SetUpOrgRequest_Human_Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest_Human_Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest_Human_Profile) ProtoMessage() {}

func (x *SetUpOrgRequest_Human_Profile) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest_Human_Profile.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest_Human_Profile) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{10, 1, 0}
}

func (x *SetUpOrgRequest_Human_Profile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Profile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Profile) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Profile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Profile) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Profile) GetGender() user.Gender {
	if x != nil {
		return x.Gender
	}
	return user.Gender(0)
}

type SetUpOrgRequest_Human_Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email           string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"` //TODO: check if no value is allowed
	IsEmailVerified bool   `protobuf:"varint,2,opt,name=is_email_verified,json=isEmailVerified,proto3" json:"is_email_verified,omitempty"`
}

func (x *SetUpOrgRequest_Human_Email) Reset() {
	*x = SetUpOrgRequest_Human_Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest_Human_Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest_Human_Email) ProtoMessage() {}

func (x *SetUpOrgRequest_Human_Email) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest_Human_Email.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest_Human_Email) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{10, 1, 1}
}

func (x *SetUpOrgRequest_Human_Email) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Email) GetIsEmailVerified() bool {
	if x != nil {
		return x.IsEmailVerified
	}
	return false
}

type SetUpOrgRequest_Human_Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// has to be a global number
	Phone           string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	IsPhoneVerified bool   `protobuf:"varint,2,opt,name=is_phone_verified,json=isPhoneVerified,proto3" json:"is_phone_verified,omitempty"`
}

func (x *SetUpOrgRequest_Human_Phone) Reset() {
	*x = SetUpOrgRequest_Human_Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest_Human_Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest_Human_Phone) ProtoMessage() {}

func (x *SetUpOrgRequest_Human_Phone) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest_Human_Phone.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest_Human_Phone) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{10, 1, 2}
}

func (x *SetUpOrgRequest_Human_Phone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Phone) GetIsPhoneVerified() bool {
	if x != nil {
		return x.IsPhoneVerified
	}
	return false
}

var File_zitadel_admin_proto protoreflect.FileDescriptor

var file_zitadel_admin_proto_rawDesc = []byte{
	0x0a, 0x13, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x69, 0x64, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10,
	0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x11, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x49, 0x73, 0x4f, 0x72, 0x67, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x92, 0x41, 0x11, 0x4a, 0x09, 0x22, 0x43, 0x41, 0x4f, 0x53, 0x20, 0x41, 0x47,
	0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x11, 0x4a, 0x09, 0x22, 0x63,
	0x61, 0x6f, 0x73, 0x2e, 0x63, 0x68, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x32, 0x24, 0x41, 0x6c,
	0x6c, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0x32, 0x0a, 0x13, 0x49, 0x73, 0x4f, 0x72, 0x67, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32,
	0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x6f,
	0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x03, 0x6f,
	0x72, 0x67, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x25, 0x92, 0x41,
	0x22, 0x0a, 0x20, 0x32, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0xd2, 0x01, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf1, 0x0e,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4f, 0x72, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x03, 0x6f, 0x72, 0x67, 0x12, 0x3f, 0x0a, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x05,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x1a, 0xde, 0x01, 0x0a, 0x03, 0x4f, 0x72, 0x67, 0x12, 0x32, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x11, 0x4a, 0x09, 0x22, 0x43, 0x41, 0x4f,
	0x53, 0x20, 0x41, 0x47, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x94, 0x01, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x7c, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x71, 0x32,
	0x61, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x20, 0x61, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x28, 0x3c, 0x6f, 0x72,
	0x67, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x3e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x29, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x4a, 0x09, 0x22, 0x63, 0x61, 0x6f, 0x73, 0x2e, 0x63, 0x68, 0x22, 0x78, 0xc8, 0x01,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2,
	0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xa2, 0x0b, 0x0a, 0x05, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x12, 0x40, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92,
	0x41, 0x16, 0x4a, 0x0e, 0x22, 0x6d, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x63,
	0x6b, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x2e, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92,
	0x41, 0x38, 0x32, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x4a, 0x14, 0x22, 0x6d, 0x79, 0x5f, 0x35, 0x33, 0x63, 0x72, 0x33, 0x74,
	0x2d, 0x50, 0x34, 0x24, 0x24, 0x77, 0x30, 0x72, 0x64, 0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0xa9, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x92, 0x41, 0x0e, 0x4a, 0x06, 0x22, 0x47, 0x69, 0x67, 0x69, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01,
	0x01, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x11, 0x4a, 0x09,
	0x22, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x69, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22, 0x6c, 0x6f, 0x6e, 0x67,
	0x5f, 0x6e, 0x65, 0x63, 0x6b, 0x22, 0x78, 0xc8, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7a, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x6f, 0x32, 0x5a, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x63, 0x61, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x20, 0x68, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5a, 0x49, 0x54, 0x41,
	0x44, 0x45, 0x4c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x73, 0x20, 0x22, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4a, 0x0e, 0x22, 0x47, 0x69, 0x67, 0x69, 0x20, 0x47, 0x69, 0x72, 0x61, 0x66,
	0x66, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x0a, 0x92, 0x41, 0x41, 0x32, 0x37, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x74, 0x61, 0x67, 0x20, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69,
	0x65, 0x74, 0x66, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2f, 0x72, 0x66, 0x63,
	0x33, 0x30, 0x36, 0x36, 0x4a, 0x04, 0x22, 0x65, 0x6e, 0x22, 0x78, 0x0a, 0x52, 0x11, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x3a, 0x1e, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0xd2, 0x01, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0xce, 0x01, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x89, 0x01, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x60, 0x01, 0x92, 0x41, 0x69, 0x32, 0x54, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x20, 0x28, 0x73, 0x70, 0x65, 0x63, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x65, 0x74, 0x66, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2f, 0x72, 0x66, 0x63, 0x32, 0x38, 0x32, 0x32, 0x23, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x33, 0x2e, 0x34, 0x2e, 0x31, 0x29, 0x4a, 0x0e, 0x22, 0x67,
	0x69, 0x67, 0x69, 0x40, 0x63, 0x61, 0x6f, 0x73, 0x2e, 0x63, 0x68, 0x22, 0x80, 0x01, 0x01, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x1a, 0xe7, 0x01, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8b, 0x01, 0xfa, 0x42,
	0x09, 0x72, 0x07, 0x10, 0x01, 0x18, 0x32, 0x3a, 0x01, 0x2b, 0x92, 0x41, 0x7c, 0x32, 0x61, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x20,
	0x28, 0x75, 0x73, 0x65, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x65, 0x74, 0x66, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2f, 0x72, 0x66, 0x63, 0x33, 0x39, 0x36, 0x36, 0x29,
	0x4a, 0x12, 0x22, 0x2b, 0x34, 0x31, 0x20, 0x37, 0x31, 0x20, 0x30, 0x30, 0x30, 0x20, 0x30, 0x30,
	0x20, 0x30, 0x30, 0x22, 0x78, 0x32, 0x80, 0x01, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 0x0d, 0x92, 0x41,
	0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3a, 0x2e, 0x92, 0x41, 0x2b,
	0x0a, 0x29, 0xd2, 0x01, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0xd2, 0x01, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x47, 0x92, 0x41, 0x44,
	0x0a, 0x42, 0x32, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73,
	0x65, 0x74, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0xd2, 0x01, 0x03, 0x6f, 0x72, 0x67, 0xd2, 0x01, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42,
	0x01, 0x22, 0x77, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x49, 0x44, 0x50, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x32,
	0x33, 0x34, 0x32, 0x33, 0x30, 0x31, 0x39, 0x33, 0x38, 0x37, 0x32, 0x39, 0x35, 0x35, 0x22, 0x78,
	0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x49, 0x44, 0x50, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x03, 0x69, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44,
	0x50, 0x52, 0x03, 0x69, 0x64, 0x70, 0x22, 0xb9, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x44, 0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x44, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x34, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x44, 0x50, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x08, 0x49, 0x44, 0x50, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x3e, 0x0a, 0x0c, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x70, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x44, 0x0a, 0x0e, 0x69, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x4e, 0x61, 0x6d, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xb7,
	0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x44, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbd, 0x08, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x4f, 0x49, 0x44, 0x43, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x10, 0x4a, 0x08, 0x22, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x98, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x53, 0x74, 0x79,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x55, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x92, 0x41, 0x4a, 0x32, 0x48, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x69,
	0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x0b, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x41, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x34, 0x32, 0x2c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x78, 0xc8, 0x01, 0x80,
	0x01, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x45, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92,
	0x41, 0x38, 0x32, 0x30, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x4c, 0x32, 0x28, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x69, 0x64,
	0x63, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4a, 0x1d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22,
	0x78, 0xc8, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x70, 0x92, 0x41,
	0x6d, 0x32, 0x4b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44,
	0x45, 0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1e,
	0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5d, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x4d, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x92, 0x41, 0x42, 0x32, 0x40, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x46, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0xd2, 0x01, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0xd2,
	0x01, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0xd2,
	0x01, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f,
	0x49, 0x44, 0x43, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x22, 0xc3, 0x06, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x4a, 0x57, 0x54, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x10, 0x4a, 0x08, 0x22, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x53, 0x74,
	0x79, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x55, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x92, 0x41, 0x4a, 0x32, 0x48, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c,
	0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7c, 0x0a,
	0x0c, 0x6a, 0x77, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x59, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92,
	0x41, 0x4c, 0x32, 0x2b, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6a, 0x77, 0x74, 0x20, 0x63,
	0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4a,
	0x1d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6a, 0x77, 0x74, 0x22, 0x52, 0x0b,
	0x6a, 0x77, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x47, 0x32, 0x26, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6a, 0x77,
	0x74, 0x20, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x29, 0x4a, 0x1d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x22, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x0d, 0x6b, 0x65,
	0x79, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x74, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x67,
	0x32, 0x41, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x28, 0x4a, 0x57, 0x4b, 0x29, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x4a, 0x22, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6b, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x5e, 0x32, 0x49, 0x74, 0x68, 0x65, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4a, 0x57, 0x54,
	0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x2c, 0x20, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0e, 0x22, 0x78, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x78, 0xc8, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20,
	0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0xd2, 0x01, 0x0d, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0x5f, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4a, 0x57, 0x54, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49,
	0x64, 0x22, 0xd9, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x92, 0x41, 0x10, 0x4a, 0x08, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x98, 0x01, 0x0a,
	0x0c, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x53, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x55, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x92, 0x41, 0x4a,
	0x32, 0x48, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x65, 0x69, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x74, 0x79, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x2f, 0x92, 0x41,
	0x2c, 0x0a, 0x2a, 0x32, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x70, 0xd2, 0x01, 0x06,
	0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x67, 0x0a, 0x14, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13,
	0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33,
	0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64,
	0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64,
	0x22, 0x4c, 0x0a, 0x15, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x67,
	0x0a, 0x14, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33,
	0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01,
	0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x63, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x64, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39,
	0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01,
	0x80, 0x01, 0x01, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a,
	0x09, 0xd2, 0x01, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x11, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0xad, 0x07, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x50, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92,
	0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36,
	0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x69,
	0x64, 0x70, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5c, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x92, 0x41, 0x4f, 0x32, 0x28, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x69, 0x64, 0x63, 0x20, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1d, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x78, 0xc8, 0x01, 0x80,
	0x01, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x34, 0x32, 0x2c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x68, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x5d, 0x32,
	0x58, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x78, 0xc8, 0x01, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x70, 0x92, 0x41, 0x6d,
	0x32, 0x4b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1e, 0x5b,
	0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5d, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x4d, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x92, 0x41, 0x42, 0x32, 0x40, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x46, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x92, 0x41, 0x3b, 0x32, 0x39, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x3a,
	0x23, 0x92, 0x41, 0x20, 0x0a, 0x1e, 0xd2, 0x01, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0xd2,
	0x01, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x50, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xaf, 0x05, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x4a, 0x57, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33,
	0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x0c, 0x6a, 0x77, 0x74, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x52, 0x32, 0x2b, 0x74,
	0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6a, 0x77, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4a, 0x1d, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x6a, 0x77, 0x74, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52,
	0x0b, 0x6a, 0x77, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x4d, 0x32, 0x26, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6a,
	0x77, 0x74, 0x20, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x29, 0x4a, 0x1d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x12, 0x9f, 0x01, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x6d, 0x32, 0x41, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79,
	0x20, 0x28, 0x4a, 0x57, 0x4b, 0x29, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x77, 0x69, 0x74, 0x68, 0x4a, 0x22, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x78, 0xc8,
	0x01, 0x80, 0x01, 0x01, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6b, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x5e, 0x32, 0x49, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x69, 0x73,
	0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x0e, 0x22, 0x78, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x78, 0xc8, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x3a, 0x27, 0x92, 0x41, 0x24, 0x0a, 0x22, 0xd2, 0x01, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69,
	0x64, 0xd2, 0x01, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0xd2, 0x01, 0x0d, 0x6b, 0x65, 0x79,
	0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x4a, 0x57, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1b, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x22, 0x87, 0x09, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08,
	0x74, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0xaa, 0x01, 0x02, 0x32, 0x00, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x70, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x1a,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x34,
	0x0a, 0x16, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x51, 0x0a,
	0x1a, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x3a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0x97, 0x0a, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x74, 0x69, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa,
	0x01, 0x02, 0x32, 0x00, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x70, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a,
	0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x16,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4d, 0x0a, 0x16, 0x53,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x3c, 0x0a, 0x17, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x55, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x51,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x70, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72,
	0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1c,
	0x4a, 0x14, 0x22, 0x23, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xed, 0x01, 0x0a,
	0x1c, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x23,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x7b, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x75,
	0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x0e, 0x92, 0x41,
	0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x1d,
	0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33,
	0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32,
	0x3c, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x27, 0x73,
	0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x7a, 0x0a,
	0x27, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49,
	0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30,
	0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80,
	0x01, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09,
	0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x28, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xf5,
	0x05, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x33, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x92, 0x41, 0x29, 0x32, 0x1a,
	0x72, 0x65, 0x73, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x09, 0x22, 0x23, 0x33, 0x35,
	0x33, 0x35, 0x33, 0x35, 0x22, 0x78, 0x32, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xf7, 0x01, 0x0a, 0x16, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0xc1, 0x01, 0x92, 0x41, 0xbd, 0x01, 0x32, 0xba, 0x01,
	0x68, 0x69, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x20, 0x22, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x22, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2e, 0x20, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x13, 0x68, 0x69, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12,
	0x26, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x09, 0x77, 0x61,
	0x72, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0a, 0x66,
	0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x3b, 0x0a, 0x15, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x64,
	0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x32, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x0f, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x0d, 0x66, 0x6f, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x50, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c,
	0x6f, 0x67, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x1d, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c,
	0x6f, 0x67, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x22, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x61, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1e,
	0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54,
	0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x63, 0x6f,
	0x6e, 0x44, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x54, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0xc6, 0x08, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x81, 0x01, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x44, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73,
	0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x68, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x15, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x72, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4b, 0x92, 0x41,
	0x48, 0x32, 0x46, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x61, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x12, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73,
	0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x20,
	0x61, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x20, 0x45, 0x2e, 0x67,
	0x2e, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x52, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x70, 0x12,
	0x55, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73,
	0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20,
	0x75, 0x73, 0x65, 0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x6e, 0x52, 0x08, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x4d, 0x66, 0x61, 0x12, 0x8b, 0x01, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x39, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x69, 0x73,
	0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x77, 0x0a, 0x13, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x47, 0x92, 0x41, 0x44, 0x32, 0x42, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x69, 0x66, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65,
	0x20, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x11, 0x68, 0x69, 0x64, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0xa9, 0x01,
	0x0a, 0x18, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x6f, 0x92, 0x41, 0x6c, 0x32, 0x6a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69,
	0x66, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x16, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x14, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6e, 0x92, 0x41, 0x6b, 0x32, 0x69, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x70, 0x70, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x6d, 0x61, 0x69, 0x6c, 0x29, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0x50, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x49,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x44, 0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x50,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44,
	0x50, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6d, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x49,
	0x44, 0x50, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33,
	0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x49, 0x44,
	0x50, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x72, 0x0a, 0x1f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x3a,
	0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x22,
	0x57, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x46, 0x72, 0x6f, 0x6d,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x96, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x78, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x5b, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x7d, 0x0a, 0x28, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x60,
	0x0a, 0x29, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x24, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x76, 0x0a,
	0x22, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20,
	0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x7b, 0x0a, 0x27, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5f,
	0x0a, 0x28, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x24, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0xc8, 0x03, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x08, 0x92, 0x41, 0x05, 0x4a, 0x03, 0x22, 0x38, 0x22, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3e, 0x92, 0x41, 0x3b,
	0x32, 0x39, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x70, 0x70, 0x65, 0x72, 0x20,
	0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x61, 0x73,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x68, 0x61, 0x73,
	0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x38, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d,
	0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52,
	0x0c, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x4d, 0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x5b, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x37, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61,
	0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x20, 0x45, 0x2e, 0x67, 0x2e, 0x20, 0x22, 0x24,
	0x22, 0x52, 0x09, 0x68, 0x61, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x5d, 0x0a, 0x26,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xfc, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x27, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20,
	0x64, 0x61, 0x79, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a,
	0x05, 0x22, 0x33, 0x36, 0x35, 0x22, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x58, 0x92,
	0x41, 0x55, 0x32, 0x4d, 0x44, 0x61, 0x79, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x4a, 0x04, 0x22, 0x31, 0x30, 0x22, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x22, 0x56, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0xf8, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0xd9, 0x01, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0xa4, 0x01, 0x92, 0x41, 0xa0, 0x01, 0x32, 0x97, 0x01, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x67, 0x65, 0x74, 0x73,
	0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x61, 0x73, 0x20, 0x73,
	0x6f, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2e,
	0x4a, 0x04, 0x22, 0x31, 0x30, 0x22, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x77, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6f, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x65, 0x6c, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x65, 0x6c, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x52, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4a, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x68, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x65, 0x78, 0x74, 0x22, 0x49, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x67,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x22, 0xda, 0x02, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x22,
	0x64, 0x65, 0x22, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x67, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1c, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29,
	0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x66, 0x6f, 0x6f,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x22, 0x58, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x54,
	0x0a, 0x2a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x2b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x53, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x71, 0x0a,
	0x2a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74,
	0x22, 0x52, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0x70, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x22, 0xe3, 0x02, 0x0a, 0x29, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x22, 0x64, 0x65, 0x22, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08,
	0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xa0, 0x06,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x29, 0x0a, 0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x61, 0x0a, 0x2a,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x5d, 0x0a, 0x33, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x6b,
	0x0a, 0x34, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x51, 0x0a, 0x27, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x6f,
	0x0a, 0x28, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x22,
	0x50, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x6e, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78,
	0x74, 0x22, 0xe1, 0x02, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x06, 0x4a, 0x04,
	0x22, 0x64, 0x65, 0x22, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x67,
	0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xa0, 0x06, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x29, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x66, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5f, 0x0a, 0x28, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5b, 0x0a, 0x31, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x32, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x51,
	0x0a, 0x27, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x6f, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65,
	0x78, 0x74, 0x22, 0x50, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x65, 0x78, 0x74, 0x22, 0xe1, 0x02, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41,
	0x06, 0x4a, 0x04, 0x22, 0x64, 0x65, 0x22, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24,
	0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xa0, 0x06, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a,
	0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x66, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5f, 0x0a, 0x28, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5b, 0x0a, 0x31, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x32, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x53, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x71, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x22, 0x52, 0x0a, 0x28, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x70, 0x0a,
	0x29, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x22,
	0xe3, 0x02, 0x0a, 0x29, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x06, 0x4a, 0x04,
	0x22, 0x64, 0x65, 0x22, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x67,
	0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xa0, 0x06, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x29, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x66, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x61, 0x0a, 0x2a, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5d, 0x0a, 0x33, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x34, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x5e, 0x0a, 0x34, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x35, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65,
	0x78, 0x74, 0x22, 0x5d, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x7b, 0x0a, 0x34, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x22, 0xee,
	0x02, 0x0a, 0x34, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x22, 0x64, 0x65, 0x22, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xa0, 0x06, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22,
	0x6c, 0x0a, 0x35, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x68, 0x0a,
	0x3e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x3f, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x45, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x22, 0x44, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0x60, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x82, 0x1a, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41,
	0x06, 0x4a, 0x04, 0x22, 0x64, 0x65, 0x22, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x0d,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x12, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a,
	0x12, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x62, 0x0a, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x64, 0x0a, 0x17, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x15, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x71,
	0x0a, 0x1c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x19, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x5b, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5f,
	0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6e,
	0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x59, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x66, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x4d, 0x46, 0x41, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x66, 0x61,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x6d, 0x66, 0x61, 0x5f, 0x6f, 0x74, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x46, 0x41, 0x4f,
	0x54, 0x50, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x69, 0x6e,
	0x69, 0x74, 0x4d, 0x66, 0x61, 0x4f, 0x74, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x50, 0x0a, 0x11,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x66, 0x61, 0x5f, 0x75, 0x32, 0x66, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x46,
	0x41, 0x55, 0x32, 0x46, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0e,
	0x69, 0x6e, 0x69, 0x74, 0x4d, 0x66, 0x61, 0x55, 0x32, 0x66, 0x54, 0x65, 0x78, 0x74, 0x12, 0x53,
	0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x66, 0x61, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x4d, 0x46, 0x41, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x66, 0x61, 0x44, 0x6f, 0x6e, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x6d, 0x66, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x46, 0x41, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x10, 0x6d, 0x66, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6d,
	0x66, 0x61, 0x5f, 0x6f, 0x74, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x46, 0x41, 0x4f, 0x54, 0x50,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4d, 0x66, 0x61, 0x4f, 0x74, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x13,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x66, 0x61, 0x5f, 0x75, 0x32, 0x66, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4d, 0x46, 0x41, 0x55, 0x32, 0x46, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x66, 0x61, 0x55, 0x32, 0x66,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x54, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x16, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x65, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x67, 0x0a, 0x18, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x61, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x14,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x5f, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6e,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x6f, 0x0a, 0x1c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x18, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x10, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x46, 0x0a,
	0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x6f,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x67, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x79, 0x0a, 0x1e,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x1c, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x23, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x93, 0x01, 0x0a, 0x28, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x22, 0x52, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4f, 0x0a, 0x25, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x26, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x7f, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41,
	0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a,
	0x0a, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30,
	0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x0f, 0x92, 0x41,
	0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x4e, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x6c, 0x0a,
	0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30,
	0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80,
	0x01, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a,
	0x0a, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x17, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22,
	0x7e, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x7e, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x12, 0x4a, 0x0a,
	0x22, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x15, 0x4a, 0x0d, 0x22, 0x69,
	0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01,
	0x01, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x1c, 0x92, 0x41, 0x19,
	0x0a, 0x17, 0xd2, 0x01, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0xd2, 0x01, 0x09,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x02, 0x0a,
	0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x12, 0x4a, 0x0a, 0x22, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x15, 0x4a, 0x0d, 0x22, 0x69, 0x61, 0x6d, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x08, 0x76,
	0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x39, 0x38, 0x32, 0x33, 0x37, 0x35, 0x38, 0x22,
	0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0xd2, 0x01, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0xd2, 0x01, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01,
	0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x03,
	0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x22, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x22, 0x69, 0x61,
	0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x39, 0x38, 0x32, 0x33, 0x37, 0x35, 0x38, 0x22,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x1f,
	0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x64, 0x4a,
	0x1d, 0x22, 0x32, 0x30, 0x31, 0x39, 0x2d, 0x30, 0x34, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x38, 0x3a,
	0x34, 0x35, 0x3a, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x7f,
	0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x5f, 0x73, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x65, 0x64, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x53, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x22,
	0xa7, 0x02, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x61, 0x70,
	0x69, 0x22, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x22, 0x69, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x22, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x39, 0x38,
	0x32, 0x33, 0x37, 0x35, 0x39, 0x22, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x92,
	0x41, 0x05, 0x4a, 0x03, 0x22, 0x35, 0x22, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x2a, 0x4a, 0x28, 0x22, 0x49, 0x44, 0x3d, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x2d, 0x49, 0x44, 0x33,
	0x45, 0x52, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3d, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xfd, 0xcf, 0x01, 0x0a, 0x0c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x12, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x92, 0x41,
	0x48, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x4a, 0x18, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x11, 0x0a, 0x0f, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x4a, 0x24, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x19,
	0x0a, 0x17, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x79, 0x65, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x69, 0x61,
	0x6d, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x8a, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x42, 0x79, 0x49, 0x44, 0x12, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x69, 0x61, 0x6d, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x92, 0x41, 0x8c, 0x01, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x0a, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x28, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x1c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x15, 0x0a, 0x13,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0xb5, 0x02, 0x0a, 0x0b, 0x49, 0x73, 0x4f, 0x72, 0x67, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x12, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4f, 0x72, 0x67, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4f,
	0x72, 0x67, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x82, 0xb5, 0x18, 0x0a, 0x0a,
	0x08, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xae, 0x01, 0x0a, 0x04, 0x6f,
	0x72, 0x67, 0x73, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x28, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x18, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x11, 0x0a, 0x0f, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x4a, 0x24, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x19, 0x0a, 0x17, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x4e, 0x4f, 0x54, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x79, 0x65, 0x74, 0x12, 0xd9, 0x02, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x85, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08,
	0x69, 0x61, 0x6d, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xdb, 0x01, 0x0a, 0x04, 0x6f, 0x72,
	0x67, 0x73, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x28, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x31, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x2a, 0x0a, 0x28, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x38, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xe9, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x55,
	0x70, 0x4f, 0x72, 0x67, 0x12, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x02, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x5f, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x09, 0x69, 0x61, 0x6d, 0x2e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xeb, 0x01, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x0a, 0x06,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x28, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x40, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x39, 0x0a,
	0x37, 0x6f, 0x72, 0x67, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x77,
	0x65, 0x72, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x32, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x6f,
	0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0xd4, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x44, 0x50, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x44, 0x50, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x44,
	0x50, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfa, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xd2, 0x01, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x2d, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x23, 0x57, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x5f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x12,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0b, 0x0a, 0x09, 0x69, 0x64, 0x70, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xd2, 0x02, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x44, 0x50, 0x73, 0x12, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x44, 0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x44, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfe,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0x69,
	0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xd0, 0x01, 0x0a,
	0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0x71, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x40, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63,
	0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x57, 0x68, 0x61, 0x74, 0x5f, 0x61,
	0x72, 0x65, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x13, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0c, 0x0a, 0x0a,
	0x69, 0x64, 0x70, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x33, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x2c, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0xe2, 0x02, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x44, 0x50, 0x12, 0x23,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x44,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x3a, 0x01,
	0x2a, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xdc, 0x01, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x0a, 0x04, 0x6f, 0x69, 0x64,
	0x63, 0x22, 0x73, 0x0a, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x6f, 0x69, 0x64, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63,
	0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x5f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x5f, 0x32, 0x5f, 0x30, 0x4a, 0x14, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0d, 0x0a,
	0x0b, 0x69, 0x64, 0x70, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x36, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0xe7, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4a, 0x57, 0x54, 0x49,
	0x44, 0x50, 0x12, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4a, 0x57, 0x54, 0x49, 0x44, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4a, 0x57, 0x54,
	0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x6a, 0x77, 0x74, 0x3a,
	0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x66, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x0a, 0x03, 0x6a, 0x77, 0x74,
	0x4a, 0x14, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0d, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a,
	0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xdb,
	0x02, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x12, 0x22, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x1a, 0x0e,
	0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01,
	0x2a, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xd4, 0x01, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x2d, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x23, 0x57, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x5f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x14,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0d, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xfc, 0x02, 0x0a,
	0x0d, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x12, 0x26,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x99, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xe0, 0x01, 0x0a, 0x11, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x71,
	0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x40, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x57, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x5f, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x4a, 0x18, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x11, 0x0a, 0x0f, 0x69, 0x64, 0x70, 0x20,
	0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x3e, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x69, 0x64, 0x70, 0x12, 0x1b,
	0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xfc, 0x02, 0x0a, 0x0d,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x12, 0x26, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99,
	0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xe0, 0x01, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x71, 0x0a,
	0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x23, 0x57, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x5f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x4a, 0x18, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x11, 0x0a, 0x0f, 0x69, 0x64, 0x70, 0x20, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x3e, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x69, 0x64, 0x70, 0x12, 0x1b, 0x0a,
	0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xdc, 0x02, 0x0a, 0x09, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x12, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x85, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x69, 0x64, 0x70,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d,
	0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xd8,
	0x01, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x57, 0x68, 0x61, 0x74,
	0x5f, 0x61, 0x72, 0x65, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x14, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0d,
	0x0a, 0x0b, 0x69, 0x64, 0x70, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4a, 0x3a, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x33, 0x0a, 0x14, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x69, 0x64, 0x70, 0x12, 0x1b, 0x0a, 0x19,
	0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xd0, 0x03, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x4f, 0x49,
	0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x4f, 0x49, 0x44, 0x43,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb,
	0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61, 0x6d, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x9f, 0x02, 0x0a, 0x11, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x22, 0x73, 0x0a, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x69, 0x64, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x44, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x32, 0x5f, 0x30, 0x4a, 0x1c, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x15, 0x0a, 0x13, 0x6f, 0x69, 0x64, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x32, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xd5, 0x02, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x4a, 0x57, 0x54, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50,
	0x4a, 0x57, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x4a, 0x57, 0x54,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x19, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x77, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61, 0x6d, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xa8, 0x01, 0x0a, 0x11, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x0a,
	0x03, 0x6a, 0x77, 0x74, 0x4a, 0x1b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x14, 0x0a, 0x12, 0x6a,
	0x77, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19,
	0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x39,
	0x12, 0x32, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x69,
	0x61, 0x6d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x9d, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x1a, 0x09, 0x2f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x69, 0x61,
	0x6d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x9f,
	0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x17, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x69, 0x61,
	0x6d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x12, 0xa2, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x82, 0xb5, 0x18,
	0x14, 0x0a, 0x12, 0x69, 0x61, 0x6d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0xc0, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x69, 0x61, 0x6d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69,
	0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41,
	0xa6, 0x01, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67,
	0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x23, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4a, 0x1f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x18,
	0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61,
	0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xd5, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x1a, 0x10, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6f,
	0x72, 0x67, 0x69, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41,
	0xae, 0x01, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67,
	0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x23, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x20,
	0x0a, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61,
	0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x8b, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72,
	0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x02, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6f, 0x72,
	0x67, 0x69, 0x61, 0x6d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xd1, 0x01, 0x0a, 0x0e, 0x6f,
	0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x41, 0x4d,
	0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4a, 0x4a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x43, 0x0a, 0x41, 0x6f, 0x72, 0x67,
	0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x69, 0x66, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x12, 0xe4,
	0x02, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49,
	0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x22, 0x1e, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x69,
	0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xa6, 0x01, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61,
	0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49,
	0x41, 0x4d, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4a, 0x1f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x18, 0x0a, 0x16, 0x6f,
	0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0xed, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x1a, 0x1e, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x69,
	0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xa6, 0x01, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61,
	0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49,
	0x41, 0x4d, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4a, 0x1f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x18, 0x0a, 0x16, 0x6f,
	0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0xa3, 0x03, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x87, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x69, 0x61, 0x6d, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11,
	0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x92, 0x41, 0xc6, 0x01, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a,
	0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4a, 0x3f, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x38, 0x0a, 0x36, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc9, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f,
	0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92,
	0x41, 0x35, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x1d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x16, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xe7, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x5f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0x35, 0x0a, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4a, 0x1d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x16, 0x0a, 0x14, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0xde, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x1a, 0x0f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12,
	0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x92, 0x41, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x25, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x1e, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0xaa, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22,
	0x19, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x2f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18,
	0x0e, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12,
	0xa8, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f,
	0x67, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f,
	0x67, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x2a, 0x14, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x19, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x67,
	0x6f, 0x44, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
	0x64, 0x61, 0x72, 0x6b, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x69, 0x63, 0x6f, 0x6e, 0x82,
	0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0xb9, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x72, 0x6b, 0x12,
	0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x2a, 0x19, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x2f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x82, 0xb5, 0x18, 0x0e, 0x0a,
	0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0xa8, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x46, 0x6f, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x2a, 0x14, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x2f, 0x66, 0x6f, 0x6e, 0x74, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0xae, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0x98,
	0x01, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x61, 0x0a, 0x2b, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x1d, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x16, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc3, 0x02, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x1a, 0x0f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xa0, 0x01, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x61, 0x0a, 0x2b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x25, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x1e, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0xfc, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x44, 0x50, 0x73, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x50, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x69,
	0x64, 0x70, 0x73, 0x2f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x82, 0xb5,
	0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x92, 0x41, 0xc7, 0x01, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x32, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x2b, 0x0a, 0x29, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xfb,
	0x02, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x49, 0x44, 0x50, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x44, 0x50,
	0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x44, 0x50, 0x54, 0x6f,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x86, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x69, 0x64,
	0x70, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xcd, 0x01, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x4a, 0x38, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x31, 0x0a, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x94, 0x03, 0x0a,
	0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x90, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41,
	0xd1, 0x01, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x3c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x35, 0x0a, 0x33,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x9c, 0x03, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8c, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xc5, 0x01, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x4a, 0x2f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x28, 0x0a, 0x26, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0xdf, 0x03, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xcf, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5,
	0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x8c, 0x02, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a,
	0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63,
	0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x34, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x2d, 0x0a, 0x2b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4a, 0x40, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x39, 0x0a, 0x1a, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0xf6, 0x03, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xd7, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x74, 0x79,
	0x70, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x90, 0x02, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x4a, 0x38, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x31, 0x0a, 0x2f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x40, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x39, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x96, 0x03,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x02, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x22, 0x25, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f,
	0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92,
	0x41, 0xc3, 0x01, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x2e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x27, 0x0a,
	0x25, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xd8, 0x03, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xcb, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5,
	0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x33, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x2c, 0x0a, 0x2a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4a, 0x3f, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0xfe, 0x03, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe2, 0x02,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x12,
	0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x92, 0x41, 0x9c, 0x02, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x38, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x31, 0x0a, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4a, 0x4d, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x46, 0x0a, 0x27, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x9d, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x34, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x90, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xd2, 0x01,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x22, 0x75,
	0x0a, 0x39, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x23, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x69, 0x74, 0x79, 0x4a, 0x2b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x22,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0xea, 0x03, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x37, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x1a, 0x1d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x92, 0x02, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x22, 0x75, 0x0a, 0x39, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69,
	0x74, 0x79, 0x4a, 0x33, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x2c, 0x0a, 0x2a, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f,
	0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0xfb, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41,
	0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0x4d,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x61, 0x67, 0x65, 0x4a, 0x24, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1d,
	0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x20, 0x61, 0x67, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc9, 0x02,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x3a,
	0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x8d, 0x01, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x61, 0x67, 0x65, 0x4a, 0x2c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x25, 0x0a, 0x23, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x61,
	0x67, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19,
	0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xd5, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0x39, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4a, 0x1f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x18, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0xaf, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x1a,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18,
	0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f,
	0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92,
	0x41, 0x42, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x4a, 0x1f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x18, 0x0a, 0x16, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0xad, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x1a, 0x11, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41,
	0x82, 0x01, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x1e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x36, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0xc8, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x2f,
	0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f,
	0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12,
	0xbd, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x69, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x2f,
	0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f,
	0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12,
	0xc4, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x32, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x1d,
	0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6e,
	0x69, 0x74, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x3a, 0x01, 0x2a,
	0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3c,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x7d, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xec, 0x01, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x3b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x64, 0x65, 0x61, 0x66, 0x75,
	0x6c, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0xe1, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3a,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12,
	0x26, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x7b, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0xe8, 0x01, 0x0a,
	0x22, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x3b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a, 0x26, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x3a, 0x01,
	0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x84, 0x02, 0x0a, 0x2c, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x46, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a,
	0x26, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x7b, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xe4,
	0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d,
	0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0xd9, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x38, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11,
	0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61,
	0x64, 0x12, 0xe0, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x1a, 0x24, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x82, 0xb5,
	0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0xfc, 0x01, 0x0a, 0x2a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x43, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x13,
	0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0xd9, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x38,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0xe0, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x1a, 0x24, 0x2f, 0x74, 0x65, 0x78,
	0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d,
	0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0xfc, 0x01, 0x0a, 0x2a, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x7d, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xec, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x3b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x12, 0x2e, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0xe1, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26,
	0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x2f, 0x7b, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0xe8, 0x01, 0x0a, 0x22,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x3b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a, 0x26, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x3a, 0x01, 0x2a,
	0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x84, 0x02, 0x0a, 0x2c, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a, 0x26,
	0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x2f, 0x7b, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x99, 0x02,
	0x0a, 0x2d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x46, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x8e, 0x02, 0x0a, 0x2c, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x45, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x46, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x12, 0x32, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x95, 0x02, 0x0a, 0x2d, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x46, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x1a, 0x32, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12,
	0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x12, 0xad, 0x02, 0x0a, 0x37, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x50,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x51, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x82,
	0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x12, 0x1e, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0xa7, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12,
	0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x11,
	0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61,
	0x64, 0x12, 0xaa, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0xc5,
	0x01, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x37, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xd8, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x22, 0x16, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x2f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69,
	0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41,
	0xaf, 0x01, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23,
	0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x4a, 0x25, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x1e, 0x0a, 0x1c, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x12, 0xc4, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x22, 0x10, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xaa, 0x01, 0x0a, 0x03,
	0x69, 0x61, 0x6d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x0a, 0x0a, 0x69, 0x61, 0x6d,
	0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x72, 0x0a, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x23, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x4a, 0x1b, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x14, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x12, 0x83, 0x03, 0x0a, 0x0c, 0x41, 0x64, 0x64,
	0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x22, 0x08, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5,
	0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xf6, 0x01, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x72, 0x0a, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x5a, 0x49, 0x54, 0x41, 0x44,
	0x45, 0x4c, 0x5f, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x4a, 0x20, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x19, 0x0a, 0x17,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x4a, 0x45, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x3e,
	0x0a, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8e,
	0x03, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x41, 0x4d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x1a, 0x12, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d,
	0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xee,
	0x01, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x0a, 0x0a,
	0x69, 0x61, 0x6d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x72, 0x0a, 0x2f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d,
	0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x23, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x73, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x4a, 0x22,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x19, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4a, 0x3b, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x83, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x41, 0x4d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x2a, 0x12, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x92, 0x41, 0xe5, 0x01,
	0x0a, 0x03, 0x69, 0x61, 0x6d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x0a, 0x0a, 0x69,
	0x61, 0x6d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x72, 0x0a, 0x2f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x23, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x4a, 0x22, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x19, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x4a, 0x32, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2b, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9a, 0x02, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x69, 0x61, 0x6d, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x92, 0x41, 0x9b, 0x01, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x6d,
	0x0a, 0x33, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x5a, 0x49, 0x54,
	0x41, 0x44, 0x45, 0x4c, 0x27, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x6e, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x36, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4a, 0x23, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x1c, 0x0a, 0x1a, 0x56, 0x69, 0x65, 0x77, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x9c, 0x02, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x7d, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x09, 0x69, 0x61, 0x6d, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x92, 0x41, 0x8d, 0x01, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x6d, 0x0a, 0x33, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x27, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e,
	0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x12, 0x36, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x23, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4a, 0x15, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x0e, 0x0a, 0x0c, 0x56, 0x69, 0x65, 0x77, 0x20, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x12, 0xd0, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe4, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x15, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x82, 0xb5, 0x18,
	0x0a, 0x0a, 0x08, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xb5, 0x01, 0x0a,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6d,
	0x0a, 0x33, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x5a, 0x49, 0x54,
	0x41, 0x44, 0x45, 0x4c, 0x27, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x6e, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x36, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4a, 0x35, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x2c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0xa3, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb4, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x7d, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x7b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x09, 0x69, 0x61, 0x6d, 0x2e, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x92, 0x41, 0xe3, 0x01, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x33, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x27, 0x73, 0x20, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x36, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4a, 0x25, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x1c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x4a, 0x3c, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x35, 0x0a, 0x16, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a,
	0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0xa8, 0x08, 0x5a, 0x29, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x92, 0x41, 0xf9, 0x07, 0x12, 0xe6, 0x01, 0x0a,
	0x1c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x61, 0x6b, 0x61, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x3c, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x49, 0x41, 0x4d, 0x20, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x2e, 0x22, 0x3f, 0x0a, 0x1a, 0x43,
	0x41, 0x4f, 0x53, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x12, 0x12, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x1a, 0x0d, 0x68,
	0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2a, 0x42, 0x0a, 0x0a,
	0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x62,
	0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x32, 0x03, 0x31, 0x2e, 0x30, 0x1a, 0x0e, 0x61, 0x70, 0x69, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x68, 0x22, 0x09, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31,
	0x2a, 0x02, 0x02, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x32, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x3a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x6d, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x66, 0x0a, 0x47, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68,
	0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x49, 0x0a, 0x2a, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0xff, 0x01, 0x0a, 0x0f, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x02, 0x08, 0x01, 0x0a, 0xeb, 0x01, 0x0a, 0x06, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x12, 0xe0, 0x01, 0x08, 0x03, 0x28, 0x04, 0x32, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x3a, 0x25, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x69, 0x6f, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x82, 0x01, 0x0a, 0x10, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a, 0x6e, 0x0a, 0x35, 0x75, 0x72, 0x6e, 0x3a, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x31, 0x30, 0x30, 0x39, 0x39, 0x32,
	0x30, 0x38, 0x35, 0x31, 0x35, 0x38, 0x35, 0x38, 0x34, 0x37, 0x38, 0x30, 0x3a, 0x61, 0x75, 0x64,
	0x12, 0x35, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61,
	0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64,
	0x3a, 0x31, 0x30, 0x30, 0x39, 0x39, 0x32, 0x30, 0x38, 0x35, 0x31, 0x35, 0x38, 0x35, 0x38, 0x34,
	0x37, 0x38, 0x30, 0x3a, 0x61, 0x75, 0x64, 0x62, 0x4b, 0x0a, 0x49, 0x0a, 0x06, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x12, 0x3f, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a, 0x35, 0x75,
	0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f,
	0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x31, 0x30,
	0x30, 0x39, 0x39, 0x32, 0x30, 0x38, 0x35, 0x31, 0x35, 0x38, 0x35, 0x38, 0x34, 0x37, 0x38, 0x30,
	0x3a, 0x61, 0x75, 0x64, 0x72, 0x3d, 0x0a, 0x22, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x12, 0x17, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x68, 0x7a, 0x20, 0x0a, 0x0f, 0x78, 0x2d, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2d, 0x6f, 0x72, 0x67, 0x69, 0x64, 0x12, 0x0d, 0x1a, 0x0b, 0x79, 0x6f, 0x75, 0x72, 0x2d, 0x6f,
	0x72, 0x67, 0x2d, 0x69, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_admin_proto_rawDescOnce sync.Once
	file_zitadel_admin_proto_rawDescData = file_zitadel_admin_proto_rawDesc
)

func file_zitadel_admin_proto_rawDescGZIP() []byte {
	file_zitadel_admin_proto_rawDescOnce.Do(func() {
		file_zitadel_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_admin_proto_rawDescData)
	})
	return file_zitadel_admin_proto_rawDescData
}

var file_zitadel_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 192)
var file_zitadel_admin_proto_goTypes = []interface{}{
	(*HealthzRequest)(nil),                                                  // 0: zitadel.admin.v1.HealthzRequest
	(*HealthzResponse)(nil),                                                 // 1: zitadel.admin.v1.HealthzResponse
	(*GetSupportedLanguagesRequest)(nil),                                    // 2: zitadel.admin.v1.GetSupportedLanguagesRequest
	(*GetSupportedLanguagesResponse)(nil),                                   // 3: zitadel.admin.v1.GetSupportedLanguagesResponse
	(*IsOrgUniqueRequest)(nil),                                              // 4: zitadel.admin.v1.IsOrgUniqueRequest
	(*IsOrgUniqueResponse)(nil),                                             // 5: zitadel.admin.v1.IsOrgUniqueResponse
	(*GetOrgByIDRequest)(nil),                                               // 6: zitadel.admin.v1.GetOrgByIDRequest
	(*GetOrgByIDResponse)(nil),                                              // 7: zitadel.admin.v1.GetOrgByIDResponse
	(*ListOrgsRequest)(nil),                                                 // 8: zitadel.admin.v1.ListOrgsRequest
	(*ListOrgsResponse)(nil),                                                // 9: zitadel.admin.v1.ListOrgsResponse
	(*SetUpOrgRequest)(nil),                                                 // 10: zitadel.admin.v1.SetUpOrgRequest
	(*SetUpOrgResponse)(nil),                                                // 11: zitadel.admin.v1.SetUpOrgResponse
	(*GetIDPByIDRequest)(nil),                                               // 12: zitadel.admin.v1.GetIDPByIDRequest
	(*GetIDPByIDResponse)(nil),                                              // 13: zitadel.admin.v1.GetIDPByIDResponse
	(*ListIDPsRequest)(nil),                                                 // 14: zitadel.admin.v1.ListIDPsRequest
	(*IDPQuery)(nil),                                                        // 15: zitadel.admin.v1.IDPQuery
	(*ListIDPsResponse)(nil),                                                // 16: zitadel.admin.v1.ListIDPsResponse
	(*AddOIDCIDPRequest)(nil),                                               // 17: zitadel.admin.v1.AddOIDCIDPRequest
	(*AddOIDCIDPResponse)(nil),                                              // 18: zitadel.admin.v1.AddOIDCIDPResponse
	(*AddJWTIDPRequest)(nil),                                                // 19: zitadel.admin.v1.AddJWTIDPRequest
	(*AddJWTIDPResponse)(nil),                                               // 20: zitadel.admin.v1.AddJWTIDPResponse
	(*UpdateIDPRequest)(nil),                                                // 21: zitadel.admin.v1.UpdateIDPRequest
	(*UpdateIDPResponse)(nil),                                               // 22: zitadel.admin.v1.UpdateIDPResponse
	(*DeactivateIDPRequest)(nil),                                            // 23: zitadel.admin.v1.DeactivateIDPRequest
	(*DeactivateIDPResponse)(nil),                                           // 24: zitadel.admin.v1.DeactivateIDPResponse
	(*ReactivateIDPRequest)(nil),                                            // 25: zitadel.admin.v1.ReactivateIDPRequest
	(*ReactivateIDPResponse)(nil),                                           // 26: zitadel.admin.v1.ReactivateIDPResponse
	(*RemoveIDPRequest)(nil),                                                // 27: zitadel.admin.v1.RemoveIDPRequest
	(*RemoveIDPResponse)(nil),                                               // 28: zitadel.admin.v1.RemoveIDPResponse
	(*UpdateIDPOIDCConfigRequest)(nil),                                      // 29: zitadel.admin.v1.UpdateIDPOIDCConfigRequest
	(*UpdateIDPOIDCConfigResponse)(nil),                                     // 30: zitadel.admin.v1.UpdateIDPOIDCConfigResponse
	(*UpdateIDPJWTConfigRequest)(nil),                                       // 31: zitadel.admin.v1.UpdateIDPJWTConfigRequest
	(*UpdateIDPJWTConfigResponse)(nil),                                      // 32: zitadel.admin.v1.UpdateIDPJWTConfigResponse
	(*GetDefaultFeaturesRequest)(nil),                                       // 33: zitadel.admin.v1.GetDefaultFeaturesRequest
	(*GetDefaultFeaturesResponse)(nil),                                      // 34: zitadel.admin.v1.GetDefaultFeaturesResponse
	(*SetDefaultFeaturesRequest)(nil),                                       // 35: zitadel.admin.v1.SetDefaultFeaturesRequest
	(*SetDefaultFeaturesResponse)(nil),                                      // 36: zitadel.admin.v1.SetDefaultFeaturesResponse
	(*GetOrgFeaturesRequest)(nil),                                           // 37: zitadel.admin.v1.GetOrgFeaturesRequest
	(*GetOrgFeaturesResponse)(nil),                                          // 38: zitadel.admin.v1.GetOrgFeaturesResponse
	(*SetOrgFeaturesRequest)(nil),                                           // 39: zitadel.admin.v1.SetOrgFeaturesRequest
	(*SetOrgFeaturesResponse)(nil),                                          // 40: zitadel.admin.v1.SetOrgFeaturesResponse
	(*ResetOrgFeaturesRequest)(nil),                                         // 41: zitadel.admin.v1.ResetOrgFeaturesRequest
	(*ResetOrgFeaturesResponse)(nil),                                        // 42: zitadel.admin.v1.ResetOrgFeaturesResponse
	(*GetOrgIAMPolicyRequest)(nil),                                          // 43: zitadel.admin.v1.GetOrgIAMPolicyRequest
	(*GetOrgIAMPolicyResponse)(nil),                                         // 44: zitadel.admin.v1.GetOrgIAMPolicyResponse
	(*UpdateOrgIAMPolicyRequest)(nil),                                       // 45: zitadel.admin.v1.UpdateOrgIAMPolicyRequest
	(*UpdateOrgIAMPolicyResponse)(nil),                                      // 46: zitadel.admin.v1.UpdateOrgIAMPolicyResponse
	(*GetCustomOrgIAMPolicyRequest)(nil),                                    // 47: zitadel.admin.v1.GetCustomOrgIAMPolicyRequest
	(*GetCustomOrgIAMPolicyResponse)(nil),                                   // 48: zitadel.admin.v1.GetCustomOrgIAMPolicyResponse
	(*AddCustomOrgIAMPolicyRequest)(nil),                                    // 49: zitadel.admin.v1.AddCustomOrgIAMPolicyRequest
	(*AddCustomOrgIAMPolicyResponse)(nil),                                   // 50: zitadel.admin.v1.AddCustomOrgIAMPolicyResponse
	(*UpdateCustomOrgIAMPolicyRequest)(nil),                                 // 51: zitadel.admin.v1.UpdateCustomOrgIAMPolicyRequest
	(*UpdateCustomOrgIAMPolicyResponse)(nil),                                // 52: zitadel.admin.v1.UpdateCustomOrgIAMPolicyResponse
	(*ResetCustomOrgIAMPolicyToDefaultRequest)(nil),                         // 53: zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultRequest
	(*ResetCustomOrgIAMPolicyToDefaultResponse)(nil),                        // 54: zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultResponse
	(*GetLabelPolicyRequest)(nil),                                           // 55: zitadel.admin.v1.GetLabelPolicyRequest
	(*GetLabelPolicyResponse)(nil),                                          // 56: zitadel.admin.v1.GetLabelPolicyResponse
	(*GetPreviewLabelPolicyRequest)(nil),                                    // 57: zitadel.admin.v1.GetPreviewLabelPolicyRequest
	(*GetPreviewLabelPolicyResponse)(nil),                                   // 58: zitadel.admin.v1.GetPreviewLabelPolicyResponse
	(*UpdateLabelPolicyRequest)(nil),                                        // 59: zitadel.admin.v1.UpdateLabelPolicyRequest
	(*UpdateLabelPolicyResponse)(nil),                                       // 60: zitadel.admin.v1.UpdateLabelPolicyResponse
	(*ActivateLabelPolicyRequest)(nil),                                      // 61: zitadel.admin.v1.ActivateLabelPolicyRequest
	(*ActivateLabelPolicyResponse)(nil),                                     // 62: zitadel.admin.v1.ActivateLabelPolicyResponse
	(*RemoveLabelPolicyLogoRequest)(nil),                                    // 63: zitadel.admin.v1.RemoveLabelPolicyLogoRequest
	(*RemoveLabelPolicyLogoResponse)(nil),                                   // 64: zitadel.admin.v1.RemoveLabelPolicyLogoResponse
	(*RemoveLabelPolicyLogoDarkRequest)(nil),                                // 65: zitadel.admin.v1.RemoveLabelPolicyLogoDarkRequest
	(*RemoveLabelPolicyLogoDarkResponse)(nil),                               // 66: zitadel.admin.v1.RemoveLabelPolicyLogoDarkResponse
	(*RemoveLabelPolicyIconRequest)(nil),                                    // 67: zitadel.admin.v1.RemoveLabelPolicyIconRequest
	(*RemoveLabelPolicyIconResponse)(nil),                                   // 68: zitadel.admin.v1.RemoveLabelPolicyIconResponse
	(*RemoveLabelPolicyIconDarkRequest)(nil),                                // 69: zitadel.admin.v1.RemoveLabelPolicyIconDarkRequest
	(*RemoveLabelPolicyIconDarkResponse)(nil),                               // 70: zitadel.admin.v1.RemoveLabelPolicyIconDarkResponse
	(*RemoveLabelPolicyFontRequest)(nil),                                    // 71: zitadel.admin.v1.RemoveLabelPolicyFontRequest
	(*RemoveLabelPolicyFontResponse)(nil),                                   // 72: zitadel.admin.v1.RemoveLabelPolicyFontResponse
	(*GetLoginPolicyRequest)(nil),                                           // 73: zitadel.admin.v1.GetLoginPolicyRequest
	(*GetLoginPolicyResponse)(nil),                                          // 74: zitadel.admin.v1.GetLoginPolicyResponse
	(*UpdateLoginPolicyRequest)(nil),                                        // 75: zitadel.admin.v1.UpdateLoginPolicyRequest
	(*UpdateLoginPolicyResponse)(nil),                                       // 76: zitadel.admin.v1.UpdateLoginPolicyResponse
	(*ListLoginPolicyIDPsRequest)(nil),                                      // 77: zitadel.admin.v1.ListLoginPolicyIDPsRequest
	(*ListLoginPolicyIDPsResponse)(nil),                                     // 78: zitadel.admin.v1.ListLoginPolicyIDPsResponse
	(*AddIDPToLoginPolicyRequest)(nil),                                      // 79: zitadel.admin.v1.AddIDPToLoginPolicyRequest
	(*AddIDPToLoginPolicyResponse)(nil),                                     // 80: zitadel.admin.v1.AddIDPToLoginPolicyResponse
	(*RemoveIDPFromLoginPolicyRequest)(nil),                                 // 81: zitadel.admin.v1.RemoveIDPFromLoginPolicyRequest
	(*RemoveIDPFromLoginPolicyResponse)(nil),                                // 82: zitadel.admin.v1.RemoveIDPFromLoginPolicyResponse
	(*ListLoginPolicySecondFactorsRequest)(nil),                             // 83: zitadel.admin.v1.ListLoginPolicySecondFactorsRequest
	(*ListLoginPolicySecondFactorsResponse)(nil),                            // 84: zitadel.admin.v1.ListLoginPolicySecondFactorsResponse
	(*AddSecondFactorToLoginPolicyRequest)(nil),                             // 85: zitadel.admin.v1.AddSecondFactorToLoginPolicyRequest
	(*AddSecondFactorToLoginPolicyResponse)(nil),                            // 86: zitadel.admin.v1.AddSecondFactorToLoginPolicyResponse
	(*RemoveSecondFactorFromLoginPolicyRequest)(nil),                        // 87: zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyRequest
	(*RemoveSecondFactorFromLoginPolicyResponse)(nil),                       // 88: zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyResponse
	(*ListLoginPolicyMultiFactorsRequest)(nil),                              // 89: zitadel.admin.v1.ListLoginPolicyMultiFactorsRequest
	(*ListLoginPolicyMultiFactorsResponse)(nil),                             // 90: zitadel.admin.v1.ListLoginPolicyMultiFactorsResponse
	(*AddMultiFactorToLoginPolicyRequest)(nil),                              // 91: zitadel.admin.v1.AddMultiFactorToLoginPolicyRequest
	(*AddMultiFactorToLoginPolicyResponse)(nil),                             // 92: zitadel.admin.v1.AddMultiFactorToLoginPolicyResponse
	(*RemoveMultiFactorFromLoginPolicyRequest)(nil),                         // 93: zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyRequest
	(*RemoveMultiFactorFromLoginPolicyResponse)(nil),                        // 94: zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyResponse
	(*GetPasswordComplexityPolicyRequest)(nil),                              // 95: zitadel.admin.v1.GetPasswordComplexityPolicyRequest
	(*GetPasswordComplexityPolicyResponse)(nil),                             // 96: zitadel.admin.v1.GetPasswordComplexityPolicyResponse
	(*UpdatePasswordComplexityPolicyRequest)(nil),                           // 97: zitadel.admin.v1.UpdatePasswordComplexityPolicyRequest
	(*UpdatePasswordComplexityPolicyResponse)(nil),                          // 98: zitadel.admin.v1.UpdatePasswordComplexityPolicyResponse
	(*GetPasswordAgePolicyRequest)(nil),                                     // 99: zitadel.admin.v1.GetPasswordAgePolicyRequest
	(*GetPasswordAgePolicyResponse)(nil),                                    // 100: zitadel.admin.v1.GetPasswordAgePolicyResponse
	(*UpdatePasswordAgePolicyRequest)(nil),                                  // 101: zitadel.admin.v1.UpdatePasswordAgePolicyRequest
	(*UpdatePasswordAgePolicyResponse)(nil),                                 // 102: zitadel.admin.v1.UpdatePasswordAgePolicyResponse
	(*GetLockoutPolicyRequest)(nil),                                         // 103: zitadel.admin.v1.GetLockoutPolicyRequest
	(*GetLockoutPolicyResponse)(nil),                                        // 104: zitadel.admin.v1.GetLockoutPolicyResponse
	(*UpdateLockoutPolicyRequest)(nil),                                      // 105: zitadel.admin.v1.UpdateLockoutPolicyRequest
	(*UpdateLockoutPolicyResponse)(nil),                                     // 106: zitadel.admin.v1.UpdateLockoutPolicyResponse
	(*GetPrivacyPolicyRequest)(nil),                                         // 107: zitadel.admin.v1.GetPrivacyPolicyRequest
	(*GetPrivacyPolicyResponse)(nil),                                        // 108: zitadel.admin.v1.GetPrivacyPolicyResponse
	(*UpdatePrivacyPolicyRequest)(nil),                                      // 109: zitadel.admin.v1.UpdatePrivacyPolicyRequest
	(*UpdatePrivacyPolicyResponse)(nil),                                     // 110: zitadel.admin.v1.UpdatePrivacyPolicyResponse
	(*GetDefaultInitMessageTextRequest)(nil),                                // 111: zitadel.admin.v1.GetDefaultInitMessageTextRequest
	(*GetDefaultInitMessageTextResponse)(nil),                               // 112: zitadel.admin.v1.GetDefaultInitMessageTextResponse
	(*GetCustomInitMessageTextRequest)(nil),                                 // 113: zitadel.admin.v1.GetCustomInitMessageTextRequest
	(*GetCustomInitMessageTextResponse)(nil),                                // 114: zitadel.admin.v1.GetCustomInitMessageTextResponse
	(*SetDefaultInitMessageTextRequest)(nil),                                // 115: zitadel.admin.v1.SetDefaultInitMessageTextRequest
	(*SetDefaultInitMessageTextResponse)(nil),                               // 116: zitadel.admin.v1.SetDefaultInitMessageTextResponse
	(*ResetCustomInitMessageTextToDefaultRequest)(nil),                      // 117: zitadel.admin.v1.ResetCustomInitMessageTextToDefaultRequest
	(*ResetCustomInitMessageTextToDefaultResponse)(nil),                     // 118: zitadel.admin.v1.ResetCustomInitMessageTextToDefaultResponse
	(*GetDefaultPasswordResetMessageTextRequest)(nil),                       // 119: zitadel.admin.v1.GetDefaultPasswordResetMessageTextRequest
	(*GetDefaultPasswordResetMessageTextResponse)(nil),                      // 120: zitadel.admin.v1.GetDefaultPasswordResetMessageTextResponse
	(*GetCustomPasswordResetMessageTextRequest)(nil),                        // 121: zitadel.admin.v1.GetCustomPasswordResetMessageTextRequest
	(*GetCustomPasswordResetMessageTextResponse)(nil),                       // 122: zitadel.admin.v1.GetCustomPasswordResetMessageTextResponse
	(*SetDefaultPasswordResetMessageTextRequest)(nil),                       // 123: zitadel.admin.v1.SetDefaultPasswordResetMessageTextRequest
	(*SetDefaultPasswordResetMessageTextResponse)(nil),                      // 124: zitadel.admin.v1.SetDefaultPasswordResetMessageTextResponse
	(*ResetCustomPasswordResetMessageTextToDefaultRequest)(nil),             // 125: zitadel.admin.v1.ResetCustomPasswordResetMessageTextToDefaultRequest
	(*ResetCustomPasswordResetMessageTextToDefaultResponse)(nil),            // 126: zitadel.admin.v1.ResetCustomPasswordResetMessageTextToDefaultResponse
	(*GetDefaultVerifyEmailMessageTextRequest)(nil),                         // 127: zitadel.admin.v1.GetDefaultVerifyEmailMessageTextRequest
	(*GetDefaultVerifyEmailMessageTextResponse)(nil),                        // 128: zitadel.admin.v1.GetDefaultVerifyEmailMessageTextResponse
	(*GetCustomVerifyEmailMessageTextRequest)(nil),                          // 129: zitadel.admin.v1.GetCustomVerifyEmailMessageTextRequest
	(*GetCustomVerifyEmailMessageTextResponse)(nil),                         // 130: zitadel.admin.v1.GetCustomVerifyEmailMessageTextResponse
	(*SetDefaultVerifyEmailMessageTextRequest)(nil),                         // 131: zitadel.admin.v1.SetDefaultVerifyEmailMessageTextRequest
	(*SetDefaultVerifyEmailMessageTextResponse)(nil),                        // 132: zitadel.admin.v1.SetDefaultVerifyEmailMessageTextResponse
	(*ResetCustomVerifyEmailMessageTextToDefaultRequest)(nil),               // 133: zitadel.admin.v1.ResetCustomVerifyEmailMessageTextToDefaultRequest
	(*ResetCustomVerifyEmailMessageTextToDefaultResponse)(nil),              // 134: zitadel.admin.v1.ResetCustomVerifyEmailMessageTextToDefaultResponse
	(*GetDefaultVerifyPhoneMessageTextRequest)(nil),                         // 135: zitadel.admin.v1.GetDefaultVerifyPhoneMessageTextRequest
	(*GetDefaultVerifyPhoneMessageTextResponse)(nil),                        // 136: zitadel.admin.v1.GetDefaultVerifyPhoneMessageTextResponse
	(*GetCustomVerifyPhoneMessageTextRequest)(nil),                          // 137: zitadel.admin.v1.GetCustomVerifyPhoneMessageTextRequest
	(*GetCustomVerifyPhoneMessageTextResponse)(nil),                         // 138: zitadel.admin.v1.GetCustomVerifyPhoneMessageTextResponse
	(*SetDefaultVerifyPhoneMessageTextRequest)(nil),                         // 139: zitadel.admin.v1.SetDefaultVerifyPhoneMessageTextRequest
	(*SetDefaultVerifyPhoneMessageTextResponse)(nil),                        // 140: zitadel.admin.v1.SetDefaultVerifyPhoneMessageTextResponse
	(*ResetCustomVerifyPhoneMessageTextToDefaultRequest)(nil),               // 141: zitadel.admin.v1.ResetCustomVerifyPhoneMessageTextToDefaultRequest
	(*ResetCustomVerifyPhoneMessageTextToDefaultResponse)(nil),              // 142: zitadel.admin.v1.ResetCustomVerifyPhoneMessageTextToDefaultResponse
	(*GetDefaultDomainClaimedMessageTextRequest)(nil),                       // 143: zitadel.admin.v1.GetDefaultDomainClaimedMessageTextRequest
	(*GetDefaultDomainClaimedMessageTextResponse)(nil),                      // 144: zitadel.admin.v1.GetDefaultDomainClaimedMessageTextResponse
	(*GetCustomDomainClaimedMessageTextRequest)(nil),                        // 145: zitadel.admin.v1.GetCustomDomainClaimedMessageTextRequest
	(*GetCustomDomainClaimedMessageTextResponse)(nil),                       // 146: zitadel.admin.v1.GetCustomDomainClaimedMessageTextResponse
	(*SetDefaultDomainClaimedMessageTextRequest)(nil),                       // 147: zitadel.admin.v1.SetDefaultDomainClaimedMessageTextRequest
	(*SetDefaultDomainClaimedMessageTextResponse)(nil),                      // 148: zitadel.admin.v1.SetDefaultDomainClaimedMessageTextResponse
	(*ResetCustomDomainClaimedMessageTextToDefaultRequest)(nil),             // 149: zitadel.admin.v1.ResetCustomDomainClaimedMessageTextToDefaultRequest
	(*ResetCustomDomainClaimedMessageTextToDefaultResponse)(nil),            // 150: zitadel.admin.v1.ResetCustomDomainClaimedMessageTextToDefaultResponse
	(*GetDefaultPasswordlessRegistrationMessageTextRequest)(nil),            // 151: zitadel.admin.v1.GetDefaultPasswordlessRegistrationMessageTextRequest
	(*GetDefaultPasswordlessRegistrationMessageTextResponse)(nil),           // 152: zitadel.admin.v1.GetDefaultPasswordlessRegistrationMessageTextResponse
	(*GetCustomPasswordlessRegistrationMessageTextRequest)(nil),             // 153: zitadel.admin.v1.GetCustomPasswordlessRegistrationMessageTextRequest
	(*GetCustomPasswordlessRegistrationMessageTextResponse)(nil),            // 154: zitadel.admin.v1.GetCustomPasswordlessRegistrationMessageTextResponse
	(*SetDefaultPasswordlessRegistrationMessageTextRequest)(nil),            // 155: zitadel.admin.v1.SetDefaultPasswordlessRegistrationMessageTextRequest
	(*SetDefaultPasswordlessRegistrationMessageTextResponse)(nil),           // 156: zitadel.admin.v1.SetDefaultPasswordlessRegistrationMessageTextResponse
	(*ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest)(nil),  // 157: zitadel.admin.v1.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest
	(*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse)(nil), // 158: zitadel.admin.v1.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse
	(*GetDefaultLoginTextsRequest)(nil),                                     // 159: zitadel.admin.v1.GetDefaultLoginTextsRequest
	(*GetDefaultLoginTextsResponse)(nil),                                    // 160: zitadel.admin.v1.GetDefaultLoginTextsResponse
	(*GetCustomLoginTextsRequest)(nil),                                      // 161: zitadel.admin.v1.GetCustomLoginTextsRequest
	(*GetCustomLoginTextsResponse)(nil),                                     // 162: zitadel.admin.v1.GetCustomLoginTextsResponse
	(*SetCustomLoginTextsRequest)(nil),                                      // 163: zitadel.admin.v1.SetCustomLoginTextsRequest
	(*SetCustomLoginTextsResponse)(nil),                                     // 164: zitadel.admin.v1.SetCustomLoginTextsResponse
	(*ResetCustomLoginTextsToDefaultRequest)(nil),                           // 165: zitadel.admin.v1.ResetCustomLoginTextsToDefaultRequest
	(*ResetCustomLoginTextsToDefaultResponse)(nil),                          // 166: zitadel.admin.v1.ResetCustomLoginTextsToDefaultResponse
	(*AddIAMMemberRequest)(nil),                                             // 167: zitadel.admin.v1.AddIAMMemberRequest
	(*AddIAMMemberResponse)(nil),                                            // 168: zitadel.admin.v1.AddIAMMemberResponse
	(*UpdateIAMMemberRequest)(nil),                                          // 169: zitadel.admin.v1.UpdateIAMMemberRequest
	(*UpdateIAMMemberResponse)(nil),                                         // 170: zitadel.admin.v1.UpdateIAMMemberResponse
	(*RemoveIAMMemberRequest)(nil),                                          // 171: zitadel.admin.v1.RemoveIAMMemberRequest
	(*RemoveIAMMemberResponse)(nil),                                         // 172: zitadel.admin.v1.RemoveIAMMemberResponse
	(*ListIAMMemberRolesRequest)(nil),                                       // 173: zitadel.admin.v1.ListIAMMemberRolesRequest
	(*ListIAMMemberRolesResponse)(nil),                                      // 174: zitadel.admin.v1.ListIAMMemberRolesResponse
	(*ListIAMMembersRequest)(nil),                                           // 175: zitadel.admin.v1.ListIAMMembersRequest
	(*ListIAMMembersResponse)(nil),                                          // 176: zitadel.admin.v1.ListIAMMembersResponse
	(*ListViewsRequest)(nil),                                                // 177: zitadel.admin.v1.ListViewsRequest
	(*ListViewsResponse)(nil),                                               // 178: zitadel.admin.v1.ListViewsResponse
	(*ClearViewRequest)(nil),                                                // 179: zitadel.admin.v1.ClearViewRequest
	(*ClearViewResponse)(nil),                                               // 180: zitadel.admin.v1.ClearViewResponse
	(*ListFailedEventsRequest)(nil),                                         // 181: zitadel.admin.v1.ListFailedEventsRequest
	(*ListFailedEventsResponse)(nil),                                        // 182: zitadel.admin.v1.ListFailedEventsResponse
	(*RemoveFailedEventRequest)(nil),                                        // 183: zitadel.admin.v1.RemoveFailedEventRequest
	(*RemoveFailedEventResponse)(nil),                                       // 184: zitadel.admin.v1.RemoveFailedEventResponse
	(*View)(nil),                                                            // 185: zitadel.admin.v1.View
	(*FailedEvent)(nil),                                                     // 186: zitadel.admin.v1.FailedEvent
	(*SetUpOrgRequest_Org)(nil),                                             // 187: zitadel.admin.v1.SetUpOrgRequest.Org
	(*SetUpOrgRequest_Human)(nil),                                           // 188: zitadel.admin.v1.SetUpOrgRequest.Human
	(*SetUpOrgRequest_Human_Profile)(nil),                                   // 189: zitadel.admin.v1.SetUpOrgRequest.Human.Profile
	(*SetUpOrgRequest_Human_Email)(nil),                                     // 190: zitadel.admin.v1.SetUpOrgRequest.Human.Email
	(*SetUpOrgRequest_Human_Phone)(nil),                                     // 191: zitadel.admin.v1.SetUpOrgRequest.Human.Phone
	(*org.Org)(nil),                                                         // 192: zitadel.org.v1.Org
	(*object.ListQuery)(nil),                                                // 193: zitadel.v1.ListQuery
	(org.OrgFieldName)(0),                                                   // 194: zitadel.org.v1.OrgFieldName
	(*org.OrgQuery)(nil),                                                    // 195: zitadel.org.v1.OrgQuery
	(*object.ListDetails)(nil),                                              // 196: zitadel.v1.ListDetails
	(*object.ObjectDetails)(nil),                                            // 197: zitadel.v1.ObjectDetails
	(*idp.IDP)(nil),                                                         // 198: zitadel.idp.v1.IDP
	(idp.IDPFieldName)(0),                                                   // 199: zitadel.idp.v1.IDPFieldName
	(*idp.IDPIDQuery)(nil),                                                  // 200: zitadel.idp.v1.IDPIDQuery
	(*idp.IDPNameQuery)(nil),                                                // 201: zitadel.idp.v1.IDPNameQuery
	(idp.IDPStylingType)(0),                                                 // 202: zitadel.idp.v1.IDPStylingType
	(idp.OIDCMappingField)(0),                                               // 203: zitadel.idp.v1.OIDCMappingField
	(*features.Features)(nil),                                               // 204: zitadel.features.v1.Features
	(*durationpb.Duration)(nil),                                             // 205: google.protobuf.Duration
	(features.ActionsAllowed)(0),                                            // 206: zitadel.features.v1.ActionsAllowed
	(features.FeaturesState)(0),                                             // 207: zitadel.features.v1.FeaturesState
	(*policy.OrgIAMPolicy)(nil),                                             // 208: zitadel.policy.v1.OrgIAMPolicy
	(*policy.LabelPolicy)(nil),                                              // 209: zitadel.policy.v1.LabelPolicy
	(*policy.LoginPolicy)(nil),                                              // 210: zitadel.policy.v1.LoginPolicy
	(policy.PasswordlessType)(0),                                            // 211: zitadel.policy.v1.PasswordlessType
	(*idp.IDPLoginPolicyLink)(nil),                                          // 212: zitadel.idp.v1.IDPLoginPolicyLink
	(policy.SecondFactorType)(0),                                            // 213: zitadel.policy.v1.SecondFactorType
	(policy.MultiFactorType)(0),                                             // 214: zitadel.policy.v1.MultiFactorType
	(*policy.PasswordComplexityPolicy)(nil),                                 // 215: zitadel.policy.v1.PasswordComplexityPolicy
	(*policy.PasswordAgePolicy)(nil),                                        // 216: zitadel.policy.v1.PasswordAgePolicy
	(*policy.LockoutPolicy)(nil),                                            // 217: zitadel.policy.v1.LockoutPolicy
	(*policy.PrivacyPolicy)(nil),                                            // 218: zitadel.policy.v1.PrivacyPolicy
	(*text.MessageCustomText)(nil),                                          // 219: zitadel.text.v1.MessageCustomText
	(*text.LoginCustomText)(nil),                                            // 220: zitadel.text.v1.LoginCustomText
	(*text.SelectAccountScreenText)(nil),                                    // 221: zitadel.text.v1.SelectAccountScreenText
	(*text.LoginScreenText)(nil),                                            // 222: zitadel.text.v1.LoginScreenText
	(*text.PasswordScreenText)(nil),                                         // 223: zitadel.text.v1.PasswordScreenText
	(*text.UsernameChangeScreenText)(nil),                                   // 224: zitadel.text.v1.UsernameChangeScreenText
	(*text.UsernameChangeDoneScreenText)(nil),                               // 225: zitadel.text.v1.UsernameChangeDoneScreenText
	(*text.InitPasswordScreenText)(nil),                                     // 226: zitadel.text.v1.InitPasswordScreenText
	(*text.InitPasswordDoneScreenText)(nil),                                 // 227: zitadel.text.v1.InitPasswordDoneScreenText
	(*text.EmailVerificationScreenText)(nil),                                // 228: zitadel.text.v1.EmailVerificationScreenText
	(*text.EmailVerificationDoneScreenText)(nil),                            // 229: zitadel.text.v1.EmailVerificationDoneScreenText
	(*text.InitializeUserScreenText)(nil),                                   // 230: zitadel.text.v1.InitializeUserScreenText
	(*text.InitializeUserDoneScreenText)(nil),                               // 231: zitadel.text.v1.InitializeUserDoneScreenText
	(*text.InitMFAPromptScreenText)(nil),                                    // 232: zitadel.text.v1.InitMFAPromptScreenText
	(*text.InitMFAOTPScreenText)(nil),                                       // 233: zitadel.text.v1.InitMFAOTPScreenText
	(*text.InitMFAU2FScreenText)(nil),                                       // 234: zitadel.text.v1.InitMFAU2FScreenText
	(*text.InitMFADoneScreenText)(nil),                                      // 235: zitadel.text.v1.InitMFADoneScreenText
	(*text.MFAProvidersText)(nil),                                           // 236: zitadel.text.v1.MFAProvidersText
	(*text.VerifyMFAOTPScreenText)(nil),                                     // 237: zitadel.text.v1.VerifyMFAOTPScreenText
	(*text.VerifyMFAU2FScreenText)(nil),                                     // 238: zitadel.text.v1.VerifyMFAU2FScreenText
	(*text.PasswordlessScreenText)(nil),                                     // 239: zitadel.text.v1.PasswordlessScreenText
	(*text.PasswordChangeScreenText)(nil),                                   // 240: zitadel.text.v1.PasswordChangeScreenText
	(*text.PasswordChangeDoneScreenText)(nil),                               // 241: zitadel.text.v1.PasswordChangeDoneScreenText
	(*text.PasswordResetDoneScreenText)(nil),                                // 242: zitadel.text.v1.PasswordResetDoneScreenText
	(*text.RegistrationOptionScreenText)(nil),                               // 243: zitadel.text.v1.RegistrationOptionScreenText
	(*text.RegistrationUserScreenText)(nil),                                 // 244: zitadel.text.v1.RegistrationUserScreenText
	(*text.RegistrationOrgScreenText)(nil),                                  // 245: zitadel.text.v1.RegistrationOrgScreenText
	(*text.LinkingUserDoneScreenText)(nil),                                  // 246: zitadel.text.v1.LinkingUserDoneScreenText
	(*text.ExternalUserNotFoundScreenText)(nil),                             // 247: zitadel.text.v1.ExternalUserNotFoundScreenText
	(*text.SuccessLoginScreenText)(nil),                                     // 248: zitadel.text.v1.SuccessLoginScreenText
	(*text.LogoutDoneScreenText)(nil),                                       // 249: zitadel.text.v1.LogoutDoneScreenText
	(*text.FooterText)(nil),                                                 // 250: zitadel.text.v1.FooterText
	(*text.PasswordlessPromptScreenText)(nil),                               // 251: zitadel.text.v1.PasswordlessPromptScreenText
	(*text.PasswordlessRegistrationScreenText)(nil),                         // 252: zitadel.text.v1.PasswordlessRegistrationScreenText
	(*text.PasswordlessRegistrationDoneScreenText)(nil),                     // 253: zitadel.text.v1.PasswordlessRegistrationDoneScreenText
	(*text.ExternalRegistrationUserOverviewScreenText)(nil),                 // 254: zitadel.text.v1.ExternalRegistrationUserOverviewScreenText
	(*member.SearchQuery)(nil),                                              // 255: zitadel.member.v1.SearchQuery
	(*member.Member)(nil),                                                   // 256: zitadel.member.v1.Member
	(*timestamppb.Timestamp)(nil),                                           // 257: google.protobuf.Timestamp
	(user.Gender)(0),                                                        // 258: zitadel.user.v1.Gender
}
var file_zitadel_admin_proto_depIdxs = []int32{
	192, // 0: zitadel.admin.v1.GetOrgByIDResponse.org:type_name -> zitadel.org.v1.Org
	193, // 1: zitadel.admin.v1.ListOrgsRequest.query:type_name -> zitadel.v1.ListQuery
	194, // 2: zitadel.admin.v1.ListOrgsRequest.sorting_column:type_name -> zitadel.org.v1.OrgFieldName
	195, // 3: zitadel.admin.v1.ListOrgsRequest.queries:type_name -> zitadel.org.v1.OrgQuery
	196, // 4: zitadel.admin.v1.ListOrgsResponse.details:type_name -> zitadel.v1.ListDetails
	194, // 5: zitadel.admin.v1.ListOrgsResponse.sorting_column:type_name -> zitadel.org.v1.OrgFieldName
	192, // 6: zitadel.admin.v1.ListOrgsResponse.result:type_name -> zitadel.org.v1.Org
	187, // 7: zitadel.admin.v1.SetUpOrgRequest.org:type_name -> zitadel.admin.v1.SetUpOrgRequest.Org
	188, // 8: zitadel.admin.v1.SetUpOrgRequest.human:type_name -> zitadel.admin.v1.SetUpOrgRequest.Human
	197, // 9: zitadel.admin.v1.SetUpOrgResponse.details:type_name -> zitadel.v1.ObjectDetails
	198, // 10: zitadel.admin.v1.GetIDPByIDResponse.idp:type_name -> zitadel.idp.v1.IDP
	193, // 11: zitadel.admin.v1.ListIDPsRequest.query:type_name -> zitadel.v1.ListQuery
	199, // 12: zitadel.admin.v1.ListIDPsRequest.sorting_column:type_name -> zitadel.idp.v1.IDPFieldName
	15,  // 13: zitadel.admin.v1.ListIDPsRequest.queries:type_name -> zitadel.admin.v1.IDPQuery
	200, // 14: zitadel.admin.v1.IDPQuery.idp_id_query:type_name -> zitadel.idp.v1.IDPIDQuery
	201, // 15: zitadel.admin.v1.IDPQuery.idp_name_query:type_name -> zitadel.idp.v1.IDPNameQuery
	196, // 16: zitadel.admin.v1.ListIDPsResponse.details:type_name -> zitadel.v1.ListDetails
	199, // 17: zitadel.admin.v1.ListIDPsResponse.sorting_column:type_name -> zitadel.idp.v1.IDPFieldName
	198, // 18: zitadel.admin.v1.ListIDPsResponse.result:type_name -> zitadel.idp.v1.IDP
	202, // 19: zitadel.admin.v1.AddOIDCIDPRequest.styling_type:type_name -> zitadel.idp.v1.IDPStylingType
	203, // 20: zitadel.admin.v1.AddOIDCIDPRequest.display_name_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	203, // 21: zitadel.admin.v1.AddOIDCIDPRequest.username_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	197, // 22: zitadel.admin.v1.AddOIDCIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	202, // 23: zitadel.admin.v1.AddJWTIDPRequest.styling_type:type_name -> zitadel.idp.v1.IDPStylingType
	197, // 24: zitadel.admin.v1.AddJWTIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	202, // 25: zitadel.admin.v1.UpdateIDPRequest.styling_type:type_name -> zitadel.idp.v1.IDPStylingType
	197, // 26: zitadel.admin.v1.UpdateIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 27: zitadel.admin.v1.DeactivateIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 28: zitadel.admin.v1.ReactivateIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 29: zitadel.admin.v1.RemoveIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	203, // 30: zitadel.admin.v1.UpdateIDPOIDCConfigRequest.display_name_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	203, // 31: zitadel.admin.v1.UpdateIDPOIDCConfigRequest.username_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	197, // 32: zitadel.admin.v1.UpdateIDPOIDCConfigResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 33: zitadel.admin.v1.UpdateIDPJWTConfigResponse.details:type_name -> zitadel.v1.ObjectDetails
	204, // 34: zitadel.admin.v1.GetDefaultFeaturesResponse.features:type_name -> zitadel.features.v1.Features
	205, // 35: zitadel.admin.v1.SetDefaultFeaturesRequest.audit_log_retention:type_name -> google.protobuf.Duration
	206, // 36: zitadel.admin.v1.SetDefaultFeaturesRequest.actions_allowed:type_name -> zitadel.features.v1.ActionsAllowed
	197, // 37: zitadel.admin.v1.SetDefaultFeaturesResponse.details:type_name -> zitadel.v1.ObjectDetails
	204, // 38: zitadel.admin.v1.GetOrgFeaturesResponse.features:type_name -> zitadel.features.v1.Features
	207, // 39: zitadel.admin.v1.SetOrgFeaturesRequest.state:type_name -> zitadel.features.v1.FeaturesState
	205, // 40: zitadel.admin.v1.SetOrgFeaturesRequest.audit_log_retention:type_name -> google.protobuf.Duration
	206, // 41: zitadel.admin.v1.SetOrgFeaturesRequest.actions_allowed:type_name -> zitadel.features.v1.ActionsAllowed
	197, // 42: zitadel.admin.v1.SetOrgFeaturesResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 43: zitadel.admin.v1.ResetOrgFeaturesResponse.details:type_name -> zitadel.v1.ObjectDetails
	208, // 44: zitadel.admin.v1.GetOrgIAMPolicyResponse.policy:type_name -> zitadel.policy.v1.OrgIAMPolicy
	197, // 45: zitadel.admin.v1.UpdateOrgIAMPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	208, // 46: zitadel.admin.v1.GetCustomOrgIAMPolicyResponse.policy:type_name -> zitadel.policy.v1.OrgIAMPolicy
	197, // 47: zitadel.admin.v1.AddCustomOrgIAMPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 48: zitadel.admin.v1.UpdateCustomOrgIAMPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 49: zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultResponse.details:type_name -> zitadel.v1.ObjectDetails
	209, // 50: zitadel.admin.v1.GetLabelPolicyResponse.policy:type_name -> zitadel.policy.v1.LabelPolicy
	209, // 51: zitadel.admin.v1.GetPreviewLabelPolicyResponse.policy:type_name -> zitadel.policy.v1.LabelPolicy
	197, // 52: zitadel.admin.v1.UpdateLabelPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 53: zitadel.admin.v1.ActivateLabelPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 54: zitadel.admin.v1.RemoveLabelPolicyLogoResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 55: zitadel.admin.v1.RemoveLabelPolicyLogoDarkResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 56: zitadel.admin.v1.RemoveLabelPolicyIconResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 57: zitadel.admin.v1.RemoveLabelPolicyIconDarkResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 58: zitadel.admin.v1.RemoveLabelPolicyFontResponse.details:type_name -> zitadel.v1.ObjectDetails
	210, // 59: zitadel.admin.v1.GetLoginPolicyResponse.policy:type_name -> zitadel.policy.v1.LoginPolicy
	211, // 60: zitadel.admin.v1.UpdateLoginPolicyRequest.passwordless_type:type_name -> zitadel.policy.v1.PasswordlessType
	197, // 61: zitadel.admin.v1.UpdateLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	193, // 62: zitadel.admin.v1.ListLoginPolicyIDPsRequest.query:type_name -> zitadel.v1.ListQuery
	196, // 63: zitadel.admin.v1.ListLoginPolicyIDPsResponse.details:type_name -> zitadel.v1.ListDetails
	212, // 64: zitadel.admin.v1.ListLoginPolicyIDPsResponse.result:type_name -> zitadel.idp.v1.IDPLoginPolicyLink
	197, // 65: zitadel.admin.v1.AddIDPToLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 66: zitadel.admin.v1.RemoveIDPFromLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	196, // 67: zitadel.admin.v1.ListLoginPolicySecondFactorsResponse.details:type_name -> zitadel.v1.ListDetails
	213, // 68: zitadel.admin.v1.ListLoginPolicySecondFactorsResponse.result:type_name -> zitadel.policy.v1.SecondFactorType
	213, // 69: zitadel.admin.v1.AddSecondFactorToLoginPolicyRequest.type:type_name -> zitadel.policy.v1.SecondFactorType
	197, // 70: zitadel.admin.v1.AddSecondFactorToLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	213, // 71: zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyRequest.type:type_name -> zitadel.policy.v1.SecondFactorType
	197, // 72: zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	196, // 73: zitadel.admin.v1.ListLoginPolicyMultiFactorsResponse.details:type_name -> zitadel.v1.ListDetails
	214, // 74: zitadel.admin.v1.ListLoginPolicyMultiFactorsResponse.result:type_name -> zitadel.policy.v1.MultiFactorType
	214, // 75: zitadel.admin.v1.AddMultiFactorToLoginPolicyRequest.type:type_name -> zitadel.policy.v1.MultiFactorType
	197, // 76: zitadel.admin.v1.AddMultiFactorToLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	214, // 77: zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyRequest.type:type_name -> zitadel.policy.v1.MultiFactorType
	197, // 78: zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	215, // 79: zitadel.admin.v1.GetPasswordComplexityPolicyResponse.policy:type_name -> zitadel.policy.v1.PasswordComplexityPolicy
	197, // 80: zitadel.admin.v1.UpdatePasswordComplexityPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	216, // 81: zitadel.admin.v1.GetPasswordAgePolicyResponse.policy:type_name -> zitadel.policy.v1.PasswordAgePolicy
	197, // 82: zitadel.admin.v1.UpdatePasswordAgePolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	217, // 83: zitadel.admin.v1.GetLockoutPolicyResponse.policy:type_name -> zitadel.policy.v1.LockoutPolicy
	197, // 84: zitadel.admin.v1.UpdateLockoutPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	218, // 85: zitadel.admin.v1.GetPrivacyPolicyResponse.policy:type_name -> zitadel.policy.v1.PrivacyPolicy
	197, // 86: zitadel.admin.v1.UpdatePrivacyPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	219, // 87: zitadel.admin.v1.GetDefaultInitMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	219, // 88: zitadel.admin.v1.GetCustomInitMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	197, // 89: zitadel.admin.v1.SetDefaultInitMessageTextResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 90: zitadel.admin.v1.ResetCustomInitMessageTextToDefaultResponse.details:type_name -> zitadel.v1.ObjectDetails
	219, // 91: zitadel.admin.v1.GetDefaultPasswordResetMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	219, // 92: zitadel.admin.v1.GetCustomPasswordResetMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	197, // 93: zitadel.admin.v1.SetDefaultPasswordResetMessageTextResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 94: zitadel.admin.v1.ResetCustomPasswordResetMessageTextToDefaultResponse.details:type_name -> zitadel.v1.ObjectDetails
	219, // 95: zitadel.admin.v1.GetDefaultVerifyEmailMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	219, // 96: zitadel.admin.v1.GetCustomVerifyEmailMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	197, // 97: zitadel.admin.v1.SetDefaultVerifyEmailMessageTextResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 98: zitadel.admin.v1.ResetCustomVerifyEmailMessageTextToDefaultResponse.details:type_name -> zitadel.v1.ObjectDetails
	219, // 99: zitadel.admin.v1.GetDefaultVerifyPhoneMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	219, // 100: zitadel.admin.v1.GetCustomVerifyPhoneMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	197, // 101: zitadel.admin.v1.SetDefaultVerifyPhoneMessageTextResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 102: zitadel.admin.v1.ResetCustomVerifyPhoneMessageTextToDefaultResponse.details:type_name -> zitadel.v1.ObjectDetails
	219, // 103: zitadel.admin.v1.GetDefaultDomainClaimedMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	219, // 104: zitadel.admin.v1.GetCustomDomainClaimedMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	197, // 105: zitadel.admin.v1.SetDefaultDomainClaimedMessageTextResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 106: zitadel.admin.v1.ResetCustomDomainClaimedMessageTextToDefaultResponse.details:type_name -> zitadel.v1.ObjectDetails
	219, // 107: zitadel.admin.v1.GetDefaultPasswordlessRegistrationMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	219, // 108: zitadel.admin.v1.GetCustomPasswordlessRegistrationMessageTextResponse.custom_text:type_name -> zitadel.text.v1.MessageCustomText
	197, // 109: zitadel.admin.v1.SetDefaultPasswordlessRegistrationMessageTextResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 110: zitadel.admin.v1.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.details:type_name -> zitadel.v1.ObjectDetails
	220, // 111: zitadel.admin.v1.GetDefaultLoginTextsResponse.custom_text:type_name -> zitadel.text.v1.LoginCustomText
	220, // 112: zitadel.admin.v1.GetCustomLoginTextsResponse.custom_text:type_name -> zitadel.text.v1.LoginCustomText
	221, // 113: zitadel.admin.v1.SetCustomLoginTextsRequest.select_account_text:type_name -> zitadel.text.v1.SelectAccountScreenText
	222, // 114: zitadel.admin.v1.SetCustomLoginTextsRequest.login_text:type_name -> zitadel.text.v1.LoginScreenText
	223, // 115: zitadel.admin.v1.SetCustomLoginTextsRequest.password_text:type_name -> zitadel.text.v1.PasswordScreenText
	224, // 116: zitadel.admin.v1.SetCustomLoginTextsRequest.username_change_text:type_name -> zitadel.text.v1.UsernameChangeScreenText
	225, // 117: zitadel.admin.v1.SetCustomLoginTextsRequest.username_change_done_text:type_name -> zitadel.text.v1.UsernameChangeDoneScreenText
	226, // 118: zitadel.admin.v1.SetCustomLoginTextsRequest.init_password_text:type_name -> zitadel.text.v1.InitPasswordScreenText
	227, // 119: zitadel.admin.v1.SetCustomLoginTextsRequest.init_password_done_text:type_name -> zitadel.text.v1.InitPasswordDoneScreenText
	228, // 120: zitadel.admin.v1.SetCustomLoginTextsRequest.email_verification_text:type_name -> zitadel.text.v1.EmailVerificationScreenText
	229, // 121: zitadel.admin.v1.SetCustomLoginTextsRequest.email_verification_done_text:type_name -> zitadel.text.v1.EmailVerificationDoneScreenText
	230, // 122: zitadel.admin.v1.SetCustomLoginTextsRequest.initialize_user_text:type_name -> zitadel.text.v1.InitializeUserScreenText
	231, // 123: zitadel.admin.v1.SetCustomLoginTextsRequest.initialize_done_text:type_name -> zitadel.text.v1.InitializeUserDoneScreenText
	232, // 124: zitadel.admin.v1.SetCustomLoginTextsRequest.init_mfa_prompt_text:type_name -> zitadel.text.v1.InitMFAPromptScreenText
	233, // 125: zitadel.admin.v1.SetCustomLoginTextsRequest.init_mfa_otp_text:type_name -> zitadel.text.v1.InitMFAOTPScreenText
	234, // 126: zitadel.admin.v1.SetCustomLoginTextsRequest.init_mfa_u2f_text:type_name -> zitadel.text.v1.InitMFAU2FScreenText
	235, // 127: zitadel.admin.v1.SetCustomLoginTextsRequest.init_mfa_done_text:type_name -> zitadel.text.v1.InitMFADoneScreenText
	236, // 128: zitadel.admin.v1.SetCustomLoginTextsRequest.mfa_providers_text:type_name -> zitadel.text.v1.MFAProvidersText
	237, // 129: zitadel.admin.v1.SetCustomLoginTextsRequest.verify_mfa_otp_text:type_name -> zitadel.text.v1.VerifyMFAOTPScreenText
	238, // 130: zitadel.admin.v1.SetCustomLoginTextsRequest.verify_mfa_u2f_text:type_name -> zitadel.text.v1.VerifyMFAU2FScreenText
	239, // 131: zitadel.admin.v1.SetCustomLoginTextsRequest.passwordless_text:type_name -> zitadel.text.v1.PasswordlessScreenText
	240, // 132: zitadel.admin.v1.SetCustomLoginTextsRequest.password_change_text:type_name -> zitadel.text.v1.PasswordChangeScreenText
	241, // 133: zitadel.admin.v1.SetCustomLoginTextsRequest.password_change_done_text:type_name -> zitadel.text.v1.PasswordChangeDoneScreenText
	242, // 134: zitadel.admin.v1.SetCustomLoginTextsRequest.password_reset_done_text:type_name -> zitadel.text.v1.PasswordResetDoneScreenText
	243, // 135: zitadel.admin.v1.SetCustomLoginTextsRequest.registration_option_text:type_name -> zitadel.text.v1.RegistrationOptionScreenText
	244, // 136: zitadel.admin.v1.SetCustomLoginTextsRequest.registration_user_text:type_name -> zitadel.text.v1.RegistrationUserScreenText
	245, // 137: zitadel.admin.v1.SetCustomLoginTextsRequest.registration_org_text:type_name -> zitadel.text.v1.RegistrationOrgScreenText
	246, // 138: zitadel.admin.v1.SetCustomLoginTextsRequest.linking_user_done_text:type_name -> zitadel.text.v1.LinkingUserDoneScreenText
	247, // 139: zitadel.admin.v1.SetCustomLoginTextsRequest.external_user_not_found_text:type_name -> zitadel.text.v1.ExternalUserNotFoundScreenText
	248, // 140: zitadel.admin.v1.SetCustomLoginTextsRequest.success_login_text:type_name -> zitadel.text.v1.SuccessLoginScreenText
	249, // 141: zitadel.admin.v1.SetCustomLoginTextsRequest.logout_text:type_name -> zitadel.text.v1.LogoutDoneScreenText
	250, // 142: zitadel.admin.v1.SetCustomLoginTextsRequest.footer_text:type_name -> zitadel.text.v1.FooterText
	251, // 143: zitadel.admin.v1.SetCustomLoginTextsRequest.passwordless_prompt_text:type_name -> zitadel.text.v1.PasswordlessPromptScreenText
	252, // 144: zitadel.admin.v1.SetCustomLoginTextsRequest.passwordless_registration_text:type_name -> zitadel.text.v1.PasswordlessRegistrationScreenText
	253, // 145: zitadel.admin.v1.SetCustomLoginTextsRequest.passwordless_registration_done_text:type_name -> zitadel.text.v1.PasswordlessRegistrationDoneScreenText
	254, // 146: zitadel.admin.v1.SetCustomLoginTextsRequest.external_registration_user_overview_text:type_name -> zitadel.text.v1.ExternalRegistrationUserOverviewScreenText
	197, // 147: zitadel.admin.v1.SetCustomLoginTextsResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 148: zitadel.admin.v1.ResetCustomLoginTextsToDefaultResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 149: zitadel.admin.v1.AddIAMMemberResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 150: zitadel.admin.v1.UpdateIAMMemberResponse.details:type_name -> zitadel.v1.ObjectDetails
	197, // 151: zitadel.admin.v1.RemoveIAMMemberResponse.details:type_name -> zitadel.v1.ObjectDetails
	196, // 152: zitadel.admin.v1.ListIAMMemberRolesResponse.details:type_name -> zitadel.v1.ListDetails
	193, // 153: zitadel.admin.v1.ListIAMMembersRequest.query:type_name -> zitadel.v1.ListQuery
	255, // 154: zitadel.admin.v1.ListIAMMembersRequest.queries:type_name -> zitadel.member.v1.SearchQuery
	196, // 155: zitadel.admin.v1.ListIAMMembersResponse.details:type_name -> zitadel.v1.ListDetails
	256, // 156: zitadel.admin.v1.ListIAMMembersResponse.result:type_name -> zitadel.member.v1.Member
	185, // 157: zitadel.admin.v1.ListViewsResponse.result:type_name -> zitadel.admin.v1.View
	186, // 158: zitadel.admin.v1.ListFailedEventsResponse.result:type_name -> zitadel.admin.v1.FailedEvent
	257, // 159: zitadel.admin.v1.View.event_timestamp:type_name -> google.protobuf.Timestamp
	257, // 160: zitadel.admin.v1.View.last_successful_spooler_run:type_name -> google.protobuf.Timestamp
	189, // 161: zitadel.admin.v1.SetUpOrgRequest.Human.profile:type_name -> zitadel.admin.v1.SetUpOrgRequest.Human.Profile
	190, // 162: zitadel.admin.v1.SetUpOrgRequest.Human.email:type_name -> zitadel.admin.v1.SetUpOrgRequest.Human.Email
	191, // 163: zitadel.admin.v1.SetUpOrgRequest.Human.phone:type_name -> zitadel.admin.v1.SetUpOrgRequest.Human.Phone
	258, // 164: zitadel.admin.v1.SetUpOrgRequest.Human.Profile.gender:type_name -> zitadel.user.v1.Gender
	0,   // 165: zitadel.admin.v1.AdminService.Healthz:input_type -> zitadel.admin.v1.HealthzRequest
	2,   // 166: zitadel.admin.v1.AdminService.GetSupportedLanguages:input_type -> zitadel.admin.v1.GetSupportedLanguagesRequest
	6,   // 167: zitadel.admin.v1.AdminService.GetOrgByID:input_type -> zitadel.admin.v1.GetOrgByIDRequest
	4,   // 168: zitadel.admin.v1.AdminService.IsOrgUnique:input_type -> zitadel.admin.v1.IsOrgUniqueRequest
	8,   // 169: zitadel.admin.v1.AdminService.ListOrgs:input_type -> zitadel.admin.v1.ListOrgsRequest
	10,  // 170: zitadel.admin.v1.AdminService.SetUpOrg:input_type -> zitadel.admin.v1.SetUpOrgRequest
	12,  // 171: zitadel.admin.v1.AdminService.GetIDPByID:input_type -> zitadel.admin.v1.GetIDPByIDRequest
	14,  // 172: zitadel.admin.v1.AdminService.ListIDPs:input_type -> zitadel.admin.v1.ListIDPsRequest
	17,  // 173: zitadel.admin.v1.AdminService.AddOIDCIDP:input_type -> zitadel.admin.v1.AddOIDCIDPRequest
	19,  // 174: zitadel.admin.v1.AdminService.AddJWTIDP:input_type -> zitadel.admin.v1.AddJWTIDPRequest
	21,  // 175: zitadel.admin.v1.AdminService.UpdateIDP:input_type -> zitadel.admin.v1.UpdateIDPRequest
	23,  // 176: zitadel.admin.v1.AdminService.DeactivateIDP:input_type -> zitadel.admin.v1.DeactivateIDPRequest
	25,  // 177: zitadel.admin.v1.AdminService.ReactivateIDP:input_type -> zitadel.admin.v1.ReactivateIDPRequest
	27,  // 178: zitadel.admin.v1.AdminService.RemoveIDP:input_type -> zitadel.admin.v1.RemoveIDPRequest
	29,  // 179: zitadel.admin.v1.AdminService.UpdateIDPOIDCConfig:input_type -> zitadel.admin.v1.UpdateIDPOIDCConfigRequest
	31,  // 180: zitadel.admin.v1.AdminService.UpdateIDPJWTConfig:input_type -> zitadel.admin.v1.UpdateIDPJWTConfigRequest
	33,  // 181: zitadel.admin.v1.AdminService.GetDefaultFeatures:input_type -> zitadel.admin.v1.GetDefaultFeaturesRequest
	35,  // 182: zitadel.admin.v1.AdminService.SetDefaultFeatures:input_type -> zitadel.admin.v1.SetDefaultFeaturesRequest
	37,  // 183: zitadel.admin.v1.AdminService.GetOrgFeatures:input_type -> zitadel.admin.v1.GetOrgFeaturesRequest
	39,  // 184: zitadel.admin.v1.AdminService.SetOrgFeatures:input_type -> zitadel.admin.v1.SetOrgFeaturesRequest
	41,  // 185: zitadel.admin.v1.AdminService.ResetOrgFeatures:input_type -> zitadel.admin.v1.ResetOrgFeaturesRequest
	43,  // 186: zitadel.admin.v1.AdminService.GetOrgIAMPolicy:input_type -> zitadel.admin.v1.GetOrgIAMPolicyRequest
	45,  // 187: zitadel.admin.v1.AdminService.UpdateOrgIAMPolicy:input_type -> zitadel.admin.v1.UpdateOrgIAMPolicyRequest
	47,  // 188: zitadel.admin.v1.AdminService.GetCustomOrgIAMPolicy:input_type -> zitadel.admin.v1.GetCustomOrgIAMPolicyRequest
	49,  // 189: zitadel.admin.v1.AdminService.AddCustomOrgIAMPolicy:input_type -> zitadel.admin.v1.AddCustomOrgIAMPolicyRequest
	51,  // 190: zitadel.admin.v1.AdminService.UpdateCustomOrgIAMPolicy:input_type -> zitadel.admin.v1.UpdateCustomOrgIAMPolicyRequest
	53,  // 191: zitadel.admin.v1.AdminService.ResetCustomOrgIAMPolicyToDefault:input_type -> zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultRequest
	55,  // 192: zitadel.admin.v1.AdminService.GetLabelPolicy:input_type -> zitadel.admin.v1.GetLabelPolicyRequest
	57,  // 193: zitadel.admin.v1.AdminService.GetPreviewLabelPolicy:input_type -> zitadel.admin.v1.GetPreviewLabelPolicyRequest
	59,  // 194: zitadel.admin.v1.AdminService.UpdateLabelPolicy:input_type -> zitadel.admin.v1.UpdateLabelPolicyRequest
	61,  // 195: zitadel.admin.v1.AdminService.ActivateLabelPolicy:input_type -> zitadel.admin.v1.ActivateLabelPolicyRequest
	63,  // 196: zitadel.admin.v1.AdminService.RemoveLabelPolicyLogo:input_type -> zitadel.admin.v1.RemoveLabelPolicyLogoRequest
	65,  // 197: zitadel.admin.v1.AdminService.RemoveLabelPolicyLogoDark:input_type -> zitadel.admin.v1.RemoveLabelPolicyLogoDarkRequest
	67,  // 198: zitadel.admin.v1.AdminService.RemoveLabelPolicyIcon:input_type -> zitadel.admin.v1.RemoveLabelPolicyIconRequest
	69,  // 199: zitadel.admin.v1.AdminService.RemoveLabelPolicyIconDark:input_type -> zitadel.admin.v1.RemoveLabelPolicyIconDarkRequest
	71,  // 200: zitadel.admin.v1.AdminService.RemoveLabelPolicyFont:input_type -> zitadel.admin.v1.RemoveLabelPolicyFontRequest
	73,  // 201: zitadel.admin.v1.AdminService.GetLoginPolicy:input_type -> zitadel.admin.v1.GetLoginPolicyRequest
	75,  // 202: zitadel.admin.v1.AdminService.UpdateLoginPolicy:input_type -> zitadel.admin.v1.UpdateLoginPolicyRequest
	77,  // 203: zitadel.admin.v1.AdminService.ListLoginPolicyIDPs:input_type -> zitadel.admin.v1.ListLoginPolicyIDPsRequest
	79,  // 204: zitadel.admin.v1.AdminService.AddIDPToLoginPolicy:input_type -> zitadel.admin.v1.AddIDPToLoginPolicyRequest
	81,  // 205: zitadel.admin.v1.AdminService.RemoveIDPFromLoginPolicy:input_type -> zitadel.admin.v1.RemoveIDPFromLoginPolicyRequest
	83,  // 206: zitadel.admin.v1.AdminService.ListLoginPolicySecondFactors:input_type -> zitadel.admin.v1.ListLoginPolicySecondFactorsRequest
	85,  // 207: zitadel.admin.v1.AdminService.AddSecondFactorToLoginPolicy:input_type -> zitadel.admin.v1.AddSecondFactorToLoginPolicyRequest
	87,  // 208: zitadel.admin.v1.AdminService.RemoveSecondFactorFromLoginPolicy:input_type -> zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyRequest
	89,  // 209: zitadel.admin.v1.AdminService.ListLoginPolicyMultiFactors:input_type -> zitadel.admin.v1.ListLoginPolicyMultiFactorsRequest
	91,  // 210: zitadel.admin.v1.AdminService.AddMultiFactorToLoginPolicy:input_type -> zitadel.admin.v1.AddMultiFactorToLoginPolicyRequest
	93,  // 211: zitadel.admin.v1.AdminService.RemoveMultiFactorFromLoginPolicy:input_type -> zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyRequest
	95,  // 212: zitadel.admin.v1.AdminService.GetPasswordComplexityPolicy:input_type -> zitadel.admin.v1.GetPasswordComplexityPolicyRequest
	97,  // 213: zitadel.admin.v1.AdminService.UpdatePasswordComplexityPolicy:input_type -> zitadel.admin.v1.UpdatePasswordComplexityPolicyRequest
	99,  // 214: zitadel.admin.v1.AdminService.GetPasswordAgePolicy:input_type -> zitadel.admin.v1.GetPasswordAgePolicyRequest
	101, // 215: zitadel.admin.v1.AdminService.UpdatePasswordAgePolicy:input_type -> zitadel.admin.v1.UpdatePasswordAgePolicyRequest
	103, // 216: zitadel.admin.v1.AdminService.GetLockoutPolicy:input_type -> zitadel.admin.v1.GetLockoutPolicyRequest
	105, // 217: zitadel.admin.v1.AdminService.UpdateLockoutPolicy:input_type -> zitadel.admin.v1.UpdateLockoutPolicyRequest
	107, // 218: zitadel.admin.v1.AdminService.GetPrivacyPolicy:input_type -> zitadel.admin.v1.GetPrivacyPolicyRequest
	109, // 219: zitadel.admin.v1.AdminService.UpdatePrivacyPolicy:input_type -> zitadel.admin.v1.UpdatePrivacyPolicyRequest
	111, // 220: zitadel.admin.v1.AdminService.GetDefaultInitMessageText:input_type -> zitadel.admin.v1.GetDefaultInitMessageTextRequest
	113, // 221: zitadel.admin.v1.AdminService.GetCustomInitMessageText:input_type -> zitadel.admin.v1.GetCustomInitMessageTextRequest
	115, // 222: zitadel.admin.v1.AdminService.SetDefaultInitMessageText:input_type -> zitadel.admin.v1.SetDefaultInitMessageTextRequest
	117, // 223: zitadel.admin.v1.AdminService.ResetCustomInitMessageTextToDefault:input_type -> zitadel.admin.v1.ResetCustomInitMessageTextToDefaultRequest
	119, // 224: zitadel.admin.v1.AdminService.GetDefaultPasswordResetMessageText:input_type -> zitadel.admin.v1.GetDefaultPasswordResetMessageTextRequest
	121, // 225: zitadel.admin.v1.AdminService.GetCustomPasswordResetMessageText:input_type -> zitadel.admin.v1.GetCustomPasswordResetMessageTextRequest
	123, // 226: zitadel.admin.v1.AdminService.SetDefaultPasswordResetMessageText:input_type -> zitadel.admin.v1.SetDefaultPasswordResetMessageTextRequest
	125, // 227: zitadel.admin.v1.AdminService.ResetCustomPasswordResetMessageTextToDefault:input_type -> zitadel.admin.v1.ResetCustomPasswordResetMessageTextToDefaultRequest
	127, // 228: zitadel.admin.v1.AdminService.GetDefaultVerifyEmailMessageText:input_type -> zitadel.admin.v1.GetDefaultVerifyEmailMessageTextRequest
	129, // 229: zitadel.admin.v1.AdminService.GetCustomVerifyEmailMessageText:input_type -> zitadel.admin.v1.GetCustomVerifyEmailMessageTextRequest
	131, // 230: zitadel.admin.v1.AdminService.SetDefaultVerifyEmailMessageText:input_type -> zitadel.admin.v1.SetDefaultVerifyEmailMessageTextRequest
	133, // 231: zitadel.admin.v1.AdminService.ResetCustomVerifyEmailMessageTextToDefault:input_type -> zitadel.admin.v1.ResetCustomVerifyEmailMessageTextToDefaultRequest
	135, // 232: zitadel.admin.v1.AdminService.GetDefaultVerifyPhoneMessageText:input_type -> zitadel.admin.v1.GetDefaultVerifyPhoneMessageTextRequest
	137, // 233: zitadel.admin.v1.AdminService.GetCustomVerifyPhoneMessageText:input_type -> zitadel.admin.v1.GetCustomVerifyPhoneMessageTextRequest
	139, // 234: zitadel.admin.v1.AdminService.SetDefaultVerifyPhoneMessageText:input_type -> zitadel.admin.v1.SetDefaultVerifyPhoneMessageTextRequest
	141, // 235: zitadel.admin.v1.AdminService.ResetCustomVerifyPhoneMessageTextToDefault:input_type -> zitadel.admin.v1.ResetCustomVerifyPhoneMessageTextToDefaultRequest
	143, // 236: zitadel.admin.v1.AdminService.GetDefaultDomainClaimedMessageText:input_type -> zitadel.admin.v1.GetDefaultDomainClaimedMessageTextRequest
	145, // 237: zitadel.admin.v1.AdminService.GetCustomDomainClaimedMessageText:input_type -> zitadel.admin.v1.GetCustomDomainClaimedMessageTextRequest
	147, // 238: zitadel.admin.v1.AdminService.SetDefaultDomainClaimedMessageText:input_type -> zitadel.admin.v1.SetDefaultDomainClaimedMessageTextRequest
	149, // 239: zitadel.admin.v1.AdminService.ResetCustomDomainClaimedMessageTextToDefault:input_type -> zitadel.admin.v1.ResetCustomDomainClaimedMessageTextToDefaultRequest
	151, // 240: zitadel.admin.v1.AdminService.GetDefaultPasswordlessRegistrationMessageText:input_type -> zitadel.admin.v1.GetDefaultPasswordlessRegistrationMessageTextRequest
	153, // 241: zitadel.admin.v1.AdminService.GetCustomPasswordlessRegistrationMessageText:input_type -> zitadel.admin.v1.GetCustomPasswordlessRegistrationMessageTextRequest
	155, // 242: zitadel.admin.v1.AdminService.SetDefaultPasswordlessRegistrationMessageText:input_type -> zitadel.admin.v1.SetDefaultPasswordlessRegistrationMessageTextRequest
	157, // 243: zitadel.admin.v1.AdminService.ResetCustomPasswordlessRegistrationMessageTextToDefault:input_type -> zitadel.admin.v1.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest
	159, // 244: zitadel.admin.v1.AdminService.GetDefaultLoginTexts:input_type -> zitadel.admin.v1.GetDefaultLoginTextsRequest
	161, // 245: zitadel.admin.v1.AdminService.GetCustomLoginTexts:input_type -> zitadel.admin.v1.GetCustomLoginTextsRequest
	163, // 246: zitadel.admin.v1.AdminService.SetCustomLoginText:input_type -> zitadel.admin.v1.SetCustomLoginTextsRequest
	165, // 247: zitadel.admin.v1.AdminService.ResetCustomLoginTextToDefault:input_type -> zitadel.admin.v1.ResetCustomLoginTextsToDefaultRequest
	173, // 248: zitadel.admin.v1.AdminService.ListIAMMemberRoles:input_type -> zitadel.admin.v1.ListIAMMemberRolesRequest
	175, // 249: zitadel.admin.v1.AdminService.ListIAMMembers:input_type -> zitadel.admin.v1.ListIAMMembersRequest
	167, // 250: zitadel.admin.v1.AdminService.AddIAMMember:input_type -> zitadel.admin.v1.AddIAMMemberRequest
	169, // 251: zitadel.admin.v1.AdminService.UpdateIAMMember:input_type -> zitadel.admin.v1.UpdateIAMMemberRequest
	171, // 252: zitadel.admin.v1.AdminService.RemoveIAMMember:input_type -> zitadel.admin.v1.RemoveIAMMemberRequest
	177, // 253: zitadel.admin.v1.AdminService.ListViews:input_type -> zitadel.admin.v1.ListViewsRequest
	179, // 254: zitadel.admin.v1.AdminService.ClearView:input_type -> zitadel.admin.v1.ClearViewRequest
	181, // 255: zitadel.admin.v1.AdminService.ListFailedEvents:input_type -> zitadel.admin.v1.ListFailedEventsRequest
	183, // 256: zitadel.admin.v1.AdminService.RemoveFailedEvent:input_type -> zitadel.admin.v1.RemoveFailedEventRequest
	1,   // 257: zitadel.admin.v1.AdminService.Healthz:output_type -> zitadel.admin.v1.HealthzResponse
	3,   // 258: zitadel.admin.v1.AdminService.GetSupportedLanguages:output_type -> zitadel.admin.v1.GetSupportedLanguagesResponse
	7,   // 259: zitadel.admin.v1.AdminService.GetOrgByID:output_type -> zitadel.admin.v1.GetOrgByIDResponse
	5,   // 260: zitadel.admin.v1.AdminService.IsOrgUnique:output_type -> zitadel.admin.v1.IsOrgUniqueResponse
	9,   // 261: zitadel.admin.v1.AdminService.ListOrgs:output_type -> zitadel.admin.v1.ListOrgsResponse
	11,  // 262: zitadel.admin.v1.AdminService.SetUpOrg:output_type -> zitadel.admin.v1.SetUpOrgResponse
	13,  // 263: zitadel.admin.v1.AdminService.GetIDPByID:output_type -> zitadel.admin.v1.GetIDPByIDResponse
	16,  // 264: zitadel.admin.v1.AdminService.ListIDPs:output_type -> zitadel.admin.v1.ListIDPsResponse
	18,  // 265: zitadel.admin.v1.AdminService.AddOIDCIDP:output_type -> zitadel.admin.v1.AddOIDCIDPResponse
	20,  // 266: zitadel.admin.v1.AdminService.AddJWTIDP:output_type -> zitadel.admin.v1.AddJWTIDPResponse
	22,  // 267: zitadel.admin.v1.AdminService.UpdateIDP:output_type -> zitadel.admin.v1.UpdateIDPResponse
	24,  // 268: zitadel.admin.v1.AdminService.DeactivateIDP:output_type -> zitadel.admin.v1.DeactivateIDPResponse
	26,  // 269: zitadel.admin.v1.AdminService.ReactivateIDP:output_type -> zitadel.admin.v1.ReactivateIDPResponse
	28,  // 270: zitadel.admin.v1.AdminService.RemoveIDP:output_type -> zitadel.admin.v1.RemoveIDPResponse
	30,  // 271: zitadel.admin.v1.AdminService.UpdateIDPOIDCConfig:output_type -> zitadel.admin.v1.UpdateIDPOIDCConfigResponse
	32,  // 272: zitadel.admin.v1.AdminService.UpdateIDPJWTConfig:output_type -> zitadel.admin.v1.UpdateIDPJWTConfigResponse
	34,  // 273: zitadel.admin.v1.AdminService.GetDefaultFeatures:output_type -> zitadel.admin.v1.GetDefaultFeaturesResponse
	36,  // 274: zitadel.admin.v1.AdminService.SetDefaultFeatures:output_type -> zitadel.admin.v1.SetDefaultFeaturesResponse
	38,  // 275: zitadel.admin.v1.AdminService.GetOrgFeatures:output_type -> zitadel.admin.v1.GetOrgFeaturesResponse
	40,  // 276: zitadel.admin.v1.AdminService.SetOrgFeatures:output_type -> zitadel.admin.v1.SetOrgFeaturesResponse
	42,  // 277: zitadel.admin.v1.AdminService.ResetOrgFeatures:output_type -> zitadel.admin.v1.ResetOrgFeaturesResponse
	44,  // 278: zitadel.admin.v1.AdminService.GetOrgIAMPolicy:output_type -> zitadel.admin.v1.GetOrgIAMPolicyResponse
	46,  // 279: zitadel.admin.v1.AdminService.UpdateOrgIAMPolicy:output_type -> zitadel.admin.v1.UpdateOrgIAMPolicyResponse
	48,  // 280: zitadel.admin.v1.AdminService.GetCustomOrgIAMPolicy:output_type -> zitadel.admin.v1.GetCustomOrgIAMPolicyResponse
	50,  // 281: zitadel.admin.v1.AdminService.AddCustomOrgIAMPolicy:output_type -> zitadel.admin.v1.AddCustomOrgIAMPolicyResponse
	52,  // 282: zitadel.admin.v1.AdminService.UpdateCustomOrgIAMPolicy:output_type -> zitadel.admin.v1.UpdateCustomOrgIAMPolicyResponse
	54,  // 283: zitadel.admin.v1.AdminService.ResetCustomOrgIAMPolicyToDefault:output_type -> zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultResponse
	56,  // 284: zitadel.admin.v1.AdminService.GetLabelPolicy:output_type -> zitadel.admin.v1.GetLabelPolicyResponse
	58,  // 285: zitadel.admin.v1.AdminService.GetPreviewLabelPolicy:output_type -> zitadel.admin.v1.GetPreviewLabelPolicyResponse
	60,  // 286: zitadel.admin.v1.AdminService.UpdateLabelPolicy:output_type -> zitadel.admin.v1.UpdateLabelPolicyResponse
	62,  // 287: zitadel.admin.v1.AdminService.ActivateLabelPolicy:output_type -> zitadel.admin.v1.ActivateLabelPolicyResponse
	64,  // 288: zitadel.admin.v1.AdminService.RemoveLabelPolicyLogo:output_type -> zitadel.admin.v1.RemoveLabelPolicyLogoResponse
	66,  // 289: zitadel.admin.v1.AdminService.RemoveLabelPolicyLogoDark:output_type -> zitadel.admin.v1.RemoveLabelPolicyLogoDarkResponse
	68,  // 290: zitadel.admin.v1.AdminService.RemoveLabelPolicyIcon:output_type -> zitadel.admin.v1.RemoveLabelPolicyIconResponse
	70,  // 291: zitadel.admin.v1.AdminService.RemoveLabelPolicyIconDark:output_type -> zitadel.admin.v1.RemoveLabelPolicyIconDarkResponse
	72,  // 292: zitadel.admin.v1.AdminService.RemoveLabelPolicyFont:output_type -> zitadel.admin.v1.RemoveLabelPolicyFontResponse
	74,  // 293: zitadel.admin.v1.AdminService.GetLoginPolicy:output_type -> zitadel.admin.v1.GetLoginPolicyResponse
	76,  // 294: zitadel.admin.v1.AdminService.UpdateLoginPolicy:output_type -> zitadel.admin.v1.UpdateLoginPolicyResponse
	78,  // 295: zitadel.admin.v1.AdminService.ListLoginPolicyIDPs:output_type -> zitadel.admin.v1.ListLoginPolicyIDPsResponse
	80,  // 296: zitadel.admin.v1.AdminService.AddIDPToLoginPolicy:output_type -> zitadel.admin.v1.AddIDPToLoginPolicyResponse
	82,  // 297: zitadel.admin.v1.AdminService.RemoveIDPFromLoginPolicy:output_type -> zitadel.admin.v1.RemoveIDPFromLoginPolicyResponse
	84,  // 298: zitadel.admin.v1.AdminService.ListLoginPolicySecondFactors:output_type -> zitadel.admin.v1.ListLoginPolicySecondFactorsResponse
	86,  // 299: zitadel.admin.v1.AdminService.AddSecondFactorToLoginPolicy:output_type -> zitadel.admin.v1.AddSecondFactorToLoginPolicyResponse
	88,  // 300: zitadel.admin.v1.AdminService.RemoveSecondFactorFromLoginPolicy:output_type -> zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyResponse
	90,  // 301: zitadel.admin.v1.AdminService.ListLoginPolicyMultiFactors:output_type -> zitadel.admin.v1.ListLoginPolicyMultiFactorsResponse
	92,  // 302: zitadel.admin.v1.AdminService.AddMultiFactorToLoginPolicy:output_type -> zitadel.admin.v1.AddMultiFactorToLoginPolicyResponse
	94,  // 303: zitadel.admin.v1.AdminService.RemoveMultiFactorFromLoginPolicy:output_type -> zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyResponse
	96,  // 304: zitadel.admin.v1.AdminService.GetPasswordComplexityPolicy:output_type -> zitadel.admin.v1.GetPasswordComplexityPolicyResponse
	98,  // 305: zitadel.admin.v1.AdminService.UpdatePasswordComplexityPolicy:output_type -> zitadel.admin.v1.UpdatePasswordComplexityPolicyResponse
	100, // 306: zitadel.admin.v1.AdminService.GetPasswordAgePolicy:output_type -> zitadel.admin.v1.GetPasswordAgePolicyResponse
	102, // 307: zitadel.admin.v1.AdminService.UpdatePasswordAgePolicy:output_type -> zitadel.admin.v1.UpdatePasswordAgePolicyResponse
	104, // 308: zitadel.admin.v1.AdminService.GetLockoutPolicy:output_type -> zitadel.admin.v1.GetLockoutPolicyResponse
	106, // 309: zitadel.admin.v1.AdminService.UpdateLockoutPolicy:output_type -> zitadel.admin.v1.UpdateLockoutPolicyResponse
	108, // 310: zitadel.admin.v1.AdminService.GetPrivacyPolicy:output_type -> zitadel.admin.v1.GetPrivacyPolicyResponse
	110, // 311: zitadel.admin.v1.AdminService.UpdatePrivacyPolicy:output_type -> zitadel.admin.v1.UpdatePrivacyPolicyResponse
	112, // 312: zitadel.admin.v1.AdminService.GetDefaultInitMessageText:output_type -> zitadel.admin.v1.GetDefaultInitMessageTextResponse
	114, // 313: zitadel.admin.v1.AdminService.GetCustomInitMessageText:output_type -> zitadel.admin.v1.GetCustomInitMessageTextResponse
	116, // 314: zitadel.admin.v1.AdminService.SetDefaultInitMessageText:output_type -> zitadel.admin.v1.SetDefaultInitMessageTextResponse
	118, // 315: zitadel.admin.v1.AdminService.ResetCustomInitMessageTextToDefault:output_type -> zitadel.admin.v1.ResetCustomInitMessageTextToDefaultResponse
	120, // 316: zitadel.admin.v1.AdminService.GetDefaultPasswordResetMessageText:output_type -> zitadel.admin.v1.GetDefaultPasswordResetMessageTextResponse
	122, // 317: zitadel.admin.v1.AdminService.GetCustomPasswordResetMessageText:output_type -> zitadel.admin.v1.GetCustomPasswordResetMessageTextResponse
	124, // 318: zitadel.admin.v1.AdminService.SetDefaultPasswordResetMessageText:output_type -> zitadel.admin.v1.SetDefaultPasswordResetMessageTextResponse
	126, // 319: zitadel.admin.v1.AdminService.ResetCustomPasswordResetMessageTextToDefault:output_type -> zitadel.admin.v1.ResetCustomPasswordResetMessageTextToDefaultResponse
	128, // 320: zitadel.admin.v1.AdminService.GetDefaultVerifyEmailMessageText:output_type -> zitadel.admin.v1.GetDefaultVerifyEmailMessageTextResponse
	130, // 321: zitadel.admin.v1.AdminService.GetCustomVerifyEmailMessageText:output_type -> zitadel.admin.v1.GetCustomVerifyEmailMessageTextResponse
	132, // 322: zitadel.admin.v1.AdminService.SetDefaultVerifyEmailMessageText:output_type -> zitadel.admin.v1.SetDefaultVerifyEmailMessageTextResponse
	134, // 323: zitadel.admin.v1.AdminService.ResetCustomVerifyEmailMessageTextToDefault:output_type -> zitadel.admin.v1.ResetCustomVerifyEmailMessageTextToDefaultResponse
	136, // 324: zitadel.admin.v1.AdminService.GetDefaultVerifyPhoneMessageText:output_type -> zitadel.admin.v1.GetDefaultVerifyPhoneMessageTextResponse
	138, // 325: zitadel.admin.v1.AdminService.GetCustomVerifyPhoneMessageText:output_type -> zitadel.admin.v1.GetCustomVerifyPhoneMessageTextResponse
	140, // 326: zitadel.admin.v1.AdminService.SetDefaultVerifyPhoneMessageText:output_type -> zitadel.admin.v1.SetDefaultVerifyPhoneMessageTextResponse
	142, // 327: zitadel.admin.v1.AdminService.ResetCustomVerifyPhoneMessageTextToDefault:output_type -> zitadel.admin.v1.ResetCustomVerifyPhoneMessageTextToDefaultResponse
	144, // 328: zitadel.admin.v1.AdminService.GetDefaultDomainClaimedMessageText:output_type -> zitadel.admin.v1.GetDefaultDomainClaimedMessageTextResponse
	146, // 329: zitadel.admin.v1.AdminService.GetCustomDomainClaimedMessageText:output_type -> zitadel.admin.v1.GetCustomDomainClaimedMessageTextResponse
	148, // 330: zitadel.admin.v1.AdminService.SetDefaultDomainClaimedMessageText:output_type -> zitadel.admin.v1.SetDefaultDomainClaimedMessageTextResponse
	150, // 331: zitadel.admin.v1.AdminService.ResetCustomDomainClaimedMessageTextToDefault:output_type -> zitadel.admin.v1.ResetCustomDomainClaimedMessageTextToDefaultResponse
	152, // 332: zitadel.admin.v1.AdminService.GetDefaultPasswordlessRegistrationMessageText:output_type -> zitadel.admin.v1.GetDefaultPasswordlessRegistrationMessageTextResponse
	154, // 333: zitadel.admin.v1.AdminService.GetCustomPasswordlessRegistrationMessageText:output_type -> zitadel.admin.v1.GetCustomPasswordlessRegistrationMessageTextResponse
	156, // 334: zitadel.admin.v1.AdminService.SetDefaultPasswordlessRegistrationMessageText:output_type -> zitadel.admin.v1.SetDefaultPasswordlessRegistrationMessageTextResponse
	158, // 335: zitadel.admin.v1.AdminService.ResetCustomPasswordlessRegistrationMessageTextToDefault:output_type -> zitadel.admin.v1.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse
	160, // 336: zitadel.admin.v1.AdminService.GetDefaultLoginTexts:output_type -> zitadel.admin.v1.GetDefaultLoginTextsResponse
	162, // 337: zitadel.admin.v1.AdminService.GetCustomLoginTexts:output_type -> zitadel.admin.v1.GetCustomLoginTextsResponse
	164, // 338: zitadel.admin.v1.AdminService.SetCustomLoginText:output_type -> zitadel.admin.v1.SetCustomLoginTextsResponse
	166, // 339: zitadel.admin.v1.AdminService.ResetCustomLoginTextToDefault:output_type -> zitadel.admin.v1.ResetCustomLoginTextsToDefaultResponse
	174, // 340: zitadel.admin.v1.AdminService.ListIAMMemberRoles:output_type -> zitadel.admin.v1.ListIAMMemberRolesResponse
	176, // 341: zitadel.admin.v1.AdminService.ListIAMMembers:output_type -> zitadel.admin.v1.ListIAMMembersResponse
	168, // 342: zitadel.admin.v1.AdminService.AddIAMMember:output_type -> zitadel.admin.v1.AddIAMMemberResponse
	170, // 343: zitadel.admin.v1.AdminService.UpdateIAMMember:output_type -> zitadel.admin.v1.UpdateIAMMemberResponse
	172, // 344: zitadel.admin.v1.AdminService.RemoveIAMMember:output_type -> zitadel.admin.v1.RemoveIAMMemberResponse
	178, // 345: zitadel.admin.v1.AdminService.ListViews:output_type -> zitadel.admin.v1.ListViewsResponse
	180, // 346: zitadel.admin.v1.AdminService.ClearView:output_type -> zitadel.admin.v1.ClearViewResponse
	182, // 347: zitadel.admin.v1.AdminService.ListFailedEvents:output_type -> zitadel.admin.v1.ListFailedEventsResponse
	184, // 348: zitadel.admin.v1.AdminService.RemoveFailedEvent:output_type -> zitadel.admin.v1.RemoveFailedEventResponse
	257, // [257:349] is the sub-list for method output_type
	165, // [165:257] is the sub-list for method input_type
	165, // [165:165] is the sub-list for extension type_name
	165, // [165:165] is the sub-list for extension extendee
	0,   // [0:165] is the sub-list for field type_name
}

func init() { file_zitadel_admin_proto_init() }
func file_zitadel_admin_proto_init() {
	if File_zitadel_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportedLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportedLanguagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOrgUniqueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOrgUniqueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIDPByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIDPByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIDPsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIDPsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOIDCIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOIDCIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddJWTIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddJWTIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactivateIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactivateIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIDPOIDCConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIDPOIDCConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIDPJWTConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIDPJWTConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrgFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrgFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetOrgFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetOrgFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgIAMPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgIAMPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomOrgIAMPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCustomOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCustomOrgIAMPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomOrgIAMPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomOrgIAMPolicyToDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomOrgIAMPolicyToDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPreviewLabelPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPreviewLabelPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateLabelPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateLabelPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLabelPolicyLogoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLabelPolicyLogoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLabelPolicyLogoDarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLabelPolicyLogoDarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLabelPolicyIconRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLabelPolicyIconResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLabelPolicyIconDarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLabelPolicyIconDarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLabelPolicyFontRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLabelPolicyFontResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicyIDPsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicyIDPsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIDPToLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIDPToLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIDPFromLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIDPFromLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicySecondFactorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicySecondFactorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSecondFactorToLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSecondFactorToLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSecondFactorFromLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSecondFactorFromLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicyMultiFactorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicyMultiFactorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMultiFactorToLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMultiFactorToLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMultiFactorFromLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMultiFactorFromLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordComplexityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordComplexityPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordComplexityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordComplexityPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordAgePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordAgePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordAgePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordAgePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLockoutPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLockoutPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLockoutPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLockoutPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivacyPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivacyPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePrivacyPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePrivacyPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultInitMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultInitMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomInitMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomInitMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultInitMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultInitMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomInitMessageTextToDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomInitMessageTextToDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultPasswordResetMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultPasswordResetMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomPasswordResetMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomPasswordResetMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultPasswordResetMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultPasswordResetMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomPasswordResetMessageTextToDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomPasswordResetMessageTextToDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultVerifyEmailMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultVerifyEmailMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomVerifyEmailMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomVerifyEmailMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultVerifyEmailMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultVerifyEmailMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomVerifyEmailMessageTextToDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomVerifyEmailMessageTextToDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultVerifyPhoneMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultVerifyPhoneMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomVerifyPhoneMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomVerifyPhoneMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultVerifyPhoneMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultVerifyPhoneMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomVerifyPhoneMessageTextToDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomVerifyPhoneMessageTextToDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultDomainClaimedMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultDomainClaimedMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomDomainClaimedMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomDomainClaimedMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultDomainClaimedMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultDomainClaimedMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomDomainClaimedMessageTextToDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomDomainClaimedMessageTextToDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultPasswordlessRegistrationMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultPasswordlessRegistrationMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomPasswordlessRegistrationMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomPasswordlessRegistrationMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultPasswordlessRegistrationMessageTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultPasswordlessRegistrationMessageTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultLoginTextsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultLoginTextsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomLoginTextsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomLoginTextsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCustomLoginTextsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCustomLoginTextsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomLoginTextsToDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomLoginTextsToDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIAMMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIAMMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIAMMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIAMMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIAMMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIAMMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIAMMemberRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIAMMemberRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIAMMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIAMMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListViewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListViewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFailedEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFailedEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFailedEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFailedEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest_Org); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest_Human); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest_Human_Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest_Human_Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest_Human_Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_admin_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SetUpOrgRequest_Human_)(nil),
	}
	file_zitadel_admin_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*IDPQuery_IdpIdQuery)(nil),
		(*IDPQuery_IdpNameQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   192,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zitadel_admin_proto_goTypes,
		DependencyIndexes: file_zitadel_admin_proto_depIdxs,
		MessageInfos:      file_zitadel_admin_proto_msgTypes,
	}.Build()
	File_zitadel_admin_proto = out.File
	file_zitadel_admin_proto_rawDesc = nil
	file_zitadel_admin_proto_goTypes = nil
	file_zitadel_admin_proto_depIdxs = nil
}
