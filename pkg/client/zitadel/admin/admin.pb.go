// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: zitadel/admin.proto

package admin

import (
	_ "github.com/caos/zitadel-go/pkg/client/zitadel/authoption"
	features "github.com/caos/zitadel-go/pkg/client/zitadel/features"
	idp "github.com/caos/zitadel-go/pkg/client/zitadel/idp"
	member "github.com/caos/zitadel-go/pkg/client/zitadel/member"
	object "github.com/caos/zitadel-go/pkg/client/zitadel/object"
	org "github.com/caos/zitadel-go/pkg/client/zitadel/org"
	policy "github.com/caos/zitadel-go/pkg/client/zitadel/policy"
	user "github.com/caos/zitadel-go/pkg/client/zitadel/user"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//This is an empty request
type HealthzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthzRequest) Reset() {
	*x = HealthzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzRequest) ProtoMessage() {}

func (x *HealthzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzRequest.ProtoReflect.Descriptor instead.
func (*HealthzRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{0}
}

//This is an empty response
type HealthzResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthzResponse) Reset() {
	*x = HealthzResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzResponse) ProtoMessage() {}

func (x *HealthzResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzResponse.ProtoReflect.Descriptor instead.
func (*HealthzResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{1}
}

// if name or domain is already in use, org is not unique
type IsOrgUniqueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *IsOrgUniqueRequest) Reset() {
	*x = IsOrgUniqueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOrgUniqueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOrgUniqueRequest) ProtoMessage() {}

func (x *IsOrgUniqueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOrgUniqueRequest.ProtoReflect.Descriptor instead.
func (*IsOrgUniqueRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{2}
}

func (x *IsOrgUniqueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IsOrgUniqueRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type IsOrgUniqueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUnique bool `protobuf:"varint,1,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
}

func (x *IsOrgUniqueResponse) Reset() {
	*x = IsOrgUniqueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOrgUniqueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOrgUniqueResponse) ProtoMessage() {}

func (x *IsOrgUniqueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOrgUniqueResponse.ProtoReflect.Descriptor instead.
func (*IsOrgUniqueResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{3}
}

func (x *IsOrgUniqueResponse) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

type GetOrgByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrgByIDRequest) Reset() {
	*x = GetOrgByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgByIDRequest) ProtoMessage() {}

func (x *GetOrgByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgByIDRequest.ProtoReflect.Descriptor instead.
func (*GetOrgByIDRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{4}
}

func (x *GetOrgByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOrgByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org *org.Org `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
}

func (x *GetOrgByIDResponse) Reset() {
	*x = GetOrgByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgByIDResponse) ProtoMessage() {}

func (x *GetOrgByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgByIDResponse.ProtoReflect.Descriptor instead.
func (*GetOrgByIDResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{5}
}

func (x *GetOrgByIDResponse) GetOrg() *org.Org {
	if x != nil {
		return x.Org
	}
	return nil
}

type ListOrgsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//list limitations and ordering
	Query *object.ListQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// the field the result is sorted
	SortingColumn org.OrgFieldName `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.org.v1.OrgFieldName" json:"sorting_column,omitempty"`
	//criterias the client is looking for
	Queries []*org.OrgQuery `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ListOrgsRequest) Reset() {
	*x = ListOrgsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgsRequest) ProtoMessage() {}

func (x *ListOrgsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgsRequest.ProtoReflect.Descriptor instead.
func (*ListOrgsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{6}
}

func (x *ListOrgsRequest) GetQuery() *object.ListQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListOrgsRequest) GetSortingColumn() org.OrgFieldName {
	if x != nil {
		return x.SortingColumn
	}
	return org.OrgFieldName_ORG_FIELD_NAME_UNSPECIFIED
}

func (x *ListOrgsRequest) GetQueries() []*org.OrgQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type ListOrgsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details       *object.ListDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	SortingColumn org.OrgFieldName    `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.org.v1.OrgFieldName" json:"sorting_column,omitempty"`
	Result        []*org.Org          `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListOrgsResponse) Reset() {
	*x = ListOrgsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgsResponse) ProtoMessage() {}

func (x *ListOrgsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgsResponse.ProtoReflect.Descriptor instead.
func (*ListOrgsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{7}
}

func (x *ListOrgsResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListOrgsResponse) GetSortingColumn() org.OrgFieldName {
	if x != nil {
		return x.SortingColumn
	}
	return org.OrgFieldName_ORG_FIELD_NAME_UNSPECIFIED
}

func (x *ListOrgsResponse) GetResult() []*org.Org {
	if x != nil {
		return x.Result
	}
	return nil
}

type SetUpOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org *SetUpOrgRequest_Org `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	// Types that are assignable to User:
	//	*SetUpOrgRequest_Human_
	User isSetUpOrgRequest_User `protobuf_oneof:"user"`
}

func (x *SetUpOrgRequest) Reset() {
	*x = SetUpOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest) ProtoMessage() {}

func (x *SetUpOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{8}
}

func (x *SetUpOrgRequest) GetOrg() *SetUpOrgRequest_Org {
	if x != nil {
		return x.Org
	}
	return nil
}

func (m *SetUpOrgRequest) GetUser() isSetUpOrgRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (x *SetUpOrgRequest) GetHuman() *SetUpOrgRequest_Human {
	if x, ok := x.GetUser().(*SetUpOrgRequest_Human_); ok {
		return x.Human
	}
	return nil
}

type isSetUpOrgRequest_User interface {
	isSetUpOrgRequest_User()
}

type SetUpOrgRequest_Human_ struct {
	// oneof field for the user managing the organisation
	Human *SetUpOrgRequest_Human `protobuf:"bytes,2,opt,name=human,proto3,oneof"`
}

func (*SetUpOrgRequest_Human_) isSetUpOrgRequest_User() {}

type SetUpOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	OrgId   string                `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserId  string                `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SetUpOrgResponse) Reset() {
	*x = SetUpOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgResponse) ProtoMessage() {}

func (x *SetUpOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgResponse.ProtoReflect.Descriptor instead.
func (*SetUpOrgResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{9}
}

func (x *SetUpOrgResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SetUpOrgResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SetUpOrgResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetIDPByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIDPByIDRequest) Reset() {
	*x = GetIDPByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIDPByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIDPByIDRequest) ProtoMessage() {}

func (x *GetIDPByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIDPByIDRequest.ProtoReflect.Descriptor instead.
func (*GetIDPByIDRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{10}
}

func (x *GetIDPByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetIDPByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idp *idp.IDP `protobuf:"bytes,1,opt,name=idp,proto3" json:"idp,omitempty"`
}

func (x *GetIDPByIDResponse) Reset() {
	*x = GetIDPByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIDPByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIDPByIDResponse) ProtoMessage() {}

func (x *GetIDPByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIDPByIDResponse.ProtoReflect.Descriptor instead.
func (*GetIDPByIDResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{11}
}

func (x *GetIDPByIDResponse) GetIdp() *idp.IDP {
	if x != nil {
		return x.Idp
	}
	return nil
}

type ListIDPsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//list limitations and ordering
	Query *object.ListQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// the field the result is sorted
	SortingColumn idp.IDPFieldName `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.idp.v1.IDPFieldName" json:"sorting_column,omitempty"`
	//criterias the client is looking for
	Queries []*IDPQuery `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ListIDPsRequest) Reset() {
	*x = ListIDPsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIDPsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIDPsRequest) ProtoMessage() {}

func (x *ListIDPsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIDPsRequest.ProtoReflect.Descriptor instead.
func (*ListIDPsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{12}
}

func (x *ListIDPsRequest) GetQuery() *object.ListQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListIDPsRequest) GetSortingColumn() idp.IDPFieldName {
	if x != nil {
		return x.SortingColumn
	}
	return idp.IDPFieldName_IDP_FIELD_NAME_UNSPECIFIED
}

func (x *ListIDPsRequest) GetQueries() []*IDPQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type IDPQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*IDPQuery_IdpIdQuery
	//	*IDPQuery_IdpNameQuery
	Query isIDPQuery_Query `protobuf_oneof:"query"`
}

func (x *IDPQuery) Reset() {
	*x = IDPQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPQuery) ProtoMessage() {}

func (x *IDPQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPQuery.ProtoReflect.Descriptor instead.
func (*IDPQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{13}
}

func (m *IDPQuery) GetQuery() isIDPQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *IDPQuery) GetIdpIdQuery() *idp.IDPIDQuery {
	if x, ok := x.GetQuery().(*IDPQuery_IdpIdQuery); ok {
		return x.IdpIdQuery
	}
	return nil
}

func (x *IDPQuery) GetIdpNameQuery() *idp.IDPNameQuery {
	if x, ok := x.GetQuery().(*IDPQuery_IdpNameQuery); ok {
		return x.IdpNameQuery
	}
	return nil
}

type isIDPQuery_Query interface {
	isIDPQuery_Query()
}

type IDPQuery_IdpIdQuery struct {
	IdpIdQuery *idp.IDPIDQuery `protobuf:"bytes,1,opt,name=idp_id_query,json=idpIdQuery,proto3,oneof"`
}

type IDPQuery_IdpNameQuery struct {
	IdpNameQuery *idp.IDPNameQuery `protobuf:"bytes,2,opt,name=idp_name_query,json=idpNameQuery,proto3,oneof"`
}

func (*IDPQuery_IdpIdQuery) isIDPQuery_Query() {}

func (*IDPQuery_IdpNameQuery) isIDPQuery_Query() {}

type ListIDPsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details       *object.ListDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	SortingColumn idp.IDPFieldName    `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.idp.v1.IDPFieldName" json:"sorting_column,omitempty"`
	Result        []*idp.IDP          `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListIDPsResponse) Reset() {
	*x = ListIDPsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIDPsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIDPsResponse) ProtoMessage() {}

func (x *ListIDPsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIDPsResponse.ProtoReflect.Descriptor instead.
func (*ListIDPsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{14}
}

func (x *ListIDPsResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListIDPsResponse) GetSortingColumn() idp.IDPFieldName {
	if x != nil {
		return x.SortingColumn
	}
	return idp.IDPFieldName_IDP_FIELD_NAME_UNSPECIFIED
}

func (x *ListIDPsResponse) GetResult() []*idp.IDP {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddOIDCIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StylingType        idp.IDPStylingType   `protobuf:"varint,2,opt,name=styling_type,json=stylingType,proto3,enum=zitadel.idp.v1.IDPStylingType" json:"styling_type,omitempty"`
	ClientId           string               `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret       string               `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Issuer             string               `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Scopes             []string             `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
	DisplayNameMapping idp.OIDCMappingField `protobuf:"varint,7,opt,name=display_name_mapping,json=displayNameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"display_name_mapping,omitempty"`
	UsernameMapping    idp.OIDCMappingField `protobuf:"varint,8,opt,name=username_mapping,json=usernameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"username_mapping,omitempty"`
}

func (x *AddOIDCIDPRequest) Reset() {
	*x = AddOIDCIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOIDCIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOIDCIDPRequest) ProtoMessage() {}

func (x *AddOIDCIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOIDCIDPRequest.ProtoReflect.Descriptor instead.
func (*AddOIDCIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{15}
}

func (x *AddOIDCIDPRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOIDCIDPRequest) GetStylingType() idp.IDPStylingType {
	if x != nil {
		return x.StylingType
	}
	return idp.IDPStylingType_STYLING_TYPE_UNSPECIFIED
}

func (x *AddOIDCIDPRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AddOIDCIDPRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *AddOIDCIDPRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *AddOIDCIDPRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *AddOIDCIDPRequest) GetDisplayNameMapping() idp.OIDCMappingField {
	if x != nil {
		return x.DisplayNameMapping
	}
	return idp.OIDCMappingField_OIDC_MAPPING_FIELD_UNSPECIFIED
}

func (x *AddOIDCIDPRequest) GetUsernameMapping() idp.OIDCMappingField {
	if x != nil {
		return x.UsernameMapping
	}
	return idp.OIDCMappingField_OIDC_MAPPING_FIELD_UNSPECIFIED
}

type AddOIDCIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	IdpId   string                `protobuf:"bytes,2,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *AddOIDCIDPResponse) Reset() {
	*x = AddOIDCIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOIDCIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOIDCIDPResponse) ProtoMessage() {}

func (x *AddOIDCIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOIDCIDPResponse.ProtoReflect.Descriptor instead.
func (*AddOIDCIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{16}
}

func (x *AddOIDCIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *AddOIDCIDPResponse) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type UpdateIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId       string             `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	Name        string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StylingType idp.IDPStylingType `protobuf:"varint,3,opt,name=styling_type,json=stylingType,proto3,enum=zitadel.idp.v1.IDPStylingType" json:"styling_type,omitempty"`
}

func (x *UpdateIDPRequest) Reset() {
	*x = UpdateIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIDPRequest) ProtoMessage() {}

func (x *UpdateIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIDPRequest.ProtoReflect.Descriptor instead.
func (*UpdateIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateIDPRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *UpdateIDPRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateIDPRequest) GetStylingType() idp.IDPStylingType {
	if x != nil {
		return x.StylingType
	}
	return idp.IDPStylingType_STYLING_TYPE_UNSPECIFIED
}

type UpdateIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateIDPResponse) Reset() {
	*x = UpdateIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIDPResponse) ProtoMessage() {}

func (x *UpdateIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIDPResponse.ProtoReflect.Descriptor instead.
func (*UpdateIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type DeactivateIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *DeactivateIDPRequest) Reset() {
	*x = DeactivateIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateIDPRequest) ProtoMessage() {}

func (x *DeactivateIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateIDPRequest.ProtoReflect.Descriptor instead.
func (*DeactivateIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{19}
}

func (x *DeactivateIDPRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type DeactivateIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *DeactivateIDPResponse) Reset() {
	*x = DeactivateIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateIDPResponse) ProtoMessage() {}

func (x *DeactivateIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateIDPResponse.ProtoReflect.Descriptor instead.
func (*DeactivateIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{20}
}

func (x *DeactivateIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ReactivateIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *ReactivateIDPRequest) Reset() {
	*x = ReactivateIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactivateIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactivateIDPRequest) ProtoMessage() {}

func (x *ReactivateIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactivateIDPRequest.ProtoReflect.Descriptor instead.
func (*ReactivateIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{21}
}

func (x *ReactivateIDPRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type ReactivateIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ReactivateIDPResponse) Reset() {
	*x = ReactivateIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactivateIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactivateIDPResponse) ProtoMessage() {}

func (x *ReactivateIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactivateIDPResponse.ProtoReflect.Descriptor instead.
func (*ReactivateIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{22}
}

func (x *ReactivateIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveIDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *RemoveIDPRequest) Reset() {
	*x = RemoveIDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIDPRequest) ProtoMessage() {}

func (x *RemoveIDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIDPRequest.ProtoReflect.Descriptor instead.
func (*RemoveIDPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{23}
}

func (x *RemoveIDPRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type RemoveIDPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveIDPResponse) Reset() {
	*x = RemoveIDPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIDPResponse) ProtoMessage() {}

func (x *RemoveIDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIDPResponse.ProtoReflect.Descriptor instead.
func (*RemoveIDPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{24}
}

func (x *RemoveIDPResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type UpdateIDPOIDCConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId              string               `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	Issuer             string               `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ClientId           string               `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret       string               `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Scopes             []string             `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`
	DisplayNameMapping idp.OIDCMappingField `protobuf:"varint,6,opt,name=display_name_mapping,json=displayNameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"display_name_mapping,omitempty"`
	UsernameMapping    idp.OIDCMappingField `protobuf:"varint,7,opt,name=username_mapping,json=usernameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"username_mapping,omitempty"`
}

func (x *UpdateIDPOIDCConfigRequest) Reset() {
	*x = UpdateIDPOIDCConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIDPOIDCConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIDPOIDCConfigRequest) ProtoMessage() {}

func (x *UpdateIDPOIDCConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIDPOIDCConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateIDPOIDCConfigRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateIDPOIDCConfigRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *UpdateIDPOIDCConfigRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *UpdateIDPOIDCConfigRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UpdateIDPOIDCConfigRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *UpdateIDPOIDCConfigRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *UpdateIDPOIDCConfigRequest) GetDisplayNameMapping() idp.OIDCMappingField {
	if x != nil {
		return x.DisplayNameMapping
	}
	return idp.OIDCMappingField_OIDC_MAPPING_FIELD_UNSPECIFIED
}

func (x *UpdateIDPOIDCConfigRequest) GetUsernameMapping() idp.OIDCMappingField {
	if x != nil {
		return x.UsernameMapping
	}
	return idp.OIDCMappingField_OIDC_MAPPING_FIELD_UNSPECIFIED
}

type UpdateIDPOIDCConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateIDPOIDCConfigResponse) Reset() {
	*x = UpdateIDPOIDCConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIDPOIDCConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIDPOIDCConfigResponse) ProtoMessage() {}

func (x *UpdateIDPOIDCConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIDPOIDCConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateIDPOIDCConfigResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateIDPOIDCConfigResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetDefaultFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDefaultFeaturesRequest) Reset() {
	*x = GetDefaultFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultFeaturesRequest) ProtoMessage() {}

func (x *GetDefaultFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultFeaturesRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{27}
}

type GetDefaultFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features *features.Features `protobuf:"bytes,1,opt,name=features,proto3" json:"features,omitempty"`
}

func (x *GetDefaultFeaturesResponse) Reset() {
	*x = GetDefaultFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultFeaturesResponse) ProtoMessage() {}

func (x *GetDefaultFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{28}
}

func (x *GetDefaultFeaturesResponse) GetFeatures() *features.Features {
	if x != nil {
		return x.Features
	}
	return nil
}

type SetDefaultFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TierName                 string             `protobuf:"bytes,1,opt,name=tier_name,json=tierName,proto3" json:"tier_name,omitempty"`
	Description              string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AuditLogRetention        *duration.Duration `protobuf:"bytes,5,opt,name=audit_log_retention,json=auditLogRetention,proto3" json:"audit_log_retention,omitempty"`
	LoginPolicyUsernameLogin bool               `protobuf:"varint,6,opt,name=login_policy_username_login,json=loginPolicyUsernameLogin,proto3" json:"login_policy_username_login,omitempty"`
	LoginPolicyRegistration  bool               `protobuf:"varint,7,opt,name=login_policy_registration,json=loginPolicyRegistration,proto3" json:"login_policy_registration,omitempty"`
	LoginPolicyIdp           bool               `protobuf:"varint,8,opt,name=login_policy_idp,json=loginPolicyIdp,proto3" json:"login_policy_idp,omitempty"`
	LoginPolicyFactors       bool               `protobuf:"varint,9,opt,name=login_policy_factors,json=loginPolicyFactors,proto3" json:"login_policy_factors,omitempty"`
	LoginPolicyPasswordless  bool               `protobuf:"varint,10,opt,name=login_policy_passwordless,json=loginPolicyPasswordless,proto3" json:"login_policy_passwordless,omitempty"`
	PasswordComplexityPolicy bool               `protobuf:"varint,11,opt,name=password_complexity_policy,json=passwordComplexityPolicy,proto3" json:"password_complexity_policy,omitempty"`
	LabelPolicy              bool               `protobuf:"varint,12,opt,name=label_policy,json=labelPolicy,proto3" json:"label_policy,omitempty"`
	CustomDomain             bool               `protobuf:"varint,13,opt,name=custom_domain,json=customDomain,proto3" json:"custom_domain,omitempty"`
}

func (x *SetDefaultFeaturesRequest) Reset() {
	*x = SetDefaultFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultFeaturesRequest) ProtoMessage() {}

func (x *SetDefaultFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultFeaturesRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{29}
}

func (x *SetDefaultFeaturesRequest) GetTierName() string {
	if x != nil {
		return x.TierName
	}
	return ""
}

func (x *SetDefaultFeaturesRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetDefaultFeaturesRequest) GetAuditLogRetention() *duration.Duration {
	if x != nil {
		return x.AuditLogRetention
	}
	return nil
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyUsernameLogin() bool {
	if x != nil {
		return x.LoginPolicyUsernameLogin
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyRegistration() bool {
	if x != nil {
		return x.LoginPolicyRegistration
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyIdp() bool {
	if x != nil {
		return x.LoginPolicyIdp
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyFactors() bool {
	if x != nil {
		return x.LoginPolicyFactors
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLoginPolicyPasswordless() bool {
	if x != nil {
		return x.LoginPolicyPasswordless
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetPasswordComplexityPolicy() bool {
	if x != nil {
		return x.PasswordComplexityPolicy
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetLabelPolicy() bool {
	if x != nil {
		return x.LabelPolicy
	}
	return false
}

func (x *SetDefaultFeaturesRequest) GetCustomDomain() bool {
	if x != nil {
		return x.CustomDomain
	}
	return false
}

type SetDefaultFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetDefaultFeaturesResponse) Reset() {
	*x = SetDefaultFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultFeaturesResponse) ProtoMessage() {}

func (x *SetDefaultFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultFeaturesResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{30}
}

func (x *SetDefaultFeaturesResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetOrgFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetOrgFeaturesRequest) Reset() {
	*x = GetOrgFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgFeaturesRequest) ProtoMessage() {}

func (x *GetOrgFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgFeaturesRequest.ProtoReflect.Descriptor instead.
func (*GetOrgFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{31}
}

func (x *GetOrgFeaturesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetOrgFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features *features.Features `protobuf:"bytes,1,opt,name=features,proto3" json:"features,omitempty"`
}

func (x *GetOrgFeaturesResponse) Reset() {
	*x = GetOrgFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgFeaturesResponse) ProtoMessage() {}

func (x *GetOrgFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetOrgFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{32}
}

func (x *GetOrgFeaturesResponse) GetFeatures() *features.Features {
	if x != nil {
		return x.Features
	}
	return nil
}

type SetOrgFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                    string                 `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	TierName                 string                 `protobuf:"bytes,2,opt,name=tier_name,json=tierName,proto3" json:"tier_name,omitempty"`
	Description              string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State                    features.FeaturesState `protobuf:"varint,4,opt,name=state,proto3,enum=zitadel.features.v1.FeaturesState" json:"state,omitempty"`
	StateDescription         string                 `protobuf:"bytes,5,opt,name=state_description,json=stateDescription,proto3" json:"state_description,omitempty"`
	AuditLogRetention        *duration.Duration     `protobuf:"bytes,6,opt,name=audit_log_retention,json=auditLogRetention,proto3" json:"audit_log_retention,omitempty"`
	LoginPolicyUsernameLogin bool                   `protobuf:"varint,7,opt,name=login_policy_username_login,json=loginPolicyUsernameLogin,proto3" json:"login_policy_username_login,omitempty"`
	LoginPolicyRegistration  bool                   `protobuf:"varint,8,opt,name=login_policy_registration,json=loginPolicyRegistration,proto3" json:"login_policy_registration,omitempty"`
	LoginPolicyIdp           bool                   `protobuf:"varint,9,opt,name=login_policy_idp,json=loginPolicyIdp,proto3" json:"login_policy_idp,omitempty"`
	LoginPolicyFactors       bool                   `protobuf:"varint,10,opt,name=login_policy_factors,json=loginPolicyFactors,proto3" json:"login_policy_factors,omitempty"`
	LoginPolicyPasswordless  bool                   `protobuf:"varint,11,opt,name=login_policy_passwordless,json=loginPolicyPasswordless,proto3" json:"login_policy_passwordless,omitempty"`
	PasswordComplexityPolicy bool                   `protobuf:"varint,12,opt,name=password_complexity_policy,json=passwordComplexityPolicy,proto3" json:"password_complexity_policy,omitempty"`
	LabelPolicy              bool                   `protobuf:"varint,13,opt,name=label_policy,json=labelPolicy,proto3" json:"label_policy,omitempty"`
	CustomDomain             bool                   `protobuf:"varint,14,opt,name=custom_domain,json=customDomain,proto3" json:"custom_domain,omitempty"`
}

func (x *SetOrgFeaturesRequest) Reset() {
	*x = SetOrgFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgFeaturesRequest) ProtoMessage() {}

func (x *SetOrgFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgFeaturesRequest.ProtoReflect.Descriptor instead.
func (*SetOrgFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{33}
}

func (x *SetOrgFeaturesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SetOrgFeaturesRequest) GetTierName() string {
	if x != nil {
		return x.TierName
	}
	return ""
}

func (x *SetOrgFeaturesRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetOrgFeaturesRequest) GetState() features.FeaturesState {
	if x != nil {
		return x.State
	}
	return features.FeaturesState_FEATURES_STATE_ACTIVE
}

func (x *SetOrgFeaturesRequest) GetStateDescription() string {
	if x != nil {
		return x.StateDescription
	}
	return ""
}

func (x *SetOrgFeaturesRequest) GetAuditLogRetention() *duration.Duration {
	if x != nil {
		return x.AuditLogRetention
	}
	return nil
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyUsernameLogin() bool {
	if x != nil {
		return x.LoginPolicyUsernameLogin
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyRegistration() bool {
	if x != nil {
		return x.LoginPolicyRegistration
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyIdp() bool {
	if x != nil {
		return x.LoginPolicyIdp
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyFactors() bool {
	if x != nil {
		return x.LoginPolicyFactors
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLoginPolicyPasswordless() bool {
	if x != nil {
		return x.LoginPolicyPasswordless
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetPasswordComplexityPolicy() bool {
	if x != nil {
		return x.PasswordComplexityPolicy
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetLabelPolicy() bool {
	if x != nil {
		return x.LabelPolicy
	}
	return false
}

func (x *SetOrgFeaturesRequest) GetCustomDomain() bool {
	if x != nil {
		return x.CustomDomain
	}
	return false
}

type SetOrgFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetOrgFeaturesResponse) Reset() {
	*x = SetOrgFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgFeaturesResponse) ProtoMessage() {}

func (x *SetOrgFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgFeaturesResponse.ProtoReflect.Descriptor instead.
func (*SetOrgFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{34}
}

func (x *SetOrgFeaturesResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetOrgFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *ResetOrgFeaturesRequest) Reset() {
	*x = ResetOrgFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetOrgFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetOrgFeaturesRequest) ProtoMessage() {}

func (x *ResetOrgFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetOrgFeaturesRequest.ProtoReflect.Descriptor instead.
func (*ResetOrgFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{35}
}

func (x *ResetOrgFeaturesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ResetOrgFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetOrgFeaturesResponse) Reset() {
	*x = ResetOrgFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetOrgFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetOrgFeaturesResponse) ProtoMessage() {}

func (x *ResetOrgFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetOrgFeaturesResponse.ProtoReflect.Descriptor instead.
func (*ResetOrgFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{36}
}

func (x *ResetOrgFeaturesResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOrgIAMPolicyRequest) Reset() {
	*x = GetOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgIAMPolicyRequest) ProtoMessage() {}

func (x *GetOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{37}
}

type GetOrgIAMPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.OrgIAMPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetOrgIAMPolicyResponse) Reset() {
	*x = GetOrgIAMPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgIAMPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgIAMPolicyResponse) ProtoMessage() {}

func (x *GetOrgIAMPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgIAMPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetOrgIAMPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{38}
}

func (x *GetOrgIAMPolicyResponse) GetPolicy() *policy.OrgIAMPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdateOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLoginMustBeDomain bool `protobuf:"varint,1,opt,name=user_login_must_be_domain,json=userLoginMustBeDomain,proto3" json:"user_login_must_be_domain,omitempty"`
}

func (x *UpdateOrgIAMPolicyRequest) Reset() {
	*x = UpdateOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgIAMPolicyRequest) ProtoMessage() {}

func (x *UpdateOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateOrgIAMPolicyRequest) GetUserLoginMustBeDomain() bool {
	if x != nil {
		return x.UserLoginMustBeDomain
	}
	return false
}

type UpdateOrgIAMPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateOrgIAMPolicyResponse) Reset() {
	*x = UpdateOrgIAMPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgIAMPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgIAMPolicyResponse) ProtoMessage() {}

func (x *UpdateOrgIAMPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgIAMPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrgIAMPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateOrgIAMPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetCustomOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetCustomOrgIAMPolicyRequest) Reset() {
	*x = GetCustomOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomOrgIAMPolicyRequest) ProtoMessage() {}

func (x *GetCustomOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetCustomOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{41}
}

func (x *GetCustomOrgIAMPolicyRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetCustomOrgIAMPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy    *policy.OrgIAMPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	IsDefault bool                 `protobuf:"varint,2,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *GetCustomOrgIAMPolicyResponse) Reset() {
	*x = GetCustomOrgIAMPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomOrgIAMPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomOrgIAMPolicyResponse) ProtoMessage() {}

func (x *GetCustomOrgIAMPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomOrgIAMPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetCustomOrgIAMPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{42}
}

func (x *GetCustomOrgIAMPolicyResponse) GetPolicy() *policy.OrgIAMPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *GetCustomOrgIAMPolicyResponse) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type AddCustomOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                 string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserLoginMustBeDomain bool   `protobuf:"varint,2,opt,name=user_login_must_be_domain,json=userLoginMustBeDomain,proto3" json:"user_login_must_be_domain,omitempty"` // the username has to end with the domain of it's organisation (uniqueness is organisation based)
}

func (x *AddCustomOrgIAMPolicyRequest) Reset() {
	*x = AddCustomOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomOrgIAMPolicyRequest) ProtoMessage() {}

func (x *AddCustomOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddCustomOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{43}
}

func (x *AddCustomOrgIAMPolicyRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AddCustomOrgIAMPolicyRequest) GetUserLoginMustBeDomain() bool {
	if x != nil {
		return x.UserLoginMustBeDomain
	}
	return false
}

type AddCustomOrgIAMPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddCustomOrgIAMPolicyResponse) Reset() {
	*x = AddCustomOrgIAMPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomOrgIAMPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomOrgIAMPolicyResponse) ProtoMessage() {}

func (x *AddCustomOrgIAMPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomOrgIAMPolicyResponse.ProtoReflect.Descriptor instead.
func (*AddCustomOrgIAMPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{44}
}

func (x *AddCustomOrgIAMPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type UpdateCustomOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                 string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserLoginMustBeDomain bool   `protobuf:"varint,2,opt,name=user_login_must_be_domain,json=userLoginMustBeDomain,proto3" json:"user_login_must_be_domain,omitempty"`
}

func (x *UpdateCustomOrgIAMPolicyRequest) Reset() {
	*x = UpdateCustomOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomOrgIAMPolicyRequest) ProtoMessage() {}

func (x *UpdateCustomOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateCustomOrgIAMPolicyRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateCustomOrgIAMPolicyRequest) GetUserLoginMustBeDomain() bool {
	if x != nil {
		return x.UserLoginMustBeDomain
	}
	return false
}

type UpdateCustomOrgIAMPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateCustomOrgIAMPolicyResponse) Reset() {
	*x = UpdateCustomOrgIAMPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomOrgIAMPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomOrgIAMPolicyResponse) ProtoMessage() {}

func (x *UpdateCustomOrgIAMPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomOrgIAMPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomOrgIAMPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateCustomOrgIAMPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetCustomOrgIAMPolicyToDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *ResetCustomOrgIAMPolicyToDefaultRequest) Reset() {
	*x = ResetCustomOrgIAMPolicyToDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomOrgIAMPolicyToDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomOrgIAMPolicyToDefaultRequest) ProtoMessage() {}

func (x *ResetCustomOrgIAMPolicyToDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomOrgIAMPolicyToDefaultRequest.ProtoReflect.Descriptor instead.
func (*ResetCustomOrgIAMPolicyToDefaultRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{47}
}

func (x *ResetCustomOrgIAMPolicyToDefaultRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ResetCustomOrgIAMPolicyToDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetCustomOrgIAMPolicyToDefaultResponse) Reset() {
	*x = ResetCustomOrgIAMPolicyToDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCustomOrgIAMPolicyToDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCustomOrgIAMPolicyToDefaultResponse) ProtoMessage() {}

func (x *ResetCustomOrgIAMPolicyToDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCustomOrgIAMPolicyToDefaultResponse.ProtoReflect.Descriptor instead.
func (*ResetCustomOrgIAMPolicyToDefaultResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{48}
}

func (x *ResetCustomOrgIAMPolicyToDefaultResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type GetLabelPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLabelPolicyRequest) Reset() {
	*x = GetLabelPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelPolicyRequest) ProtoMessage() {}

func (x *GetLabelPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetLabelPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{49}
}

type GetLabelPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.LabelPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetLabelPolicyResponse) Reset() {
	*x = GetLabelPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelPolicyResponse) ProtoMessage() {}

func (x *GetLabelPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetLabelPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{50}
}

func (x *GetLabelPolicyResponse) GetPolicy() *policy.LabelPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdateLabelPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryColor        string `protobuf:"bytes,1,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	SecondaryColor      string `protobuf:"bytes,2,opt,name=secondary_color,json=secondaryColor,proto3" json:"secondary_color,omitempty"`
	HideLoginNameSuffix bool   `protobuf:"varint,3,opt,name=hide_login_name_suffix,json=hideLoginNameSuffix,proto3" json:"hide_login_name_suffix,omitempty"`
}

func (x *UpdateLabelPolicyRequest) Reset() {
	*x = UpdateLabelPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelPolicyRequest) ProtoMessage() {}

func (x *UpdateLabelPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabelPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateLabelPolicyRequest) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *UpdateLabelPolicyRequest) GetSecondaryColor() string {
	if x != nil {
		return x.SecondaryColor
	}
	return ""
}

func (x *UpdateLabelPolicyRequest) GetHideLoginNameSuffix() bool {
	if x != nil {
		return x.HideLoginNameSuffix
	}
	return false
}

type UpdateLabelPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateLabelPolicyResponse) Reset() {
	*x = UpdateLabelPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelPolicyResponse) ProtoMessage() {}

func (x *UpdateLabelPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateLabelPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateLabelPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type GetLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLoginPolicyRequest) Reset() {
	*x = GetLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginPolicyRequest) ProtoMessage() {}

func (x *GetLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{53}
}

type GetLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.LoginPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetLoginPolicyResponse) Reset() {
	*x = GetLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginPolicyResponse) ProtoMessage() {}

func (x *GetLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{54}
}

func (x *GetLoginPolicyResponse) GetPolicy() *policy.LoginPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdateLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowUsernamePassword bool                    `protobuf:"varint,1,opt,name=allow_username_password,json=allowUsernamePassword,proto3" json:"allow_username_password,omitempty"`
	AllowRegister         bool                    `protobuf:"varint,2,opt,name=allow_register,json=allowRegister,proto3" json:"allow_register,omitempty"`
	AllowExternalIdp      bool                    `protobuf:"varint,3,opt,name=allow_external_idp,json=allowExternalIdp,proto3" json:"allow_external_idp,omitempty"`
	ForceMfa              bool                    `protobuf:"varint,4,opt,name=force_mfa,json=forceMfa,proto3" json:"force_mfa,omitempty"`
	PasswordlessType      policy.PasswordlessType `protobuf:"varint,5,opt,name=passwordless_type,json=passwordlessType,proto3,enum=zitadel.policy.v1.PasswordlessType" json:"passwordless_type,omitempty"`
}

func (x *UpdateLoginPolicyRequest) Reset() {
	*x = UpdateLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLoginPolicyRequest) ProtoMessage() {}

func (x *UpdateLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{55}
}

func (x *UpdateLoginPolicyRequest) GetAllowUsernamePassword() bool {
	if x != nil {
		return x.AllowUsernamePassword
	}
	return false
}

func (x *UpdateLoginPolicyRequest) GetAllowRegister() bool {
	if x != nil {
		return x.AllowRegister
	}
	return false
}

func (x *UpdateLoginPolicyRequest) GetAllowExternalIdp() bool {
	if x != nil {
		return x.AllowExternalIdp
	}
	return false
}

func (x *UpdateLoginPolicyRequest) GetForceMfa() bool {
	if x != nil {
		return x.ForceMfa
	}
	return false
}

func (x *UpdateLoginPolicyRequest) GetPasswordlessType() policy.PasswordlessType {
	if x != nil {
		return x.PasswordlessType
	}
	return policy.PasswordlessType_PASSWORDLESS_TYPE_NOT_ALLOWED
}

type UpdateLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateLoginPolicyResponse) Reset() {
	*x = UpdateLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLoginPolicyResponse) ProtoMessage() {}

func (x *UpdateLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ListLoginPolicyIDPsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//list limitations and ordering
	Query *object.ListQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListLoginPolicyIDPsRequest) Reset() {
	*x = ListLoginPolicyIDPsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicyIDPsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicyIDPsRequest) ProtoMessage() {}

func (x *ListLoginPolicyIDPsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicyIDPsRequest.ProtoReflect.Descriptor instead.
func (*ListLoginPolicyIDPsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{57}
}

func (x *ListLoginPolicyIDPsRequest) GetQuery() *object.ListQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type ListLoginPolicyIDPsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ListDetails       `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Result  []*idp.IDPLoginPolicyLink `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListLoginPolicyIDPsResponse) Reset() {
	*x = ListLoginPolicyIDPsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicyIDPsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicyIDPsResponse) ProtoMessage() {}

func (x *ListLoginPolicyIDPsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicyIDPsResponse.ProtoReflect.Descriptor instead.
func (*ListLoginPolicyIDPsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{58}
}

func (x *ListLoginPolicyIDPsResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListLoginPolicyIDPsResponse) GetResult() []*idp.IDPLoginPolicyLink {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddIDPToLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"` // Id of the predefined idp configuration
}

func (x *AddIDPToLoginPolicyRequest) Reset() {
	*x = AddIDPToLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIDPToLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIDPToLoginPolicyRequest) ProtoMessage() {}

func (x *AddIDPToLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIDPToLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddIDPToLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{59}
}

func (x *AddIDPToLoginPolicyRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type AddIDPToLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddIDPToLoginPolicyResponse) Reset() {
	*x = AddIDPToLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIDPToLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIDPToLoginPolicyResponse) ProtoMessage() {}

func (x *AddIDPToLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIDPToLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*AddIDPToLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{60}
}

func (x *AddIDPToLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveIDPFromLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
}

func (x *RemoveIDPFromLoginPolicyRequest) Reset() {
	*x = RemoveIDPFromLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIDPFromLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIDPFromLoginPolicyRequest) ProtoMessage() {}

func (x *RemoveIDPFromLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIDPFromLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*RemoveIDPFromLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{61}
}

func (x *RemoveIDPFromLoginPolicyRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

type RemoveIDPFromLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveIDPFromLoginPolicyResponse) Reset() {
	*x = RemoveIDPFromLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIDPFromLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIDPFromLoginPolicyResponse) ProtoMessage() {}

func (x *RemoveIDPFromLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIDPFromLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*RemoveIDPFromLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{62}
}

func (x *RemoveIDPFromLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type ListLoginPolicySecondFactorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListLoginPolicySecondFactorsRequest) Reset() {
	*x = ListLoginPolicySecondFactorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicySecondFactorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicySecondFactorsRequest) ProtoMessage() {}

func (x *ListLoginPolicySecondFactorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicySecondFactorsRequest.ProtoReflect.Descriptor instead.
func (*ListLoginPolicySecondFactorsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{63}
}

type ListLoginPolicySecondFactorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ListDetails       `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Result  []policy.SecondFactorType `protobuf:"varint,2,rep,packed,name=result,proto3,enum=zitadel.policy.v1.SecondFactorType" json:"result,omitempty"`
}

func (x *ListLoginPolicySecondFactorsResponse) Reset() {
	*x = ListLoginPolicySecondFactorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicySecondFactorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicySecondFactorsResponse) ProtoMessage() {}

func (x *ListLoginPolicySecondFactorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicySecondFactorsResponse.ProtoReflect.Descriptor instead.
func (*ListLoginPolicySecondFactorsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{64}
}

func (x *ListLoginPolicySecondFactorsResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListLoginPolicySecondFactorsResponse) GetResult() []policy.SecondFactorType {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddSecondFactorToLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type policy.SecondFactorType `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.policy.v1.SecondFactorType" json:"type,omitempty"`
}

func (x *AddSecondFactorToLoginPolicyRequest) Reset() {
	*x = AddSecondFactorToLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSecondFactorToLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSecondFactorToLoginPolicyRequest) ProtoMessage() {}

func (x *AddSecondFactorToLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSecondFactorToLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddSecondFactorToLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{65}
}

func (x *AddSecondFactorToLoginPolicyRequest) GetType() policy.SecondFactorType {
	if x != nil {
		return x.Type
	}
	return policy.SecondFactorType_SECOND_FACTOR_TYPE_UNSPECIFIED
}

type AddSecondFactorToLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddSecondFactorToLoginPolicyResponse) Reset() {
	*x = AddSecondFactorToLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSecondFactorToLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSecondFactorToLoginPolicyResponse) ProtoMessage() {}

func (x *AddSecondFactorToLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSecondFactorToLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*AddSecondFactorToLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{66}
}

func (x *AddSecondFactorToLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveSecondFactorFromLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type policy.SecondFactorType `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.policy.v1.SecondFactorType" json:"type,omitempty"`
}

func (x *RemoveSecondFactorFromLoginPolicyRequest) Reset() {
	*x = RemoveSecondFactorFromLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSecondFactorFromLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSecondFactorFromLoginPolicyRequest) ProtoMessage() {}

func (x *RemoveSecondFactorFromLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSecondFactorFromLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*RemoveSecondFactorFromLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{67}
}

func (x *RemoveSecondFactorFromLoginPolicyRequest) GetType() policy.SecondFactorType {
	if x != nil {
		return x.Type
	}
	return policy.SecondFactorType_SECOND_FACTOR_TYPE_UNSPECIFIED
}

type RemoveSecondFactorFromLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveSecondFactorFromLoginPolicyResponse) Reset() {
	*x = RemoveSecondFactorFromLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSecondFactorFromLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSecondFactorFromLoginPolicyResponse) ProtoMessage() {}

func (x *RemoveSecondFactorFromLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSecondFactorFromLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*RemoveSecondFactorFromLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{68}
}

func (x *RemoveSecondFactorFromLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type ListLoginPolicyMultiFactorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListLoginPolicyMultiFactorsRequest) Reset() {
	*x = ListLoginPolicyMultiFactorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicyMultiFactorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicyMultiFactorsRequest) ProtoMessage() {}

func (x *ListLoginPolicyMultiFactorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicyMultiFactorsRequest.ProtoReflect.Descriptor instead.
func (*ListLoginPolicyMultiFactorsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{69}
}

type ListLoginPolicyMultiFactorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ListDetails      `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Result  []policy.MultiFactorType `protobuf:"varint,2,rep,packed,name=result,proto3,enum=zitadel.policy.v1.MultiFactorType" json:"result,omitempty"`
}

func (x *ListLoginPolicyMultiFactorsResponse) Reset() {
	*x = ListLoginPolicyMultiFactorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoginPolicyMultiFactorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoginPolicyMultiFactorsResponse) ProtoMessage() {}

func (x *ListLoginPolicyMultiFactorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoginPolicyMultiFactorsResponse.ProtoReflect.Descriptor instead.
func (*ListLoginPolicyMultiFactorsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{70}
}

func (x *ListLoginPolicyMultiFactorsResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListLoginPolicyMultiFactorsResponse) GetResult() []policy.MultiFactorType {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddMultiFactorToLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type policy.MultiFactorType `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.policy.v1.MultiFactorType" json:"type,omitempty"`
}

func (x *AddMultiFactorToLoginPolicyRequest) Reset() {
	*x = AddMultiFactorToLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMultiFactorToLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMultiFactorToLoginPolicyRequest) ProtoMessage() {}

func (x *AddMultiFactorToLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMultiFactorToLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddMultiFactorToLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{71}
}

func (x *AddMultiFactorToLoginPolicyRequest) GetType() policy.MultiFactorType {
	if x != nil {
		return x.Type
	}
	return policy.MultiFactorType_MULTI_FACTOR_TYPE_UNSPECIFIED
}

type AddMultiFactorToLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddMultiFactorToLoginPolicyResponse) Reset() {
	*x = AddMultiFactorToLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMultiFactorToLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMultiFactorToLoginPolicyResponse) ProtoMessage() {}

func (x *AddMultiFactorToLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMultiFactorToLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*AddMultiFactorToLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{72}
}

func (x *AddMultiFactorToLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveMultiFactorFromLoginPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type policy.MultiFactorType `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.policy.v1.MultiFactorType" json:"type,omitempty"`
}

func (x *RemoveMultiFactorFromLoginPolicyRequest) Reset() {
	*x = RemoveMultiFactorFromLoginPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMultiFactorFromLoginPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMultiFactorFromLoginPolicyRequest) ProtoMessage() {}

func (x *RemoveMultiFactorFromLoginPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMultiFactorFromLoginPolicyRequest.ProtoReflect.Descriptor instead.
func (*RemoveMultiFactorFromLoginPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{73}
}

func (x *RemoveMultiFactorFromLoginPolicyRequest) GetType() policy.MultiFactorType {
	if x != nil {
		return x.Type
	}
	return policy.MultiFactorType_MULTI_FACTOR_TYPE_UNSPECIFIED
}

type RemoveMultiFactorFromLoginPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveMultiFactorFromLoginPolicyResponse) Reset() {
	*x = RemoveMultiFactorFromLoginPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMultiFactorFromLoginPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMultiFactorFromLoginPolicyResponse) ProtoMessage() {}

func (x *RemoveMultiFactorFromLoginPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMultiFactorFromLoginPolicyResponse.ProtoReflect.Descriptor instead.
func (*RemoveMultiFactorFromLoginPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{74}
}

func (x *RemoveMultiFactorFromLoginPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetPasswordComplexityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPasswordComplexityPolicyRequest) Reset() {
	*x = GetPasswordComplexityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordComplexityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordComplexityPolicyRequest) ProtoMessage() {}

func (x *GetPasswordComplexityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordComplexityPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPasswordComplexityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{75}
}

type GetPasswordComplexityPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.PasswordComplexityPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetPasswordComplexityPolicyResponse) Reset() {
	*x = GetPasswordComplexityPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordComplexityPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordComplexityPolicyResponse) ProtoMessage() {}

func (x *GetPasswordComplexityPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordComplexityPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPasswordComplexityPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{76}
}

func (x *GetPasswordComplexityPolicyResponse) GetPolicy() *policy.PasswordComplexityPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdatePasswordComplexityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinLength    uint32 `protobuf:"varint,1,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	HasUppercase bool   `protobuf:"varint,2,opt,name=has_uppercase,json=hasUppercase,proto3" json:"has_uppercase,omitempty"`
	HasLowercase bool   `protobuf:"varint,3,opt,name=has_lowercase,json=hasLowercase,proto3" json:"has_lowercase,omitempty"`
	HasNumber    bool   `protobuf:"varint,4,opt,name=has_number,json=hasNumber,proto3" json:"has_number,omitempty"`
	HasSymbol    bool   `protobuf:"varint,5,opt,name=has_symbol,json=hasSymbol,proto3" json:"has_symbol,omitempty"`
}

func (x *UpdatePasswordComplexityPolicyRequest) Reset() {
	*x = UpdatePasswordComplexityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordComplexityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordComplexityPolicyRequest) ProtoMessage() {}

func (x *UpdatePasswordComplexityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordComplexityPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePasswordComplexityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{77}
}

func (x *UpdatePasswordComplexityPolicyRequest) GetMinLength() uint32 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *UpdatePasswordComplexityPolicyRequest) GetHasUppercase() bool {
	if x != nil {
		return x.HasUppercase
	}
	return false
}

func (x *UpdatePasswordComplexityPolicyRequest) GetHasLowercase() bool {
	if x != nil {
		return x.HasLowercase
	}
	return false
}

func (x *UpdatePasswordComplexityPolicyRequest) GetHasNumber() bool {
	if x != nil {
		return x.HasNumber
	}
	return false
}

func (x *UpdatePasswordComplexityPolicyRequest) GetHasSymbol() bool {
	if x != nil {
		return x.HasSymbol
	}
	return false
}

type UpdatePasswordComplexityPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdatePasswordComplexityPolicyResponse) Reset() {
	*x = UpdatePasswordComplexityPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordComplexityPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordComplexityPolicyResponse) ProtoMessage() {}

func (x *UpdatePasswordComplexityPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordComplexityPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePasswordComplexityPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{78}
}

func (x *UpdatePasswordComplexityPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type GetPasswordAgePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPasswordAgePolicyRequest) Reset() {
	*x = GetPasswordAgePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordAgePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordAgePolicyRequest) ProtoMessage() {}

func (x *GetPasswordAgePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordAgePolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPasswordAgePolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{79}
}

type GetPasswordAgePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.PasswordAgePolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetPasswordAgePolicyResponse) Reset() {
	*x = GetPasswordAgePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordAgePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordAgePolicyResponse) ProtoMessage() {}

func (x *GetPasswordAgePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordAgePolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPasswordAgePolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{80}
}

func (x *GetPasswordAgePolicyResponse) GetPolicy() *policy.PasswordAgePolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdatePasswordAgePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAgeDays     uint32 `protobuf:"varint,1,opt,name=max_age_days,json=maxAgeDays,proto3" json:"max_age_days,omitempty"`
	ExpireWarnDays uint32 `protobuf:"varint,2,opt,name=expire_warn_days,json=expireWarnDays,proto3" json:"expire_warn_days,omitempty"`
}

func (x *UpdatePasswordAgePolicyRequest) Reset() {
	*x = UpdatePasswordAgePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordAgePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordAgePolicyRequest) ProtoMessage() {}

func (x *UpdatePasswordAgePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordAgePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePasswordAgePolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{81}
}

func (x *UpdatePasswordAgePolicyRequest) GetMaxAgeDays() uint32 {
	if x != nil {
		return x.MaxAgeDays
	}
	return 0
}

func (x *UpdatePasswordAgePolicyRequest) GetExpireWarnDays() uint32 {
	if x != nil {
		return x.ExpireWarnDays
	}
	return 0
}

type UpdatePasswordAgePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdatePasswordAgePolicyResponse) Reset() {
	*x = UpdatePasswordAgePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordAgePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordAgePolicyResponse) ProtoMessage() {}

func (x *UpdatePasswordAgePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordAgePolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePasswordAgePolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{82}
}

func (x *UpdatePasswordAgePolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type GetPasswordLockoutPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPasswordLockoutPolicyRequest) Reset() {
	*x = GetPasswordLockoutPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordLockoutPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordLockoutPolicyRequest) ProtoMessage() {}

func (x *GetPasswordLockoutPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordLockoutPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPasswordLockoutPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{83}
}

type GetPasswordLockoutPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *policy.PasswordLockoutPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetPasswordLockoutPolicyResponse) Reset() {
	*x = GetPasswordLockoutPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordLockoutPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordLockoutPolicyResponse) ProtoMessage() {}

func (x *GetPasswordLockoutPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordLockoutPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPasswordLockoutPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{84}
}

func (x *GetPasswordLockoutPolicyResponse) GetPolicy() *policy.PasswordLockoutPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdatePasswordLockoutPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// failed attempts until a user gets locked
	MaxAttempts uint32 `protobuf:"varint,1,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	// If an error should be displayed during a lockout or not
	ShowLockoutFailure bool `protobuf:"varint,2,opt,name=show_lockout_failure,json=showLockoutFailure,proto3" json:"show_lockout_failure,omitempty"`
}

func (x *UpdatePasswordLockoutPolicyRequest) Reset() {
	*x = UpdatePasswordLockoutPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordLockoutPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordLockoutPolicyRequest) ProtoMessage() {}

func (x *UpdatePasswordLockoutPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordLockoutPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePasswordLockoutPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{85}
}

func (x *UpdatePasswordLockoutPolicyRequest) GetMaxAttempts() uint32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *UpdatePasswordLockoutPolicyRequest) GetShowLockoutFailure() bool {
	if x != nil {
		return x.ShowLockoutFailure
	}
	return false
}

type UpdatePasswordLockoutPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdatePasswordLockoutPolicyResponse) Reset() {
	*x = UpdatePasswordLockoutPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePasswordLockoutPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePasswordLockoutPolicyResponse) ProtoMessage() {}

func (x *UpdatePasswordLockoutPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePasswordLockoutPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePasswordLockoutPolicyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{86}
}

func (x *UpdatePasswordLockoutPolicyResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type AddIAMMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	//if no roles provided the user won't have any rights
	Roles []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *AddIAMMemberRequest) Reset() {
	*x = AddIAMMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIAMMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIAMMemberRequest) ProtoMessage() {}

func (x *AddIAMMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIAMMemberRequest.ProtoReflect.Descriptor instead.
func (*AddIAMMemberRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{87}
}

func (x *AddIAMMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddIAMMemberRequest) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type AddIAMMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddIAMMemberResponse) Reset() {
	*x = AddIAMMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIAMMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIAMMemberResponse) ProtoMessage() {}

func (x *AddIAMMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIAMMemberResponse.ProtoReflect.Descriptor instead.
func (*AddIAMMemberResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{88}
}

func (x *AddIAMMemberResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type UpdateIAMMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	//if no roles provided the user won't have any rights
	Roles []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *UpdateIAMMemberRequest) Reset() {
	*x = UpdateIAMMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIAMMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIAMMemberRequest) ProtoMessage() {}

func (x *UpdateIAMMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIAMMemberRequest.ProtoReflect.Descriptor instead.
func (*UpdateIAMMemberRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateIAMMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateIAMMemberRequest) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type UpdateIAMMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateIAMMemberResponse) Reset() {
	*x = UpdateIAMMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIAMMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIAMMemberResponse) ProtoMessage() {}

func (x *UpdateIAMMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIAMMemberResponse.ProtoReflect.Descriptor instead.
func (*UpdateIAMMemberResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{90}
}

func (x *UpdateIAMMemberResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveIAMMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RemoveIAMMemberRequest) Reset() {
	*x = RemoveIAMMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIAMMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIAMMemberRequest) ProtoMessage() {}

func (x *RemoveIAMMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIAMMemberRequest.ProtoReflect.Descriptor instead.
func (*RemoveIAMMemberRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{91}
}

func (x *RemoveIAMMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RemoveIAMMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveIAMMemberResponse) Reset() {
	*x = RemoveIAMMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIAMMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIAMMemberResponse) ProtoMessage() {}

func (x *RemoveIAMMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIAMMemberResponse.ProtoReflect.Descriptor instead.
func (*RemoveIAMMemberResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{92}
}

func (x *RemoveIAMMemberResponse) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

//This is an empty request
type ListIAMMemberRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListIAMMemberRolesRequest) Reset() {
	*x = ListIAMMemberRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIAMMemberRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIAMMemberRolesRequest) ProtoMessage() {}

func (x *ListIAMMemberRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIAMMemberRolesRequest.ProtoReflect.Descriptor instead.
func (*ListIAMMemberRolesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{93}
}

type ListIAMMemberRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ListDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Roles   []string            `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *ListIAMMemberRolesResponse) Reset() {
	*x = ListIAMMemberRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIAMMemberRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIAMMemberRolesResponse) ProtoMessage() {}

func (x *ListIAMMemberRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIAMMemberRolesResponse.ProtoReflect.Descriptor instead.
func (*ListIAMMemberRolesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{94}
}

func (x *ListIAMMemberRolesResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListIAMMemberRolesResponse) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type ListIAMMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//list limitations and ordering
	Query *object.ListQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	//criterias the client is looking for
	Queries []*member.SearchQuery `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ListIAMMembersRequest) Reset() {
	*x = ListIAMMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIAMMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIAMMembersRequest) ProtoMessage() {}

func (x *ListIAMMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIAMMembersRequest.ProtoReflect.Descriptor instead.
func (*ListIAMMembersRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{95}
}

func (x *ListIAMMembersRequest) GetQuery() *object.ListQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListIAMMembersRequest) GetQueries() []*member.SearchQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type ListIAMMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ListDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Result  []*member.Member    `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListIAMMembersResponse) Reset() {
	*x = ListIAMMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIAMMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIAMMembersResponse) ProtoMessage() {}

func (x *ListIAMMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIAMMembersResponse.ProtoReflect.Descriptor instead.
func (*ListIAMMembersResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{96}
}

func (x *ListIAMMembersResponse) GetDetails() *object.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListIAMMembersResponse) GetResult() []*member.Member {
	if x != nil {
		return x.Result
	}
	return nil
}

//This is an empty request
type ListViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListViewsRequest) Reset() {
	*x = ListViewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListViewsRequest) ProtoMessage() {}

func (x *ListViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListViewsRequest.ProtoReflect.Descriptor instead.
func (*ListViewsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{97}
}

type ListViewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//TODO: list details
	Result []*View `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListViewsResponse) Reset() {
	*x = ListViewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListViewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListViewsResponse) ProtoMessage() {}

func (x *ListViewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListViewsResponse.ProtoReflect.Descriptor instead.
func (*ListViewsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{98}
}

func (x *ListViewsResponse) GetResult() []*View {
	if x != nil {
		return x.Result
	}
	return nil
}

type ClearViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	ViewName string `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
}

func (x *ClearViewRequest) Reset() {
	*x = ClearViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearViewRequest) ProtoMessage() {}

func (x *ClearViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearViewRequest.ProtoReflect.Descriptor instead.
func (*ClearViewRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{99}
}

func (x *ClearViewRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClearViewRequest) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

//This is an empty response
type ClearViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearViewResponse) Reset() {
	*x = ClearViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearViewResponse) ProtoMessage() {}

func (x *ClearViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearViewResponse.ProtoReflect.Descriptor instead.
func (*ClearViewResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{100}
}

//This is an empty request
type ListFailedEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFailedEventsRequest) Reset() {
	*x = ListFailedEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFailedEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFailedEventsRequest) ProtoMessage() {}

func (x *ListFailedEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFailedEventsRequest.ProtoReflect.Descriptor instead.
func (*ListFailedEventsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{101}
}

type ListFailedEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//TODO: list details
	Result []*FailedEvent `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListFailedEventsResponse) Reset() {
	*x = ListFailedEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFailedEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFailedEventsResponse) ProtoMessage() {}

func (x *ListFailedEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFailedEventsResponse.ProtoReflect.Descriptor instead.
func (*ListFailedEventsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{102}
}

func (x *ListFailedEventsResponse) GetResult() []*FailedEvent {
	if x != nil {
		return x.Result
	}
	return nil
}

type RemoveFailedEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database       string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	ViewName       string `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	FailedSequence uint64 `protobuf:"varint,3,opt,name=failed_sequence,json=failedSequence,proto3" json:"failed_sequence,omitempty"`
}

func (x *RemoveFailedEventRequest) Reset() {
	*x = RemoveFailedEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFailedEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFailedEventRequest) ProtoMessage() {}

func (x *RemoveFailedEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFailedEventRequest.ProtoReflect.Descriptor instead.
func (*RemoveFailedEventRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{103}
}

func (x *RemoveFailedEventRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *RemoveFailedEventRequest) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *RemoveFailedEventRequest) GetFailedSequence() uint64 {
	if x != nil {
		return x.FailedSequence
	}
	return 0
}

//This is an empty response
type RemoveFailedEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveFailedEventResponse) Reset() {
	*x = RemoveFailedEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFailedEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFailedEventResponse) ProtoMessage() {}

func (x *RemoveFailedEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFailedEventResponse.ProtoReflect.Descriptor instead.
func (*RemoveFailedEventResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{104}
}

type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database                 string               `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	ViewName                 string               `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	ProcessedSequence        uint64               `protobuf:"varint,3,opt,name=processed_sequence,json=processedSequence,proto3" json:"processed_sequence,omitempty"`
	EventTimestamp           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=event_timestamp,json=eventTimestamp,proto3" json:"event_timestamp,omitempty"` // The timestamp the event occured
	LastSuccessfulSpoolerRun *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_successful_spooler_run,json=lastSuccessfulSpoolerRun,proto3" json:"last_successful_spooler_run,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{105}
}

func (x *View) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *View) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *View) GetProcessedSequence() uint64 {
	if x != nil {
		return x.ProcessedSequence
	}
	return 0
}

func (x *View) GetEventTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.EventTimestamp
	}
	return nil
}

func (x *View) GetLastSuccessfulSpoolerRun() *timestamp.Timestamp {
	if x != nil {
		return x.LastSuccessfulSpoolerRun
	}
	return nil
}

type FailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database       string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	ViewName       string `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	FailedSequence uint64 `protobuf:"varint,3,opt,name=failed_sequence,json=failedSequence,proto3" json:"failed_sequence,omitempty"`
	FailureCount   uint64 `protobuf:"varint,4,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	ErrorMessage   string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *FailedEvent) Reset() {
	*x = FailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedEvent) ProtoMessage() {}

func (x *FailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedEvent.ProtoReflect.Descriptor instead.
func (*FailedEvent) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{106}
}

func (x *FailedEvent) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *FailedEvent) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *FailedEvent) GetFailedSequence() uint64 {
	if x != nil {
		return x.FailedSequence
	}
	return 0
}

func (x *FailedEvent) GetFailureCount() uint64 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *FailedEvent) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type SetUpOrgRequest_Org struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *SetUpOrgRequest_Org) Reset() {
	*x = SetUpOrgRequest_Org{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest_Org) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest_Org) ProtoMessage() {}

func (x *SetUpOrgRequest_Org) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest_Org.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest_Org) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SetUpOrgRequest_Org) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetUpOrgRequest_Org) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type SetUpOrgRequest_Human struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string                         `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Profile  *SetUpOrgRequest_Human_Profile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	Email    *SetUpOrgRequest_Human_Email   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone    *SetUpOrgRequest_Human_Phone   `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Password string                         `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SetUpOrgRequest_Human) Reset() {
	*x = SetUpOrgRequest_Human{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest_Human) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest_Human) ProtoMessage() {}

func (x *SetUpOrgRequest_Human) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest_Human.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest_Human) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{8, 1}
}

func (x *SetUpOrgRequest_Human) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SetUpOrgRequest_Human) GetProfile() *SetUpOrgRequest_Human_Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *SetUpOrgRequest_Human) GetEmail() *SetUpOrgRequest_Human_Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *SetUpOrgRequest_Human) GetPhone() *SetUpOrgRequest_Human_Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *SetUpOrgRequest_Human) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SetUpOrgRequest_Human_Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName         string      `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName          string      `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	NickName          string      `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	DisplayName       string      `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	PreferredLanguage string      `protobuf:"bytes,5,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	Gender            user.Gender `protobuf:"varint,6,opt,name=gender,proto3,enum=zitadel.user.v1.Gender" json:"gender,omitempty"`
}

func (x *SetUpOrgRequest_Human_Profile) Reset() {
	*x = SetUpOrgRequest_Human_Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest_Human_Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest_Human_Profile) ProtoMessage() {}

func (x *SetUpOrgRequest_Human_Profile) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest_Human_Profile.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest_Human_Profile) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{8, 1, 0}
}

func (x *SetUpOrgRequest_Human_Profile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Profile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Profile) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Profile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Profile) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Profile) GetGender() user.Gender {
	if x != nil {
		return x.Gender
	}
	return user.Gender_GENDER_UNSPECIFIED
}

type SetUpOrgRequest_Human_Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email           string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"` //TODO: check if no value is allowed
	IsEmailVerified bool   `protobuf:"varint,2,opt,name=is_email_verified,json=isEmailVerified,proto3" json:"is_email_verified,omitempty"`
}

func (x *SetUpOrgRequest_Human_Email) Reset() {
	*x = SetUpOrgRequest_Human_Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest_Human_Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest_Human_Email) ProtoMessage() {}

func (x *SetUpOrgRequest_Human_Email) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest_Human_Email.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest_Human_Email) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{8, 1, 1}
}

func (x *SetUpOrgRequest_Human_Email) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Email) GetIsEmailVerified() bool {
	if x != nil {
		return x.IsEmailVerified
	}
	return false
}

type SetUpOrgRequest_Human_Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// has to be a global number
	Phone           string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	IsPhoneVerified bool   `protobuf:"varint,2,opt,name=is_phone_verified,json=isPhoneVerified,proto3" json:"is_phone_verified,omitempty"`
}

func (x *SetUpOrgRequest_Human_Phone) Reset() {
	*x = SetUpOrgRequest_Human_Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_admin_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpOrgRequest_Human_Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpOrgRequest_Human_Phone) ProtoMessage() {}

func (x *SetUpOrgRequest_Human_Phone) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_admin_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpOrgRequest_Human_Phone.ProtoReflect.Descriptor instead.
func (*SetUpOrgRequest_Human_Phone) Descriptor() ([]byte, []int) {
	return file_zitadel_admin_proto_rawDescGZIP(), []int{8, 1, 2}
}

func (x *SetUpOrgRequest_Human_Phone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SetUpOrgRequest_Human_Phone) GetIsPhoneVerified() bool {
	if x != nil {
		return x.IsPhoneVerified
	}
	return false
}

var File_zitadel_admin_proto protoreflect.FileDescriptor

var file_zitadel_admin_proto_rawDesc = []byte{
	0x0a, 0x13, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x69, 0x64, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xbd, 0x01, 0x0a, 0x12, 0x49, 0x73, 0x4f, 0x72, 0x67, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x92, 0x41, 0x11, 0x4a, 0x09, 0x22, 0x43, 0x41, 0x4f, 0x53, 0x20, 0x41, 0x47, 0x22, 0x78, 0xc8,
	0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x11, 0x4a, 0x09, 0x22, 0x63, 0x61, 0x6f, 0x73,
	0x2e, 0x63, 0x68, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x32, 0x24, 0x41, 0x6c, 0x6c, 0x20, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x6e, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2,
	0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0x32, 0x0a, 0x13, 0x49, 0x73, 0x4f, 0x72, 0x67, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30,
	0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x3b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x22,
	0xde, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x43, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20,
	0x32, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0xd2, 0x01, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0xb7, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2b, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x67, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf1, 0x0e, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f,
	0x72, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6f, 0x72,
	0x67, 0x12, 0x3f, 0x0a, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x1a, 0xde, 0x01, 0x0a, 0x03, 0x4f, 0x72, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x11, 0x4a, 0x09, 0x22, 0x43, 0x41, 0x4f, 0x53, 0x20, 0x41,
	0x47, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x94,
	0x01, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x7c, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x71, 0x32, 0x61, 0x5a, 0x49,
	0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x20,
	0x61, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x28, 0x3c, 0x6f, 0x72, 0x67, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x3e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x29,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20,
	0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4a,
	0x09, 0x22, 0x63, 0x61, 0x6f, 0x73, 0x2e, 0x63, 0x68, 0x22, 0x78, 0xc8, 0x01, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0xa2, 0x0b, 0x0a, 0x05, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x40, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x16, 0x4a,
	0x0e, 0x22, 0x6d, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x63, 0x6b, 0x22, 0x78,
	0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x53, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x4a, 0x14, 0x22, 0x6d, 0x79, 0x5f, 0x35, 0x33, 0x63, 0x72, 0x33, 0x74, 0x2d, 0x50, 0x34,
	0x24, 0x24, 0x77, 0x30, 0x72, 0x64, 0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x1a, 0xa9, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x0e,
	0x4a, 0x06, 0x22, 0x47, 0x69, 0x67, 0x69, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x11, 0x4a, 0x09, 0x22, 0x47, 0x69,
	0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x65,
	0x63, 0x6b, 0x22, 0x78, 0xc8, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7a, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x92, 0x41, 0x6f, 0x32, 0x5a, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x73, 0x65, 0x74, 0x20, 0x68, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x73, 0x20, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x4a, 0x0e, 0x22, 0x47, 0x69, 0x67, 0x69, 0x20, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22,
	0x78, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x7a, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x0a, 0x92, 0x41, 0x41, 0x32, 0x37, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x20, 0x74, 0x61, 0x67, 0x20, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x65, 0x74, 0x66,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2f, 0x72, 0x66, 0x63, 0x33, 0x30, 0x36,
	0x36, 0x4a, 0x04, 0x22, 0x65, 0x6e, 0x22, 0x78, 0x0a, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x3a, 0x1e, 0x92,
	0x41, 0x1b, 0x0a, 0x19, 0xd2, 0x01, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0xd2, 0x01, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xce, 0x01,
	0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x89, 0x01, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01,
	0x92, 0x41, 0x69, 0x32, 0x54, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x20,
	0x28, 0x73, 0x70, 0x65, 0x63, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x65, 0x74, 0x66, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x68, 0x74,
	0x6d, 0x6c, 0x2f, 0x72, 0x66, 0x63, 0x32, 0x38, 0x32, 0x32, 0x23, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x33, 0x2e, 0x34, 0x2e, 0x31, 0x29, 0x4a, 0x0e, 0x22, 0x67, 0x69, 0x67, 0x69,
	0x40, 0x63, 0x61, 0x6f, 0x73, 0x2e, 0x63, 0x68, 0x22, 0x80, 0x01, 0x01, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a,
	0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0xe7,
	0x01, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8b, 0x01, 0xfa, 0x42, 0x09, 0x72, 0x07,
	0x10, 0x01, 0x18, 0x32, 0x3a, 0x01, 0x2b, 0x92, 0x41, 0x7c, 0x32, 0x61, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x20, 0x28, 0x75, 0x73,
	0x65, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x65, 0x74, 0x66, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x68, 0x74, 0x6d, 0x6c, 0x2f, 0x72, 0x66, 0x63, 0x33, 0x39, 0x36, 0x36, 0x29, 0x4a, 0x12, 0x22,
	0x2b, 0x34, 0x31, 0x20, 0x37, 0x31, 0x20, 0x30, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30,
	0x22, 0x78, 0x32, 0x80, 0x01, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08,
	0xd2, 0x01, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0xd2,
	0x01, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0xd2, 0x01, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x32,
	0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x74, 0x20,
	0x75, 0x70, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0xd2, 0x01, 0x03, 0x6f, 0x72, 0x67, 0xd2, 0x01, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x0b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x77,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x44,
	0x50, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x32, 0x33, 0x34, 0x32,
	0x33, 0x30, 0x31, 0x39, 0x33, 0x38, 0x37, 0x32, 0x39, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x44, 0x50,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03,
	0x69, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x52, 0x03,
	0x69, 0x64, 0x70, 0x22, 0xb9, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x50, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44,
	0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44,
	0x50, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x99, 0x01, 0x0a, 0x08, 0x49, 0x44, 0x50, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0c,
	0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x64, 0x70, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0e,
	0x69, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9b, 0x08, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4f, 0x49, 0x44,
	0x43, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x10, 0x4a, 0x08, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x98,
	0x01, 0x0a, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x53, 0x74, 0x79, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x55, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x92,
	0x41, 0x4a, 0x32, 0x48, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x74,
	0x79, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x34, 0x32, 0x2c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x45, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x38, 0x32,
	0x30, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x74, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5c, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x92, 0x41, 0x4f, 0x32, 0x28, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x69, 0x64, 0x63, 0x20, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1d,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x78, 0xc8, 0x01,
	0x80, 0x01, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x70, 0x92, 0x41,
	0x6d, 0x32, 0x4b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44,
	0x45, 0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1e,
	0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5d, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x4d, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x92, 0x41, 0x42, 0x32, 0x40, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x46, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x3a, 0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0xd2, 0x01, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x44,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x64, 0x70, 0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x69, 0x64,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x10, 0x4a, 0x08, 0x22, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x98, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x53, 0x74, 0x79, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x55, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x92, 0x41, 0x4a, 0x32, 0x48, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e,
	0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x0b,
	0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x2f, 0x92, 0x41, 0x2c,
	0x0a, 0x2a, 0x32, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x70, 0xd2, 0x01, 0x06, 0x69,
	0x64, 0x70, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x67, 0x0a, 0x14, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x3a,
	0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x22,
	0x4c, 0x0a, 0x15, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x67, 0x0a,
	0x14, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39,
	0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52,
	0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06,
	0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x63, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30,
	0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80,
	0x01, 0x01, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09,
	0xd2, 0x01, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xad, 0x07, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x50, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41,
	0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x69, 0x64,
	0x70, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x5c, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92,
	0x41, 0x4f, 0x32, 0x28, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x69, 0x64, 0x63, 0x20, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1d, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01,
	0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x34, 0x32, 0x2c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x68, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x5d, 0x32, 0x58,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x20, 0x49, 0x66, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x78, 0xc8, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x70, 0x92, 0x41, 0x6d, 0x32,
	0x4b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c,
	0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1e, 0x5b, 0x22,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x4d, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x92,
	0x41, 0x42, 0x32, 0x40, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x46, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x92,
	0x41, 0x3b, 0x32, 0x39, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x3a, 0x23,
	0x92, 0x41, 0x20, 0x0a, 0x1e, 0xd2, 0x01, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0xd2, 0x01,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50,
	0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xdc, 0x04,
	0x0a, 0x19, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x74,
	0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x74, 0x69, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x32, 0x00,
	0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x51, 0x0a, 0x1a,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x3a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xec, 0x05, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x74, 0x69, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01,
	0x02, 0x32, 0x00, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0x4d, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x3c,
	0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x18,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x18, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x55, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0x51, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49,
	0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x70, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x23, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33,
	0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67,
	0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0xed, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72,
	0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1c,
	0x4a, 0x14, 0x22, 0x23, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x22, 0x54, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67,
	0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32,
	0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8,
	0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x19, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62,
	0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x41,
	0x92, 0x41, 0x3e, 0x32, 0x3c, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x74, 0x27, 0x73, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x75, 0x73, 0x74,
	0x42, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2,
	0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x7a, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x6f, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39,
	0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x3a, 0x0e, 0x92,
	0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x5f, 0x0a,
	0x28, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49,
	0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x17,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xff, 0x03, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x92, 0x41, 0x2c, 0x32, 0x1a, 0x72, 0x65, 0x73,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x09, 0x22, 0x23, 0x33, 0x35, 0x33, 0x35, 0x33,
	0x35, 0x22, 0x78, 0x32, 0x80, 0x01, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x92, 0x41, 0x2c, 0x32, 0x1a, 0x72, 0x65,
	0x73, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x09, 0x22, 0x23, 0x37, 0x30, 0x37, 0x30,
	0x37, 0x30, 0x22, 0x78, 0x32, 0x80, 0x01, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xf7, 0x01, 0x0a, 0x16, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0xc1, 0x01, 0x92, 0x41, 0xbd, 0x01,
	0x32, 0xba, 0x01, 0x68, 0x69, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67,
	0x20, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x22, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x3a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x7b, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x22, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2e,
	0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x13, 0x68,
	0x69, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x3a, 0x27, 0x92, 0x41, 0x24, 0x0a, 0x22, 0xd2, 0x01, 0x0d, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0xd2, 0x01, 0x0f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x17, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xfe, 0x04, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x44, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x68, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x72, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x32, 0x46, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x69, 0x66, 0x20, 0x61, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x84, 0x01,
	0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32,
	0x51, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x64, 0x64, 0x20, 0x61, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x20, 0x45, 0x2e, 0x67, 0x2e, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x70, 0x12, 0x55, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x66,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x4d, 0x55, 0x53, 0x54, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x69,
	0x6e, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x66, 0x61, 0x12, 0x8b, 0x01, 0x0a, 0x11,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x39, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x49, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44,
	0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x50, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6d, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x49, 0x44, 0x50, 0x54,
	0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92,
	0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36,
	0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x69,
	0x64, 0x70, 0x49, 0x64, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x49, 0x44, 0x50, 0x54, 0x6f,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x72, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x44, 0x50, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69,
	0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36,
	0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78,
	0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x3a, 0x0e, 0x92, 0x41,
	0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x20,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x96, 0x01, 0x0a,
	0x24, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x78, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x5b, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x7d, 0x0a, 0x28,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x92,
	0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x29, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x24, 0x0a,
	0x22, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x76, 0x0a, 0x22, 0x41, 0x64,
	0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x5a, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x7b,
	0x0a, 0x27, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x92,
	0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x28, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x24, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x6a, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xc8,
	0x03, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x92, 0x41,
	0x05, 0x4a, 0x03, 0x22, 0x38, 0x22, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x63, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x70, 0x70, 0x65, 0x72, 0x20, 0x63, 0x61, 0x73,
	0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3d, 0x92,
	0x41, 0x3a, 0x32, 0x38, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53, 0x54,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x61,
	0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x68, 0x61,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31,
	0x92, 0x41, 0x2e, 0x32, 0x2c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53,
	0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0a,
	0x68, 0x61, 0x73, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x37, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d,
	0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x20, 0x45, 0x2e, 0x67, 0x2e, 0x20, 0x22, 0x24, 0x22, 0x52, 0x09,
	0x68, 0x61, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x5d, 0x0a, 0x26, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xfc, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x33,
	0x92, 0x41, 0x30, 0x32, 0x27, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x64, 0x61, 0x79,
	0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x05, 0x22, 0x33,
	0x36, 0x35, 0x22, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x82, 0x01, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x58, 0x92, 0x41, 0x55, 0x32,
	0x4d, 0x44, 0x61, 0x79, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4a, 0x04,
	0x22, 0x31, 0x30, 0x22, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x22, 0x56, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x21, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x92, 0x02, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xb9, 0x01, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x95, 0x01, 0x92, 0x41, 0x91, 0x01, 0x32, 0x88, 0x01, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x20, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x20, 0x61, 0x73, 0x20, 0x73, 0x6f, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x2e, 0x4a, 0x04, 0x22, 0x31, 0x30, 0x22, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0x5a, 0x0a, 0x23, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x7f, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x49, 0x41, 0x4d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x49, 0x41,
	0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x1b, 0x4a,
	0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38,
	0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2,
	0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x6c, 0x0a, 0x16, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30,
	0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x38, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x43, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x12, 0x4a, 0x0a, 0x22, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x41, 0x15, 0x4a, 0x0d, 0x22, 0x69, 0x61, 0x6d, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x08, 0x76,
	0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x1c, 0x92, 0x41, 0x19, 0x0a, 0x17, 0xd2, 0x01,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0xd2, 0x01, 0x09, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x92, 0x41, 0x12, 0x4a, 0x0a, 0x22, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x61, 0x70,
	0x69, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x92, 0x41, 0x15, 0x4a, 0x0d, 0x22, 0x69, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x4a, 0x09, 0x22, 0x39, 0x38, 0x32, 0x33, 0x37, 0x35, 0x38, 0x22, 0x52, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x2e, 0x92, 0x41,
	0x2b, 0x0a, 0x29, 0xd2, 0x01, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0xd2, 0x01,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x1b, 0x0a, 0x19,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x03, 0x0a, 0x04, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x61, 0x70, 0x69, 0x22, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x22, 0x69, 0x61, 0x6d, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x4a, 0x09, 0x22, 0x39, 0x38, 0x32, 0x33, 0x37, 0x35, 0x38, 0x22, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x88, 0x01, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x1f, 0x54, 0x68, 0x65, 0x20,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x64, 0x4a, 0x1d, 0x22, 0x32, 0x30,
	0x31, 0x39, 0x2d, 0x30, 0x34, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x38, 0x3a, 0x34, 0x35, 0x3a, 0x30,
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x7f, 0x0a, 0x1b, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x73, 0x70,
	0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x24, 0x92, 0x41, 0x21,
	0x32, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x65,
	0x64, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x53, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x22, 0xa7, 0x02, 0x0a, 0x0b,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92,
	0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x22, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f,
	0x4a, 0x0d, 0x22, 0x69, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x52,
	0x08, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x39, 0x38, 0x32, 0x33, 0x37, 0x35,
	0x39, 0x22, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x92, 0x41, 0x05, 0x4a, 0x03,
	0x22, 0x35, 0x22, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x52, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x4a, 0x28, 0x22,
	0x49, 0x44, 0x3d, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x2d, 0x49, 0x44, 0x33, 0x45, 0x52, 0x20, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xa9, 0x8b, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x7a, 0x12, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a,
	0x12, 0x08, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x92, 0x41, 0x48, 0x0a, 0x06, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x73, 0x4a, 0x18, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x11, 0x0a, 0x0f,
	0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4a,
	0x24, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x17, 0x5a, 0x49,
	0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x20, 0x79, 0x65, 0x74, 0x12, 0xb5, 0x02, 0x0a, 0x0b, 0x49, 0x73, 0x4f, 0x72, 0x67, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4f, 0x72, 0x67, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x73, 0x4f, 0x72, 0x67, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x82, 0xb5, 0x18,
	0x0a, 0x0a, 0x08, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xae, 0x01, 0x0a,
	0x04, 0x6f, 0x72, 0x67, 0x73, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x5e, 0x0a,
	0x28, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x18, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x11, 0x0a, 0x0f, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4a, 0x24, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x19, 0x0a, 0x17, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x4e, 0x4f,
	0x54, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x79, 0x65, 0x74, 0x12, 0x8a, 0x02,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x49, 0x44, 0x12, 0x23, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c,
	0x12, 0x0a, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x82, 0xb5, 0x18, 0x0a,
	0x0a, 0x08, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0x8c, 0x01, 0x0a, 0x04,
	0x6f, 0x72, 0x67, 0x73, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x28,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x1c, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x15, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x20, 0x6f, 0x72, 0x67, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0xd9, 0x02, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85,
	0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x69,
	0x61, 0x6d, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xdb, 0x01, 0x0a, 0x04, 0x6f, 0x72, 0x67,
	0x73, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x28, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x31, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x2a, 0x0a, 0x28, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x38, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xe9, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x55, 0x70,
	0x4f, 0x72, 0x67, 0x12, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x02, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x5f, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x09, 0x69, 0x61, 0x6d, 0x2e, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x92, 0x41, 0xeb, 0x01, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x0a, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x28, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x40, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x39, 0x0a, 0x37,
	0x6f, 0x72, 0x67, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x77, 0x65,
	0x72, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x32,
	0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x6f, 0x72,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0xd4, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x44, 0x50, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x44, 0x50, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x44, 0x50,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfa, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x92, 0x41, 0xd2, 0x01, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x2d, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x23, 0x57, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x12, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x0b, 0x0a, 0x09, 0x69, 0x64, 0x70, 0x20, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19,
	0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xd2, 0x02, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x44, 0x50, 0x73, 0x12, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44,
	0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x44, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfe, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x0c, 0x69, 0x61,
	0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xd0, 0x01, 0x0a, 0x11,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0x71, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x40, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x57, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x72,
	0x65, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x4a, 0x13, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0c, 0x0a, 0x0a, 0x69,
	0x64, 0x70, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x2c, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xe2,
	0x02, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x44, 0x50, 0x12, 0x23, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x44, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0f, 0x22, 0x0a, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x3a, 0x01, 0x2a,
	0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x92, 0x41, 0xdc, 0x01, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63,
	0x22, 0x73, 0x0a, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x6f, 0x69, 0x64, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x5f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x5f, 0x32, 0x5f, 0x30, 0x4a, 0x14, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0d, 0x0a, 0x0b,
	0x69, 0x64, 0x70, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0xdb, 0x02, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x50, 0x12, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x02, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x1a, 0x0e, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61, 0x6d, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xd4, 0x01, 0x0a, 0x11, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x22, 0x71, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x40, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x57, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x72, 0x65,
	0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x4a, 0x14, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0d, 0x0a, 0x0b, 0x69, 0x64,
	0x70, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0xfc, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x50, 0x12, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f,
	0x69, 0x64, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x5f, 0x64,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69,
	0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xe0, 0x01,
	0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x57, 0x68, 0x61, 0x74, 0x5f,
	0x61, 0x72, 0x65, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x18, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x11, 0x0a,
	0x0f, 0x69, 0x64, 0x70, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x4a, 0x3e, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
	0x69, 0x64, 0x70, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0xfc, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x50, 0x12, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x99, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f, 0x69,
	0x64, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61,
	0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xe0, 0x01, 0x0a,
	0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0x71, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x40, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63,
	0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x57, 0x68, 0x61, 0x74, 0x5f, 0x61,
	0x72, 0x65, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x18, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x11, 0x0a, 0x0f,
	0x69, 0x64, 0x70, 0x20, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4a,
	0x3e, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x69,
	0x64, 0x70, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0xdc, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x12, 0x22, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a,
	0x0e, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x82,
	0xb5, 0x18, 0x0f, 0x0a, 0x0d, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x92, 0x41, 0xd8, 0x01, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x2d, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x23, 0x57, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x14, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x0d, 0x0a, 0x0b, 0x69, 0x64, 0x70, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x4a, 0x3a, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x33, 0x0a, 0x14, 0x75, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x69, 0x64,
	0x70, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xd0,
	0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x50, 0x4f, 0x49, 0x44, 0x43,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x50, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x50, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xdb, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x69,
	0x64, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x69, 0x64,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x0f, 0x0a,
	0x0d, 0x69, 0x61, 0x6d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41,
	0x9f, 0x02, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x22, 0x73, 0x0a, 0x2e, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x69, 0x64, 0x63, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x31,
	0x5f, 0x30, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x32, 0x5f, 0x30,
	0x4a, 0x1c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x15, 0x0a, 0x13, 0x6f, 0x69, 0x64, 0x63, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x36,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x32, 0x0a,
	0x13, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x9d, 0x01,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x1a, 0x09, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x69, 0x61, 0x6d, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x9b, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x0e,
	0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x27,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x17, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x69, 0x61, 0x6d, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0xa2, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x2a, 0x17, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x12,
	0x69, 0x61, 0x6d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x12, 0xc0, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x6f, 0x72, 0x67, 0x69, 0x61, 0x6d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xa6, 0x01, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61,
	0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49,
	0x41, 0x4d, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4a, 0x1f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x18, 0x0a, 0x16, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xd5, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x1a, 0x10, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x69,
	0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xae, 0x01, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61,
	0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49,
	0x41, 0x4d, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x1e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x8b, 0x03,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41,
	0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x12, 0x1e, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x69, 0x61,
	0x6d, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xd1, 0x01, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x20,
	0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63,
	0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4a,
	0x4a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x43, 0x0a, 0x41, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61,
	0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6f, 0x72, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x12, 0xe4, 0x02, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22,
	0x1e, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x69, 0x61, 0x6d, 0x3a,
	0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xa6, 0x01, 0x0a, 0x0e, 0x6f, 0x72,
	0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x41, 0x4d, 0x5f,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4a, 0x1f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x18, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x20,
	0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0xed, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f,
	0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a,
	0x1e, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x69, 0x61, 0x6d, 0x3a,
	0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xa6, 0x01, 0x0a, 0x0e, 0x6f, 0x72,
	0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x41, 0x4d, 0x5f,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4a, 0x1f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x18, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x20,
	0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0xa3, 0x03, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x6f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x6f, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87,
	0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x6f, 0x72, 0x67, 0x69, 0x61, 0x6d, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x92, 0x41,
	0xc6, 0x01, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6b, 0x0a, 0x2d, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67,
	0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x23, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4a, 0x3f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x38,
	0x0a, 0x36, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc9, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0x35, 0x0a,
	0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x1d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x16, 0x0a, 0x14,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0xde, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x1a, 0x0f, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x82,
	0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x25,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0xae, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0x98, 0x01, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x61, 0x0a, 0x2b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63,
	0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x1d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x16,
	0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc3, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x1a, 0x0f,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a,
	0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xa0, 0x01, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x61, 0x0a, 0x2b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x32, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x25, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x1c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0xfc, 0x02, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x44, 0x50, 0x73, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x87, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x69, 0x64, 0x70, 0x73,
	0x2f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x11, 0x0a,
	0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64,
	0x92, 0x41, 0xc7, 0x01, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a,
	0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x32, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x2b,
	0x0a, 0x29, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xfb, 0x02, 0x0a, 0x13,
	0x41, 0x64, 0x64, 0x49, 0x44, 0x50, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x44, 0x50, 0x54, 0x6f, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x44, 0x50, 0x54, 0x6f, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x86, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x3a,
	0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xcd, 0x01, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a,
	0x38, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x31, 0x0a, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x94, 0x03, 0x0a, 0x18, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x49, 0x44, 0x50, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x44, 0x50, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x02,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xd1, 0x01, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x4a, 0x3c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x35, 0x0a, 0x33, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x9c, 0x03, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8c, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xc5, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x2f,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x28, 0x0a, 0x26, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0xdf, 0x03, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xcf, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a,
	0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x92, 0x41, 0x8c, 0x02, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x34, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x2d, 0x0a, 0x2b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a,
	0x40, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x39, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0xf6, 0x03, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd7, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d,
	0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x90, 0x02, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x38,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x31, 0x0a, 0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x40, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x39, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x96, 0x03, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x22, 0x25, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xc3, 0x01,
	0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x4a, 0x2e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x27, 0x0a, 0x25, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0xd8, 0x03, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x34, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xcb, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a,
	0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68,
	0x0a, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x33, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x2c, 0x0a, 0x2a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x3f, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xfe,
	0x03, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe2, 0x02, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69,
	0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92,
	0x41, 0x9c, 0x02, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x2d,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x23, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x38, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x31, 0x0a,
	0x2f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4a, 0x4d, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x46, 0x0a, 0x27, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x9d, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x34, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x02, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x74, 0x79, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xd2, 0x01, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x22, 0x75, 0x0a, 0x39, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69,
	0x74, 0x79, 0x4a, 0x2b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x22, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0xea, 0x03, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x37, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x1d,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a,
	0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x92, 0x02, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x22, 0x75, 0x0a, 0x39, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x4a,
	0x33, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x2c, 0x0a, 0x2a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xfb, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x2f, 0x61, 0x67, 0x65, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0x4d, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x20, 0x61, 0x67, 0x65, 0x4a, 0x24, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1d, 0x0a, 0x1b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x61, 0x67, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc9, 0x02, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x82,
	0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x8d, 0x01, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x61, 0x67, 0x65,
	0x4a, 0x2c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x25, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x61, 0x67, 0x65, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x36,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9a, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x82,
	0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0x5c, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a,
	0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x0a, 0x17, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x28, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x21, 0x0a, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0xe8, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x34, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xdb, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x6c, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61,
	0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41,
	0x9c, 0x01, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x17, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4a, 0x30, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x29, 0x0a, 0x27, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x36, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2f, 0x0a,
	0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xd8,
	0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x16, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x82, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0xaf, 0x01, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x72,
	0x0a, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x49, 0x41, 0x4d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f,
	0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x4a, 0x25, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x1c, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0xc4, 0x02, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x41, 0x4d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xde, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18,
	0x11, 0x0a, 0x0f, 0x69, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x61, 0x64, 0x92, 0x41, 0xaa, 0x01, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x72, 0x0a, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c,
	0x5f, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x4a, 0x1b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x14, 0x0a, 0x12, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d,
	0x12, 0x83, 0x03, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x49,
	0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa3, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xf6, 0x01,
	0x0a, 0x03, 0x69, 0x61, 0x6d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x0a, 0x0a, 0x69,
	0x61, 0x6d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x72, 0x0a, 0x2f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x23, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x5f, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x4a, 0x20, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x19, 0x0a, 0x17, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x4a,
	0x45, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x3e, 0x0a, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8e, 0x03, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x41,
	0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa5, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x12, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x82,
	0xb5, 0x18, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xee, 0x01, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x20, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x72, 0x0a, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x5a, 0x49, 0x54, 0x41,
	0x44, 0x45, 0x4c, 0x5f, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x4a, 0x22, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1b, 0x0a,
	0x19, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49,
	0x41, 0x4d, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x3b, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x83, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x41, 0x4d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9a, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x82, 0xb5, 0x18,
	0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x92, 0x41, 0xe5, 0x01, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x72, 0x0a, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x23, 0x5a, 0x49, 0x54, 0x41, 0x44,
	0x45, 0x4c, 0x5f, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x4a, 0x22, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x19,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41,
	0x4d, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4a, 0x32, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x2b, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9a, 0x02,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x22, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x82, 0xb5, 0x18,
	0x0a, 0x0a, 0x08, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x92, 0x41, 0x9b, 0x01, 0x0a,
	0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x6d, 0x0a, 0x33, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x27, 0x73, 0x20, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x36, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4a, 0x23, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1c, 0x0a, 0x1a,
	0x56, 0x69, 0x65, 0x77, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9c, 0x02, 0x0a, 0x09, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x7d, 0x2f, 0x7b, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x09, 0x69,
	0x61, 0x6d, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0x8d, 0x01, 0x0a, 0x05, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x22, 0x6d, 0x0a, 0x33, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x27, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x20, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x36, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x4a, 0x15, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0e, 0x0a, 0x0c, 0x56, 0x69, 0x65,
	0x77, 0x20, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0xd0, 0x02, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x15,
	0x2f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x69, 0x61, 0x6d, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x92, 0x41, 0xb5, 0x01, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x33, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x27, 0x73, 0x20, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x36, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4a, 0x35, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x2c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x65, 0x72,
	0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0xa3, 0x03, 0x0a,
	0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x02, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x7d, 0x2f, 0x7b,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x7d, 0x82, 0xb5, 0x18, 0x0b,
	0x0a, 0x09, 0x69, 0x61, 0x6d, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x92, 0x41, 0xe3, 0x01, 0x0a,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6d,
	0x0a, 0x33, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x5a, 0x49, 0x54,
	0x41, 0x44, 0x45, 0x4c, 0x27, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x6e, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x36, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x23, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4a, 0x25, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x4a, 0x3c, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x35, 0x0a, 0x16, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0xab, 0x07, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x61, 0x6f, 0x73, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x92, 0x41, 0xff,
	0x06, 0x12, 0xe3, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x61, 0x6b, 0x61, 0x20, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x3c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x2e,
	0x22, 0x3f, 0x0a, 0x1a, 0x43, 0x41, 0x4f, 0x53, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x12, 0x12,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x63, 0x68, 0x1a, 0x0d, 0x68, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x68, 0x2a, 0x3f, 0x0a, 0x0a, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x6f, 0x73, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e,
	0x53, 0x45, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x1a, 0x0e, 0x61, 0x70, 0x69, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6f, 0x22, 0x09, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x76, 0x31, 0x2a, 0x02, 0x02, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x52, 0x6d,
	0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x66, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x50, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x49, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a,
	0xff, 0x01, 0x0a, 0x0f, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x02, 0x08, 0x01, 0x0a, 0xeb, 0x01, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0xe0,
	0x01, 0x08, 0x03, 0x28, 0x04, 0x32, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x69, 0x6f, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x3a, 0x25, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61,
	0x70, 0x69, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x82, 0x01, 0x0a,
	0x10, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x0a, 0x6e, 0x0a, 0x35, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x3a, 0x69, 0x64, 0x3a, 0x31, 0x30, 0x30, 0x39, 0x39, 0x32, 0x30, 0x38, 0x35, 0x31, 0x35, 0x38,
	0x35, 0x38, 0x34, 0x37, 0x38, 0x30, 0x3a, 0x61, 0x75, 0x64, 0x12, 0x35, 0x75, 0x72, 0x6e, 0x3a,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x31, 0x30, 0x30, 0x39, 0x39,
	0x32, 0x30, 0x38, 0x35, 0x31, 0x35, 0x38, 0x35, 0x38, 0x34, 0x37, 0x38, 0x30, 0x3a, 0x61, 0x75,
	0x64, 0x62, 0x4b, 0x0a, 0x49, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x3f, 0x0a,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a, 0x35, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x31, 0x30, 0x30, 0x39, 0x39, 0x32, 0x30, 0x38,
	0x35, 0x31, 0x35, 0x38, 0x35, 0x38, 0x34, 0x37, 0x38, 0x30, 0x3a, 0x61, 0x75, 0x64, 0x7a, 0x20,
	0x0a, 0x0f, 0x78, 0x2d, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2d, 0x6f, 0x72, 0x67, 0x69,
	0x64, 0x12, 0x0d, 0x1a, 0x0b, 0x79, 0x6f, 0x75, 0x72, 0x2d, 0x6f, 0x72, 0x67, 0x2d, 0x69, 0x64,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_admin_proto_rawDescOnce sync.Once
	file_zitadel_admin_proto_rawDescData = file_zitadel_admin_proto_rawDesc
)

func file_zitadel_admin_proto_rawDescGZIP() []byte {
	file_zitadel_admin_proto_rawDescOnce.Do(func() {
		file_zitadel_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_admin_proto_rawDescData)
	})
	return file_zitadel_admin_proto_rawDescData
}

var file_zitadel_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 112)
var file_zitadel_admin_proto_goTypes = []interface{}{
	(*HealthzRequest)(nil),                            // 0: zitadel.admin.v1.HealthzRequest
	(*HealthzResponse)(nil),                           // 1: zitadel.admin.v1.HealthzResponse
	(*IsOrgUniqueRequest)(nil),                        // 2: zitadel.admin.v1.IsOrgUniqueRequest
	(*IsOrgUniqueResponse)(nil),                       // 3: zitadel.admin.v1.IsOrgUniqueResponse
	(*GetOrgByIDRequest)(nil),                         // 4: zitadel.admin.v1.GetOrgByIDRequest
	(*GetOrgByIDResponse)(nil),                        // 5: zitadel.admin.v1.GetOrgByIDResponse
	(*ListOrgsRequest)(nil),                           // 6: zitadel.admin.v1.ListOrgsRequest
	(*ListOrgsResponse)(nil),                          // 7: zitadel.admin.v1.ListOrgsResponse
	(*SetUpOrgRequest)(nil),                           // 8: zitadel.admin.v1.SetUpOrgRequest
	(*SetUpOrgResponse)(nil),                          // 9: zitadel.admin.v1.SetUpOrgResponse
	(*GetIDPByIDRequest)(nil),                         // 10: zitadel.admin.v1.GetIDPByIDRequest
	(*GetIDPByIDResponse)(nil),                        // 11: zitadel.admin.v1.GetIDPByIDResponse
	(*ListIDPsRequest)(nil),                           // 12: zitadel.admin.v1.ListIDPsRequest
	(*IDPQuery)(nil),                                  // 13: zitadel.admin.v1.IDPQuery
	(*ListIDPsResponse)(nil),                          // 14: zitadel.admin.v1.ListIDPsResponse
	(*AddOIDCIDPRequest)(nil),                         // 15: zitadel.admin.v1.AddOIDCIDPRequest
	(*AddOIDCIDPResponse)(nil),                        // 16: zitadel.admin.v1.AddOIDCIDPResponse
	(*UpdateIDPRequest)(nil),                          // 17: zitadel.admin.v1.UpdateIDPRequest
	(*UpdateIDPResponse)(nil),                         // 18: zitadel.admin.v1.UpdateIDPResponse
	(*DeactivateIDPRequest)(nil),                      // 19: zitadel.admin.v1.DeactivateIDPRequest
	(*DeactivateIDPResponse)(nil),                     // 20: zitadel.admin.v1.DeactivateIDPResponse
	(*ReactivateIDPRequest)(nil),                      // 21: zitadel.admin.v1.ReactivateIDPRequest
	(*ReactivateIDPResponse)(nil),                     // 22: zitadel.admin.v1.ReactivateIDPResponse
	(*RemoveIDPRequest)(nil),                          // 23: zitadel.admin.v1.RemoveIDPRequest
	(*RemoveIDPResponse)(nil),                         // 24: zitadel.admin.v1.RemoveIDPResponse
	(*UpdateIDPOIDCConfigRequest)(nil),                // 25: zitadel.admin.v1.UpdateIDPOIDCConfigRequest
	(*UpdateIDPOIDCConfigResponse)(nil),               // 26: zitadel.admin.v1.UpdateIDPOIDCConfigResponse
	(*GetDefaultFeaturesRequest)(nil),                 // 27: zitadel.admin.v1.GetDefaultFeaturesRequest
	(*GetDefaultFeaturesResponse)(nil),                // 28: zitadel.admin.v1.GetDefaultFeaturesResponse
	(*SetDefaultFeaturesRequest)(nil),                 // 29: zitadel.admin.v1.SetDefaultFeaturesRequest
	(*SetDefaultFeaturesResponse)(nil),                // 30: zitadel.admin.v1.SetDefaultFeaturesResponse
	(*GetOrgFeaturesRequest)(nil),                     // 31: zitadel.admin.v1.GetOrgFeaturesRequest
	(*GetOrgFeaturesResponse)(nil),                    // 32: zitadel.admin.v1.GetOrgFeaturesResponse
	(*SetOrgFeaturesRequest)(nil),                     // 33: zitadel.admin.v1.SetOrgFeaturesRequest
	(*SetOrgFeaturesResponse)(nil),                    // 34: zitadel.admin.v1.SetOrgFeaturesResponse
	(*ResetOrgFeaturesRequest)(nil),                   // 35: zitadel.admin.v1.ResetOrgFeaturesRequest
	(*ResetOrgFeaturesResponse)(nil),                  // 36: zitadel.admin.v1.ResetOrgFeaturesResponse
	(*GetOrgIAMPolicyRequest)(nil),                    // 37: zitadel.admin.v1.GetOrgIAMPolicyRequest
	(*GetOrgIAMPolicyResponse)(nil),                   // 38: zitadel.admin.v1.GetOrgIAMPolicyResponse
	(*UpdateOrgIAMPolicyRequest)(nil),                 // 39: zitadel.admin.v1.UpdateOrgIAMPolicyRequest
	(*UpdateOrgIAMPolicyResponse)(nil),                // 40: zitadel.admin.v1.UpdateOrgIAMPolicyResponse
	(*GetCustomOrgIAMPolicyRequest)(nil),              // 41: zitadel.admin.v1.GetCustomOrgIAMPolicyRequest
	(*GetCustomOrgIAMPolicyResponse)(nil),             // 42: zitadel.admin.v1.GetCustomOrgIAMPolicyResponse
	(*AddCustomOrgIAMPolicyRequest)(nil),              // 43: zitadel.admin.v1.AddCustomOrgIAMPolicyRequest
	(*AddCustomOrgIAMPolicyResponse)(nil),             // 44: zitadel.admin.v1.AddCustomOrgIAMPolicyResponse
	(*UpdateCustomOrgIAMPolicyRequest)(nil),           // 45: zitadel.admin.v1.UpdateCustomOrgIAMPolicyRequest
	(*UpdateCustomOrgIAMPolicyResponse)(nil),          // 46: zitadel.admin.v1.UpdateCustomOrgIAMPolicyResponse
	(*ResetCustomOrgIAMPolicyToDefaultRequest)(nil),   // 47: zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultRequest
	(*ResetCustomOrgIAMPolicyToDefaultResponse)(nil),  // 48: zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultResponse
	(*GetLabelPolicyRequest)(nil),                     // 49: zitadel.admin.v1.GetLabelPolicyRequest
	(*GetLabelPolicyResponse)(nil),                    // 50: zitadel.admin.v1.GetLabelPolicyResponse
	(*UpdateLabelPolicyRequest)(nil),                  // 51: zitadel.admin.v1.UpdateLabelPolicyRequest
	(*UpdateLabelPolicyResponse)(nil),                 // 52: zitadel.admin.v1.UpdateLabelPolicyResponse
	(*GetLoginPolicyRequest)(nil),                     // 53: zitadel.admin.v1.GetLoginPolicyRequest
	(*GetLoginPolicyResponse)(nil),                    // 54: zitadel.admin.v1.GetLoginPolicyResponse
	(*UpdateLoginPolicyRequest)(nil),                  // 55: zitadel.admin.v1.UpdateLoginPolicyRequest
	(*UpdateLoginPolicyResponse)(nil),                 // 56: zitadel.admin.v1.UpdateLoginPolicyResponse
	(*ListLoginPolicyIDPsRequest)(nil),                // 57: zitadel.admin.v1.ListLoginPolicyIDPsRequest
	(*ListLoginPolicyIDPsResponse)(nil),               // 58: zitadel.admin.v1.ListLoginPolicyIDPsResponse
	(*AddIDPToLoginPolicyRequest)(nil),                // 59: zitadel.admin.v1.AddIDPToLoginPolicyRequest
	(*AddIDPToLoginPolicyResponse)(nil),               // 60: zitadel.admin.v1.AddIDPToLoginPolicyResponse
	(*RemoveIDPFromLoginPolicyRequest)(nil),           // 61: zitadel.admin.v1.RemoveIDPFromLoginPolicyRequest
	(*RemoveIDPFromLoginPolicyResponse)(nil),          // 62: zitadel.admin.v1.RemoveIDPFromLoginPolicyResponse
	(*ListLoginPolicySecondFactorsRequest)(nil),       // 63: zitadel.admin.v1.ListLoginPolicySecondFactorsRequest
	(*ListLoginPolicySecondFactorsResponse)(nil),      // 64: zitadel.admin.v1.ListLoginPolicySecondFactorsResponse
	(*AddSecondFactorToLoginPolicyRequest)(nil),       // 65: zitadel.admin.v1.AddSecondFactorToLoginPolicyRequest
	(*AddSecondFactorToLoginPolicyResponse)(nil),      // 66: zitadel.admin.v1.AddSecondFactorToLoginPolicyResponse
	(*RemoveSecondFactorFromLoginPolicyRequest)(nil),  // 67: zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyRequest
	(*RemoveSecondFactorFromLoginPolicyResponse)(nil), // 68: zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyResponse
	(*ListLoginPolicyMultiFactorsRequest)(nil),        // 69: zitadel.admin.v1.ListLoginPolicyMultiFactorsRequest
	(*ListLoginPolicyMultiFactorsResponse)(nil),       // 70: zitadel.admin.v1.ListLoginPolicyMultiFactorsResponse
	(*AddMultiFactorToLoginPolicyRequest)(nil),        // 71: zitadel.admin.v1.AddMultiFactorToLoginPolicyRequest
	(*AddMultiFactorToLoginPolicyResponse)(nil),       // 72: zitadel.admin.v1.AddMultiFactorToLoginPolicyResponse
	(*RemoveMultiFactorFromLoginPolicyRequest)(nil),   // 73: zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyRequest
	(*RemoveMultiFactorFromLoginPolicyResponse)(nil),  // 74: zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyResponse
	(*GetPasswordComplexityPolicyRequest)(nil),        // 75: zitadel.admin.v1.GetPasswordComplexityPolicyRequest
	(*GetPasswordComplexityPolicyResponse)(nil),       // 76: zitadel.admin.v1.GetPasswordComplexityPolicyResponse
	(*UpdatePasswordComplexityPolicyRequest)(nil),     // 77: zitadel.admin.v1.UpdatePasswordComplexityPolicyRequest
	(*UpdatePasswordComplexityPolicyResponse)(nil),    // 78: zitadel.admin.v1.UpdatePasswordComplexityPolicyResponse
	(*GetPasswordAgePolicyRequest)(nil),               // 79: zitadel.admin.v1.GetPasswordAgePolicyRequest
	(*GetPasswordAgePolicyResponse)(nil),              // 80: zitadel.admin.v1.GetPasswordAgePolicyResponse
	(*UpdatePasswordAgePolicyRequest)(nil),            // 81: zitadel.admin.v1.UpdatePasswordAgePolicyRequest
	(*UpdatePasswordAgePolicyResponse)(nil),           // 82: zitadel.admin.v1.UpdatePasswordAgePolicyResponse
	(*GetPasswordLockoutPolicyRequest)(nil),           // 83: zitadel.admin.v1.GetPasswordLockoutPolicyRequest
	(*GetPasswordLockoutPolicyResponse)(nil),          // 84: zitadel.admin.v1.GetPasswordLockoutPolicyResponse
	(*UpdatePasswordLockoutPolicyRequest)(nil),        // 85: zitadel.admin.v1.UpdatePasswordLockoutPolicyRequest
	(*UpdatePasswordLockoutPolicyResponse)(nil),       // 86: zitadel.admin.v1.UpdatePasswordLockoutPolicyResponse
	(*AddIAMMemberRequest)(nil),                       // 87: zitadel.admin.v1.AddIAMMemberRequest
	(*AddIAMMemberResponse)(nil),                      // 88: zitadel.admin.v1.AddIAMMemberResponse
	(*UpdateIAMMemberRequest)(nil),                    // 89: zitadel.admin.v1.UpdateIAMMemberRequest
	(*UpdateIAMMemberResponse)(nil),                   // 90: zitadel.admin.v1.UpdateIAMMemberResponse
	(*RemoveIAMMemberRequest)(nil),                    // 91: zitadel.admin.v1.RemoveIAMMemberRequest
	(*RemoveIAMMemberResponse)(nil),                   // 92: zitadel.admin.v1.RemoveIAMMemberResponse
	(*ListIAMMemberRolesRequest)(nil),                 // 93: zitadel.admin.v1.ListIAMMemberRolesRequest
	(*ListIAMMemberRolesResponse)(nil),                // 94: zitadel.admin.v1.ListIAMMemberRolesResponse
	(*ListIAMMembersRequest)(nil),                     // 95: zitadel.admin.v1.ListIAMMembersRequest
	(*ListIAMMembersResponse)(nil),                    // 96: zitadel.admin.v1.ListIAMMembersResponse
	(*ListViewsRequest)(nil),                          // 97: zitadel.admin.v1.ListViewsRequest
	(*ListViewsResponse)(nil),                         // 98: zitadel.admin.v1.ListViewsResponse
	(*ClearViewRequest)(nil),                          // 99: zitadel.admin.v1.ClearViewRequest
	(*ClearViewResponse)(nil),                         // 100: zitadel.admin.v1.ClearViewResponse
	(*ListFailedEventsRequest)(nil),                   // 101: zitadel.admin.v1.ListFailedEventsRequest
	(*ListFailedEventsResponse)(nil),                  // 102: zitadel.admin.v1.ListFailedEventsResponse
	(*RemoveFailedEventRequest)(nil),                  // 103: zitadel.admin.v1.RemoveFailedEventRequest
	(*RemoveFailedEventResponse)(nil),                 // 104: zitadel.admin.v1.RemoveFailedEventResponse
	(*View)(nil),                                      // 105: zitadel.admin.v1.View
	(*FailedEvent)(nil),                               // 106: zitadel.admin.v1.FailedEvent
	(*SetUpOrgRequest_Org)(nil),                       // 107: zitadel.admin.v1.SetUpOrgRequest.Org
	(*SetUpOrgRequest_Human)(nil),                     // 108: zitadel.admin.v1.SetUpOrgRequest.Human
	(*SetUpOrgRequest_Human_Profile)(nil),             // 109: zitadel.admin.v1.SetUpOrgRequest.Human.Profile
	(*SetUpOrgRequest_Human_Email)(nil),               // 110: zitadel.admin.v1.SetUpOrgRequest.Human.Email
	(*SetUpOrgRequest_Human_Phone)(nil),               // 111: zitadel.admin.v1.SetUpOrgRequest.Human.Phone
	(*org.Org)(nil),                                   // 112: zitadel.org.v1.Org
	(*object.ListQuery)(nil),                          // 113: zitadel.v1.ListQuery
	(org.OrgFieldName)(0),                             // 114: zitadel.org.v1.OrgFieldName
	(*org.OrgQuery)(nil),                              // 115: zitadel.org.v1.OrgQuery
	(*object.ListDetails)(nil),                        // 116: zitadel.v1.ListDetails
	(*object.ObjectDetails)(nil),                      // 117: zitadel.v1.ObjectDetails
	(*idp.IDP)(nil),                                   // 118: zitadel.idp.v1.IDP
	(idp.IDPFieldName)(0),                             // 119: zitadel.idp.v1.IDPFieldName
	(*idp.IDPIDQuery)(nil),                            // 120: zitadel.idp.v1.IDPIDQuery
	(*idp.IDPNameQuery)(nil),                          // 121: zitadel.idp.v1.IDPNameQuery
	(idp.IDPStylingType)(0),                           // 122: zitadel.idp.v1.IDPStylingType
	(idp.OIDCMappingField)(0),                         // 123: zitadel.idp.v1.OIDCMappingField
	(*features.Features)(nil),                         // 124: zitadel.features.v1.Features
	(*duration.Duration)(nil),                         // 125: google.protobuf.Duration
	(features.FeaturesState)(0),                       // 126: zitadel.features.v1.FeaturesState
	(*policy.OrgIAMPolicy)(nil),                       // 127: zitadel.policy.v1.OrgIAMPolicy
	(*policy.LabelPolicy)(nil),                        // 128: zitadel.policy.v1.LabelPolicy
	(*policy.LoginPolicy)(nil),                        // 129: zitadel.policy.v1.LoginPolicy
	(policy.PasswordlessType)(0),                      // 130: zitadel.policy.v1.PasswordlessType
	(*idp.IDPLoginPolicyLink)(nil),                    // 131: zitadel.idp.v1.IDPLoginPolicyLink
	(policy.SecondFactorType)(0),                      // 132: zitadel.policy.v1.SecondFactorType
	(policy.MultiFactorType)(0),                       // 133: zitadel.policy.v1.MultiFactorType
	(*policy.PasswordComplexityPolicy)(nil),           // 134: zitadel.policy.v1.PasswordComplexityPolicy
	(*policy.PasswordAgePolicy)(nil),                  // 135: zitadel.policy.v1.PasswordAgePolicy
	(*policy.PasswordLockoutPolicy)(nil),              // 136: zitadel.policy.v1.PasswordLockoutPolicy
	(*member.SearchQuery)(nil),                        // 137: zitadel.member.v1.SearchQuery
	(*member.Member)(nil),                             // 138: zitadel.member.v1.Member
	(*timestamp.Timestamp)(nil),                       // 139: google.protobuf.Timestamp
	(user.Gender)(0),                                  // 140: zitadel.user.v1.Gender
}
var file_zitadel_admin_proto_depIdxs = []int32{
	112, // 0: zitadel.admin.v1.GetOrgByIDResponse.org:type_name -> zitadel.org.v1.Org
	113, // 1: zitadel.admin.v1.ListOrgsRequest.query:type_name -> zitadel.v1.ListQuery
	114, // 2: zitadel.admin.v1.ListOrgsRequest.sorting_column:type_name -> zitadel.org.v1.OrgFieldName
	115, // 3: zitadel.admin.v1.ListOrgsRequest.queries:type_name -> zitadel.org.v1.OrgQuery
	116, // 4: zitadel.admin.v1.ListOrgsResponse.details:type_name -> zitadel.v1.ListDetails
	114, // 5: zitadel.admin.v1.ListOrgsResponse.sorting_column:type_name -> zitadel.org.v1.OrgFieldName
	112, // 6: zitadel.admin.v1.ListOrgsResponse.result:type_name -> zitadel.org.v1.Org
	107, // 7: zitadel.admin.v1.SetUpOrgRequest.org:type_name -> zitadel.admin.v1.SetUpOrgRequest.Org
	108, // 8: zitadel.admin.v1.SetUpOrgRequest.human:type_name -> zitadel.admin.v1.SetUpOrgRequest.Human
	117, // 9: zitadel.admin.v1.SetUpOrgResponse.details:type_name -> zitadel.v1.ObjectDetails
	118, // 10: zitadel.admin.v1.GetIDPByIDResponse.idp:type_name -> zitadel.idp.v1.IDP
	113, // 11: zitadel.admin.v1.ListIDPsRequest.query:type_name -> zitadel.v1.ListQuery
	119, // 12: zitadel.admin.v1.ListIDPsRequest.sorting_column:type_name -> zitadel.idp.v1.IDPFieldName
	13,  // 13: zitadel.admin.v1.ListIDPsRequest.queries:type_name -> zitadel.admin.v1.IDPQuery
	120, // 14: zitadel.admin.v1.IDPQuery.idp_id_query:type_name -> zitadel.idp.v1.IDPIDQuery
	121, // 15: zitadel.admin.v1.IDPQuery.idp_name_query:type_name -> zitadel.idp.v1.IDPNameQuery
	116, // 16: zitadel.admin.v1.ListIDPsResponse.details:type_name -> zitadel.v1.ListDetails
	119, // 17: zitadel.admin.v1.ListIDPsResponse.sorting_column:type_name -> zitadel.idp.v1.IDPFieldName
	118, // 18: zitadel.admin.v1.ListIDPsResponse.result:type_name -> zitadel.idp.v1.IDP
	122, // 19: zitadel.admin.v1.AddOIDCIDPRequest.styling_type:type_name -> zitadel.idp.v1.IDPStylingType
	123, // 20: zitadel.admin.v1.AddOIDCIDPRequest.display_name_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	123, // 21: zitadel.admin.v1.AddOIDCIDPRequest.username_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	117, // 22: zitadel.admin.v1.AddOIDCIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	122, // 23: zitadel.admin.v1.UpdateIDPRequest.styling_type:type_name -> zitadel.idp.v1.IDPStylingType
	117, // 24: zitadel.admin.v1.UpdateIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	117, // 25: zitadel.admin.v1.DeactivateIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	117, // 26: zitadel.admin.v1.ReactivateIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	117, // 27: zitadel.admin.v1.RemoveIDPResponse.details:type_name -> zitadel.v1.ObjectDetails
	123, // 28: zitadel.admin.v1.UpdateIDPOIDCConfigRequest.display_name_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	123, // 29: zitadel.admin.v1.UpdateIDPOIDCConfigRequest.username_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	117, // 30: zitadel.admin.v1.UpdateIDPOIDCConfigResponse.details:type_name -> zitadel.v1.ObjectDetails
	124, // 31: zitadel.admin.v1.GetDefaultFeaturesResponse.features:type_name -> zitadel.features.v1.Features
	125, // 32: zitadel.admin.v1.SetDefaultFeaturesRequest.audit_log_retention:type_name -> google.protobuf.Duration
	117, // 33: zitadel.admin.v1.SetDefaultFeaturesResponse.details:type_name -> zitadel.v1.ObjectDetails
	124, // 34: zitadel.admin.v1.GetOrgFeaturesResponse.features:type_name -> zitadel.features.v1.Features
	126, // 35: zitadel.admin.v1.SetOrgFeaturesRequest.state:type_name -> zitadel.features.v1.FeaturesState
	125, // 36: zitadel.admin.v1.SetOrgFeaturesRequest.audit_log_retention:type_name -> google.protobuf.Duration
	117, // 37: zitadel.admin.v1.SetOrgFeaturesResponse.details:type_name -> zitadel.v1.ObjectDetails
	117, // 38: zitadel.admin.v1.ResetOrgFeaturesResponse.details:type_name -> zitadel.v1.ObjectDetails
	127, // 39: zitadel.admin.v1.GetOrgIAMPolicyResponse.policy:type_name -> zitadel.policy.v1.OrgIAMPolicy
	117, // 40: zitadel.admin.v1.UpdateOrgIAMPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	127, // 41: zitadel.admin.v1.GetCustomOrgIAMPolicyResponse.policy:type_name -> zitadel.policy.v1.OrgIAMPolicy
	117, // 42: zitadel.admin.v1.AddCustomOrgIAMPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	117, // 43: zitadel.admin.v1.UpdateCustomOrgIAMPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	117, // 44: zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultResponse.details:type_name -> zitadel.v1.ObjectDetails
	128, // 45: zitadel.admin.v1.GetLabelPolicyResponse.policy:type_name -> zitadel.policy.v1.LabelPolicy
	117, // 46: zitadel.admin.v1.UpdateLabelPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	129, // 47: zitadel.admin.v1.GetLoginPolicyResponse.policy:type_name -> zitadel.policy.v1.LoginPolicy
	130, // 48: zitadel.admin.v1.UpdateLoginPolicyRequest.passwordless_type:type_name -> zitadel.policy.v1.PasswordlessType
	117, // 49: zitadel.admin.v1.UpdateLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	113, // 50: zitadel.admin.v1.ListLoginPolicyIDPsRequest.query:type_name -> zitadel.v1.ListQuery
	116, // 51: zitadel.admin.v1.ListLoginPolicyIDPsResponse.details:type_name -> zitadel.v1.ListDetails
	131, // 52: zitadel.admin.v1.ListLoginPolicyIDPsResponse.result:type_name -> zitadel.idp.v1.IDPLoginPolicyLink
	117, // 53: zitadel.admin.v1.AddIDPToLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	117, // 54: zitadel.admin.v1.RemoveIDPFromLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	116, // 55: zitadel.admin.v1.ListLoginPolicySecondFactorsResponse.details:type_name -> zitadel.v1.ListDetails
	132, // 56: zitadel.admin.v1.ListLoginPolicySecondFactorsResponse.result:type_name -> zitadel.policy.v1.SecondFactorType
	132, // 57: zitadel.admin.v1.AddSecondFactorToLoginPolicyRequest.type:type_name -> zitadel.policy.v1.SecondFactorType
	117, // 58: zitadel.admin.v1.AddSecondFactorToLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	132, // 59: zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyRequest.type:type_name -> zitadel.policy.v1.SecondFactorType
	117, // 60: zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	116, // 61: zitadel.admin.v1.ListLoginPolicyMultiFactorsResponse.details:type_name -> zitadel.v1.ListDetails
	133, // 62: zitadel.admin.v1.ListLoginPolicyMultiFactorsResponse.result:type_name -> zitadel.policy.v1.MultiFactorType
	133, // 63: zitadel.admin.v1.AddMultiFactorToLoginPolicyRequest.type:type_name -> zitadel.policy.v1.MultiFactorType
	117, // 64: zitadel.admin.v1.AddMultiFactorToLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	133, // 65: zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyRequest.type:type_name -> zitadel.policy.v1.MultiFactorType
	117, // 66: zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	134, // 67: zitadel.admin.v1.GetPasswordComplexityPolicyResponse.policy:type_name -> zitadel.policy.v1.PasswordComplexityPolicy
	117, // 68: zitadel.admin.v1.UpdatePasswordComplexityPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	135, // 69: zitadel.admin.v1.GetPasswordAgePolicyResponse.policy:type_name -> zitadel.policy.v1.PasswordAgePolicy
	117, // 70: zitadel.admin.v1.UpdatePasswordAgePolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	136, // 71: zitadel.admin.v1.GetPasswordLockoutPolicyResponse.policy:type_name -> zitadel.policy.v1.PasswordLockoutPolicy
	117, // 72: zitadel.admin.v1.UpdatePasswordLockoutPolicyResponse.details:type_name -> zitadel.v1.ObjectDetails
	117, // 73: zitadel.admin.v1.AddIAMMemberResponse.details:type_name -> zitadel.v1.ObjectDetails
	117, // 74: zitadel.admin.v1.UpdateIAMMemberResponse.details:type_name -> zitadel.v1.ObjectDetails
	117, // 75: zitadel.admin.v1.RemoveIAMMemberResponse.details:type_name -> zitadel.v1.ObjectDetails
	116, // 76: zitadel.admin.v1.ListIAMMemberRolesResponse.details:type_name -> zitadel.v1.ListDetails
	113, // 77: zitadel.admin.v1.ListIAMMembersRequest.query:type_name -> zitadel.v1.ListQuery
	137, // 78: zitadel.admin.v1.ListIAMMembersRequest.queries:type_name -> zitadel.member.v1.SearchQuery
	116, // 79: zitadel.admin.v1.ListIAMMembersResponse.details:type_name -> zitadel.v1.ListDetails
	138, // 80: zitadel.admin.v1.ListIAMMembersResponse.result:type_name -> zitadel.member.v1.Member
	105, // 81: zitadel.admin.v1.ListViewsResponse.result:type_name -> zitadel.admin.v1.View
	106, // 82: zitadel.admin.v1.ListFailedEventsResponse.result:type_name -> zitadel.admin.v1.FailedEvent
	139, // 83: zitadel.admin.v1.View.event_timestamp:type_name -> google.protobuf.Timestamp
	139, // 84: zitadel.admin.v1.View.last_successful_spooler_run:type_name -> google.protobuf.Timestamp
	109, // 85: zitadel.admin.v1.SetUpOrgRequest.Human.profile:type_name -> zitadel.admin.v1.SetUpOrgRequest.Human.Profile
	110, // 86: zitadel.admin.v1.SetUpOrgRequest.Human.email:type_name -> zitadel.admin.v1.SetUpOrgRequest.Human.Email
	111, // 87: zitadel.admin.v1.SetUpOrgRequest.Human.phone:type_name -> zitadel.admin.v1.SetUpOrgRequest.Human.Phone
	140, // 88: zitadel.admin.v1.SetUpOrgRequest.Human.Profile.gender:type_name -> zitadel.user.v1.Gender
	0,   // 89: zitadel.admin.v1.AdminService.Healthz:input_type -> zitadel.admin.v1.HealthzRequest
	2,   // 90: zitadel.admin.v1.AdminService.IsOrgUnique:input_type -> zitadel.admin.v1.IsOrgUniqueRequest
	4,   // 91: zitadel.admin.v1.AdminService.GetOrgByID:input_type -> zitadel.admin.v1.GetOrgByIDRequest
	6,   // 92: zitadel.admin.v1.AdminService.ListOrgs:input_type -> zitadel.admin.v1.ListOrgsRequest
	8,   // 93: zitadel.admin.v1.AdminService.SetUpOrg:input_type -> zitadel.admin.v1.SetUpOrgRequest
	10,  // 94: zitadel.admin.v1.AdminService.GetIDPByID:input_type -> zitadel.admin.v1.GetIDPByIDRequest
	12,  // 95: zitadel.admin.v1.AdminService.ListIDPs:input_type -> zitadel.admin.v1.ListIDPsRequest
	15,  // 96: zitadel.admin.v1.AdminService.AddOIDCIDP:input_type -> zitadel.admin.v1.AddOIDCIDPRequest
	17,  // 97: zitadel.admin.v1.AdminService.UpdateIDP:input_type -> zitadel.admin.v1.UpdateIDPRequest
	19,  // 98: zitadel.admin.v1.AdminService.DeactivateIDP:input_type -> zitadel.admin.v1.DeactivateIDPRequest
	21,  // 99: zitadel.admin.v1.AdminService.ReactivateIDP:input_type -> zitadel.admin.v1.ReactivateIDPRequest
	23,  // 100: zitadel.admin.v1.AdminService.RemoveIDP:input_type -> zitadel.admin.v1.RemoveIDPRequest
	25,  // 101: zitadel.admin.v1.AdminService.UpdateIDPOIDCConfig:input_type -> zitadel.admin.v1.UpdateIDPOIDCConfigRequest
	27,  // 102: zitadel.admin.v1.AdminService.GetDefaultFeatures:input_type -> zitadel.admin.v1.GetDefaultFeaturesRequest
	29,  // 103: zitadel.admin.v1.AdminService.SetDefaultFeatures:input_type -> zitadel.admin.v1.SetDefaultFeaturesRequest
	31,  // 104: zitadel.admin.v1.AdminService.GetOrgFeatures:input_type -> zitadel.admin.v1.GetOrgFeaturesRequest
	33,  // 105: zitadel.admin.v1.AdminService.SetOrgFeatures:input_type -> zitadel.admin.v1.SetOrgFeaturesRequest
	35,  // 106: zitadel.admin.v1.AdminService.ResetOrgFeatures:input_type -> zitadel.admin.v1.ResetOrgFeaturesRequest
	37,  // 107: zitadel.admin.v1.AdminService.GetOrgIAMPolicy:input_type -> zitadel.admin.v1.GetOrgIAMPolicyRequest
	39,  // 108: zitadel.admin.v1.AdminService.UpdateOrgIAMPolicy:input_type -> zitadel.admin.v1.UpdateOrgIAMPolicyRequest
	41,  // 109: zitadel.admin.v1.AdminService.GetCustomOrgIAMPolicy:input_type -> zitadel.admin.v1.GetCustomOrgIAMPolicyRequest
	43,  // 110: zitadel.admin.v1.AdminService.AddCustomOrgIAMPolicy:input_type -> zitadel.admin.v1.AddCustomOrgIAMPolicyRequest
	45,  // 111: zitadel.admin.v1.AdminService.UpdateCustomOrgIAMPolicy:input_type -> zitadel.admin.v1.UpdateCustomOrgIAMPolicyRequest
	47,  // 112: zitadel.admin.v1.AdminService.ResetCustomOrgIAMPolicyToDefault:input_type -> zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultRequest
	49,  // 113: zitadel.admin.v1.AdminService.GetLabelPolicy:input_type -> zitadel.admin.v1.GetLabelPolicyRequest
	51,  // 114: zitadel.admin.v1.AdminService.UpdateLabelPolicy:input_type -> zitadel.admin.v1.UpdateLabelPolicyRequest
	53,  // 115: zitadel.admin.v1.AdminService.GetLoginPolicy:input_type -> zitadel.admin.v1.GetLoginPolicyRequest
	55,  // 116: zitadel.admin.v1.AdminService.UpdateLoginPolicy:input_type -> zitadel.admin.v1.UpdateLoginPolicyRequest
	57,  // 117: zitadel.admin.v1.AdminService.ListLoginPolicyIDPs:input_type -> zitadel.admin.v1.ListLoginPolicyIDPsRequest
	59,  // 118: zitadel.admin.v1.AdminService.AddIDPToLoginPolicy:input_type -> zitadel.admin.v1.AddIDPToLoginPolicyRequest
	61,  // 119: zitadel.admin.v1.AdminService.RemoveIDPFromLoginPolicy:input_type -> zitadel.admin.v1.RemoveIDPFromLoginPolicyRequest
	63,  // 120: zitadel.admin.v1.AdminService.ListLoginPolicySecondFactors:input_type -> zitadel.admin.v1.ListLoginPolicySecondFactorsRequest
	65,  // 121: zitadel.admin.v1.AdminService.AddSecondFactorToLoginPolicy:input_type -> zitadel.admin.v1.AddSecondFactorToLoginPolicyRequest
	67,  // 122: zitadel.admin.v1.AdminService.RemoveSecondFactorFromLoginPolicy:input_type -> zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyRequest
	69,  // 123: zitadel.admin.v1.AdminService.ListLoginPolicyMultiFactors:input_type -> zitadel.admin.v1.ListLoginPolicyMultiFactorsRequest
	71,  // 124: zitadel.admin.v1.AdminService.AddMultiFactorToLoginPolicy:input_type -> zitadel.admin.v1.AddMultiFactorToLoginPolicyRequest
	73,  // 125: zitadel.admin.v1.AdminService.RemoveMultiFactorFromLoginPolicy:input_type -> zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyRequest
	75,  // 126: zitadel.admin.v1.AdminService.GetPasswordComplexityPolicy:input_type -> zitadel.admin.v1.GetPasswordComplexityPolicyRequest
	77,  // 127: zitadel.admin.v1.AdminService.UpdatePasswordComplexityPolicy:input_type -> zitadel.admin.v1.UpdatePasswordComplexityPolicyRequest
	79,  // 128: zitadel.admin.v1.AdminService.GetPasswordAgePolicy:input_type -> zitadel.admin.v1.GetPasswordAgePolicyRequest
	81,  // 129: zitadel.admin.v1.AdminService.UpdatePasswordAgePolicy:input_type -> zitadel.admin.v1.UpdatePasswordAgePolicyRequest
	83,  // 130: zitadel.admin.v1.AdminService.GetPasswordLockoutPolicy:input_type -> zitadel.admin.v1.GetPasswordLockoutPolicyRequest
	85,  // 131: zitadel.admin.v1.AdminService.UpdatePasswordLockoutPolicy:input_type -> zitadel.admin.v1.UpdatePasswordLockoutPolicyRequest
	93,  // 132: zitadel.admin.v1.AdminService.ListIAMMemberRoles:input_type -> zitadel.admin.v1.ListIAMMemberRolesRequest
	95,  // 133: zitadel.admin.v1.AdminService.ListIAMMembers:input_type -> zitadel.admin.v1.ListIAMMembersRequest
	87,  // 134: zitadel.admin.v1.AdminService.AddIAMMember:input_type -> zitadel.admin.v1.AddIAMMemberRequest
	89,  // 135: zitadel.admin.v1.AdminService.UpdateIAMMember:input_type -> zitadel.admin.v1.UpdateIAMMemberRequest
	91,  // 136: zitadel.admin.v1.AdminService.RemoveIAMMember:input_type -> zitadel.admin.v1.RemoveIAMMemberRequest
	97,  // 137: zitadel.admin.v1.AdminService.ListViews:input_type -> zitadel.admin.v1.ListViewsRequest
	99,  // 138: zitadel.admin.v1.AdminService.ClearView:input_type -> zitadel.admin.v1.ClearViewRequest
	101, // 139: zitadel.admin.v1.AdminService.ListFailedEvents:input_type -> zitadel.admin.v1.ListFailedEventsRequest
	103, // 140: zitadel.admin.v1.AdminService.RemoveFailedEvent:input_type -> zitadel.admin.v1.RemoveFailedEventRequest
	1,   // 141: zitadel.admin.v1.AdminService.Healthz:output_type -> zitadel.admin.v1.HealthzResponse
	3,   // 142: zitadel.admin.v1.AdminService.IsOrgUnique:output_type -> zitadel.admin.v1.IsOrgUniqueResponse
	5,   // 143: zitadel.admin.v1.AdminService.GetOrgByID:output_type -> zitadel.admin.v1.GetOrgByIDResponse
	7,   // 144: zitadel.admin.v1.AdminService.ListOrgs:output_type -> zitadel.admin.v1.ListOrgsResponse
	9,   // 145: zitadel.admin.v1.AdminService.SetUpOrg:output_type -> zitadel.admin.v1.SetUpOrgResponse
	11,  // 146: zitadel.admin.v1.AdminService.GetIDPByID:output_type -> zitadel.admin.v1.GetIDPByIDResponse
	14,  // 147: zitadel.admin.v1.AdminService.ListIDPs:output_type -> zitadel.admin.v1.ListIDPsResponse
	16,  // 148: zitadel.admin.v1.AdminService.AddOIDCIDP:output_type -> zitadel.admin.v1.AddOIDCIDPResponse
	18,  // 149: zitadel.admin.v1.AdminService.UpdateIDP:output_type -> zitadel.admin.v1.UpdateIDPResponse
	20,  // 150: zitadel.admin.v1.AdminService.DeactivateIDP:output_type -> zitadel.admin.v1.DeactivateIDPResponse
	22,  // 151: zitadel.admin.v1.AdminService.ReactivateIDP:output_type -> zitadel.admin.v1.ReactivateIDPResponse
	24,  // 152: zitadel.admin.v1.AdminService.RemoveIDP:output_type -> zitadel.admin.v1.RemoveIDPResponse
	26,  // 153: zitadel.admin.v1.AdminService.UpdateIDPOIDCConfig:output_type -> zitadel.admin.v1.UpdateIDPOIDCConfigResponse
	28,  // 154: zitadel.admin.v1.AdminService.GetDefaultFeatures:output_type -> zitadel.admin.v1.GetDefaultFeaturesResponse
	30,  // 155: zitadel.admin.v1.AdminService.SetDefaultFeatures:output_type -> zitadel.admin.v1.SetDefaultFeaturesResponse
	32,  // 156: zitadel.admin.v1.AdminService.GetOrgFeatures:output_type -> zitadel.admin.v1.GetOrgFeaturesResponse
	34,  // 157: zitadel.admin.v1.AdminService.SetOrgFeatures:output_type -> zitadel.admin.v1.SetOrgFeaturesResponse
	36,  // 158: zitadel.admin.v1.AdminService.ResetOrgFeatures:output_type -> zitadel.admin.v1.ResetOrgFeaturesResponse
	38,  // 159: zitadel.admin.v1.AdminService.GetOrgIAMPolicy:output_type -> zitadel.admin.v1.GetOrgIAMPolicyResponse
	40,  // 160: zitadel.admin.v1.AdminService.UpdateOrgIAMPolicy:output_type -> zitadel.admin.v1.UpdateOrgIAMPolicyResponse
	42,  // 161: zitadel.admin.v1.AdminService.GetCustomOrgIAMPolicy:output_type -> zitadel.admin.v1.GetCustomOrgIAMPolicyResponse
	44,  // 162: zitadel.admin.v1.AdminService.AddCustomOrgIAMPolicy:output_type -> zitadel.admin.v1.AddCustomOrgIAMPolicyResponse
	46,  // 163: zitadel.admin.v1.AdminService.UpdateCustomOrgIAMPolicy:output_type -> zitadel.admin.v1.UpdateCustomOrgIAMPolicyResponse
	48,  // 164: zitadel.admin.v1.AdminService.ResetCustomOrgIAMPolicyToDefault:output_type -> zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultResponse
	50,  // 165: zitadel.admin.v1.AdminService.GetLabelPolicy:output_type -> zitadel.admin.v1.GetLabelPolicyResponse
	52,  // 166: zitadel.admin.v1.AdminService.UpdateLabelPolicy:output_type -> zitadel.admin.v1.UpdateLabelPolicyResponse
	54,  // 167: zitadel.admin.v1.AdminService.GetLoginPolicy:output_type -> zitadel.admin.v1.GetLoginPolicyResponse
	56,  // 168: zitadel.admin.v1.AdminService.UpdateLoginPolicy:output_type -> zitadel.admin.v1.UpdateLoginPolicyResponse
	58,  // 169: zitadel.admin.v1.AdminService.ListLoginPolicyIDPs:output_type -> zitadel.admin.v1.ListLoginPolicyIDPsResponse
	60,  // 170: zitadel.admin.v1.AdminService.AddIDPToLoginPolicy:output_type -> zitadel.admin.v1.AddIDPToLoginPolicyResponse
	62,  // 171: zitadel.admin.v1.AdminService.RemoveIDPFromLoginPolicy:output_type -> zitadel.admin.v1.RemoveIDPFromLoginPolicyResponse
	64,  // 172: zitadel.admin.v1.AdminService.ListLoginPolicySecondFactors:output_type -> zitadel.admin.v1.ListLoginPolicySecondFactorsResponse
	66,  // 173: zitadel.admin.v1.AdminService.AddSecondFactorToLoginPolicy:output_type -> zitadel.admin.v1.AddSecondFactorToLoginPolicyResponse
	68,  // 174: zitadel.admin.v1.AdminService.RemoveSecondFactorFromLoginPolicy:output_type -> zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyResponse
	70,  // 175: zitadel.admin.v1.AdminService.ListLoginPolicyMultiFactors:output_type -> zitadel.admin.v1.ListLoginPolicyMultiFactorsResponse
	72,  // 176: zitadel.admin.v1.AdminService.AddMultiFactorToLoginPolicy:output_type -> zitadel.admin.v1.AddMultiFactorToLoginPolicyResponse
	74,  // 177: zitadel.admin.v1.AdminService.RemoveMultiFactorFromLoginPolicy:output_type -> zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyResponse
	76,  // 178: zitadel.admin.v1.AdminService.GetPasswordComplexityPolicy:output_type -> zitadel.admin.v1.GetPasswordComplexityPolicyResponse
	78,  // 179: zitadel.admin.v1.AdminService.UpdatePasswordComplexityPolicy:output_type -> zitadel.admin.v1.UpdatePasswordComplexityPolicyResponse
	80,  // 180: zitadel.admin.v1.AdminService.GetPasswordAgePolicy:output_type -> zitadel.admin.v1.GetPasswordAgePolicyResponse
	82,  // 181: zitadel.admin.v1.AdminService.UpdatePasswordAgePolicy:output_type -> zitadel.admin.v1.UpdatePasswordAgePolicyResponse
	84,  // 182: zitadel.admin.v1.AdminService.GetPasswordLockoutPolicy:output_type -> zitadel.admin.v1.GetPasswordLockoutPolicyResponse
	86,  // 183: zitadel.admin.v1.AdminService.UpdatePasswordLockoutPolicy:output_type -> zitadel.admin.v1.UpdatePasswordLockoutPolicyResponse
	94,  // 184: zitadel.admin.v1.AdminService.ListIAMMemberRoles:output_type -> zitadel.admin.v1.ListIAMMemberRolesResponse
	96,  // 185: zitadel.admin.v1.AdminService.ListIAMMembers:output_type -> zitadel.admin.v1.ListIAMMembersResponse
	88,  // 186: zitadel.admin.v1.AdminService.AddIAMMember:output_type -> zitadel.admin.v1.AddIAMMemberResponse
	90,  // 187: zitadel.admin.v1.AdminService.UpdateIAMMember:output_type -> zitadel.admin.v1.UpdateIAMMemberResponse
	92,  // 188: zitadel.admin.v1.AdminService.RemoveIAMMember:output_type -> zitadel.admin.v1.RemoveIAMMemberResponse
	98,  // 189: zitadel.admin.v1.AdminService.ListViews:output_type -> zitadel.admin.v1.ListViewsResponse
	100, // 190: zitadel.admin.v1.AdminService.ClearView:output_type -> zitadel.admin.v1.ClearViewResponse
	102, // 191: zitadel.admin.v1.AdminService.ListFailedEvents:output_type -> zitadel.admin.v1.ListFailedEventsResponse
	104, // 192: zitadel.admin.v1.AdminService.RemoveFailedEvent:output_type -> zitadel.admin.v1.RemoveFailedEventResponse
	141, // [141:193] is the sub-list for method output_type
	89,  // [89:141] is the sub-list for method input_type
	89,  // [89:89] is the sub-list for extension type_name
	89,  // [89:89] is the sub-list for extension extendee
	0,   // [0:89] is the sub-list for field type_name
}

func init() { file_zitadel_admin_proto_init() }
func file_zitadel_admin_proto_init() {
	if File_zitadel_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOrgUniqueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOrgUniqueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIDPByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIDPByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIDPsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIDPsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOIDCIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOIDCIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactivateIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactivateIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIDPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIDPOIDCConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIDPOIDCConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrgFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrgFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetOrgFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetOrgFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgIAMPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgIAMPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomOrgIAMPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCustomOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCustomOrgIAMPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomOrgIAMPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomOrgIAMPolicyToDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCustomOrgIAMPolicyToDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicyIDPsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicyIDPsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIDPToLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIDPToLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIDPFromLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIDPFromLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicySecondFactorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicySecondFactorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSecondFactorToLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSecondFactorToLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSecondFactorFromLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSecondFactorFromLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicyMultiFactorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoginPolicyMultiFactorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMultiFactorToLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMultiFactorToLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMultiFactorFromLoginPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMultiFactorFromLoginPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordComplexityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordComplexityPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordComplexityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordComplexityPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordAgePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordAgePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordAgePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordAgePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordLockoutPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordLockoutPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordLockoutPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePasswordLockoutPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIAMMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIAMMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIAMMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIAMMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIAMMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIAMMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIAMMemberRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIAMMemberRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIAMMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIAMMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListViewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListViewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFailedEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFailedEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFailedEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFailedEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest_Org); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest_Human); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest_Human_Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest_Human_Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_admin_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpOrgRequest_Human_Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_admin_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SetUpOrgRequest_Human_)(nil),
	}
	file_zitadel_admin_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*IDPQuery_IdpIdQuery)(nil),
		(*IDPQuery_IdpNameQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   112,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zitadel_admin_proto_goTypes,
		DependencyIndexes: file_zitadel_admin_proto_depIdxs,
		MessageInfos:      file_zitadel_admin_proto_msgTypes,
	}.Build()
	File_zitadel_admin_proto = out.File
	file_zitadel_admin_proto_rawDesc = nil
	file_zitadel_admin_proto_goTypes = nil
	file_zitadel_admin_proto_depIdxs = nil
}
