// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementServiceClient is the client API for ManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementServiceClient interface {
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	GetOIDCInformation(ctx context.Context, in *GetOIDCInformationRequest, opts ...grpc.CallOption) (*GetOIDCInformationResponse, error)
	GetIAM(ctx context.Context, in *GetIAMRequest, opts ...grpc.CallOption) (*GetIAMResponse, error)
	GetSupportedLanguages(ctx context.Context, in *GetSupportedLanguagesRequest, opts ...grpc.CallOption) (*GetSupportedLanguagesResponse, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	GetUserByLoginNameGlobal(ctx context.Context, in *GetUserByLoginNameGlobalRequest, opts ...grpc.CallOption) (*GetUserByLoginNameGlobalResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	ListUserChanges(ctx context.Context, in *ListUserChangesRequest, opts ...grpc.CallOption) (*ListUserChangesResponse, error)
	IsUserUnique(ctx context.Context, in *IsUserUniqueRequest, opts ...grpc.CallOption) (*IsUserUniqueResponse, error)
	// deprecated: use ImportHumanUser
	AddHumanUser(ctx context.Context, in *AddHumanUserRequest, opts ...grpc.CallOption) (*AddHumanUserResponse, error)
	ImportHumanUser(ctx context.Context, in *ImportHumanUserRequest, opts ...grpc.CallOption) (*ImportHumanUserResponse, error)
	AddMachineUser(ctx context.Context, in *AddMachineUserRequest, opts ...grpc.CallOption) (*AddMachineUserResponse, error)
	DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error)
	ReactivateUser(ctx context.Context, in *ReactivateUserRequest, opts ...grpc.CallOption) (*ReactivateUserResponse, error)
	LockUser(ctx context.Context, in *LockUserRequest, opts ...grpc.CallOption) (*LockUserResponse, error)
	UnlockUser(ctx context.Context, in *UnlockUserRequest, opts ...grpc.CallOption) (*UnlockUserResponse, error)
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error)
	SetUserMetadata(ctx context.Context, in *SetUserMetadataRequest, opts ...grpc.CallOption) (*SetUserMetadataResponse, error)
	BulkSetUserMetadata(ctx context.Context, in *BulkSetUserMetadataRequest, opts ...grpc.CallOption) (*BulkSetUserMetadataResponse, error)
	ListUserMetadata(ctx context.Context, in *ListUserMetadataRequest, opts ...grpc.CallOption) (*ListUserMetadataResponse, error)
	GetUserMetadata(ctx context.Context, in *GetUserMetadataRequest, opts ...grpc.CallOption) (*GetUserMetadataResponse, error)
	RemoveUserMetadata(ctx context.Context, in *RemoveUserMetadataRequest, opts ...grpc.CallOption) (*RemoveUserMetadataResponse, error)
	BulkRemoveUserMetadata(ctx context.Context, in *BulkRemoveUserMetadataRequest, opts ...grpc.CallOption) (*BulkRemoveUserMetadataResponse, error)
	GetHumanProfile(ctx context.Context, in *GetHumanProfileRequest, opts ...grpc.CallOption) (*GetHumanProfileResponse, error)
	UpdateHumanProfile(ctx context.Context, in *UpdateHumanProfileRequest, opts ...grpc.CallOption) (*UpdateHumanProfileResponse, error)
	GetHumanEmail(ctx context.Context, in *GetHumanEmailRequest, opts ...grpc.CallOption) (*GetHumanEmailResponse, error)
	UpdateHumanEmail(ctx context.Context, in *UpdateHumanEmailRequest, opts ...grpc.CallOption) (*UpdateHumanEmailResponse, error)
	ResendHumanInitialization(ctx context.Context, in *ResendHumanInitializationRequest, opts ...grpc.CallOption) (*ResendHumanInitializationResponse, error)
	ResendHumanEmailVerification(ctx context.Context, in *ResendHumanEmailVerificationRequest, opts ...grpc.CallOption) (*ResendHumanEmailVerificationResponse, error)
	GetHumanPhone(ctx context.Context, in *GetHumanPhoneRequest, opts ...grpc.CallOption) (*GetHumanPhoneResponse, error)
	UpdateHumanPhone(ctx context.Context, in *UpdateHumanPhoneRequest, opts ...grpc.CallOption) (*UpdateHumanPhoneResponse, error)
	RemoveHumanPhone(ctx context.Context, in *RemoveHumanPhoneRequest, opts ...grpc.CallOption) (*RemoveHumanPhoneResponse, error)
	ResendHumanPhoneVerification(ctx context.Context, in *ResendHumanPhoneVerificationRequest, opts ...grpc.CallOption) (*ResendHumanPhoneVerificationResponse, error)
	RemoveHumanAvatar(ctx context.Context, in *RemoveHumanAvatarRequest, opts ...grpc.CallOption) (*RemoveHumanAvatarResponse, error)
	// deprecated: use SetHumanPassword
	SetHumanInitialPassword(ctx context.Context, in *SetHumanInitialPasswordRequest, opts ...grpc.CallOption) (*SetHumanInitialPasswordResponse, error)
	SetHumanPassword(ctx context.Context, in *SetHumanPasswordRequest, opts ...grpc.CallOption) (*SetHumanPasswordResponse, error)
	SendHumanResetPasswordNotification(ctx context.Context, in *SendHumanResetPasswordNotificationRequest, opts ...grpc.CallOption) (*SendHumanResetPasswordNotificationResponse, error)
	ListHumanAuthFactors(ctx context.Context, in *ListHumanAuthFactorsRequest, opts ...grpc.CallOption) (*ListHumanAuthFactorsResponse, error)
	RemoveHumanAuthFactorOTP(ctx context.Context, in *RemoveHumanAuthFactorOTPRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorOTPResponse, error)
	RemoveHumanAuthFactorU2F(ctx context.Context, in *RemoveHumanAuthFactorU2FRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorU2FResponse, error)
	RemoveHumanAuthFactorOTPSMS(ctx context.Context, in *RemoveHumanAuthFactorOTPSMSRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorOTPSMSResponse, error)
	RemoveHumanAuthFactorOTPEmail(ctx context.Context, in *RemoveHumanAuthFactorOTPEmailRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorOTPEmailResponse, error)
	ListHumanPasswordless(ctx context.Context, in *ListHumanPasswordlessRequest, opts ...grpc.CallOption) (*ListHumanPasswordlessResponse, error)
	AddPasswordlessRegistration(ctx context.Context, in *AddPasswordlessRegistrationRequest, opts ...grpc.CallOption) (*AddPasswordlessRegistrationResponse, error)
	SendPasswordlessRegistration(ctx context.Context, in *SendPasswordlessRegistrationRequest, opts ...grpc.CallOption) (*SendPasswordlessRegistrationResponse, error)
	RemoveHumanPasswordless(ctx context.Context, in *RemoveHumanPasswordlessRequest, opts ...grpc.CallOption) (*RemoveHumanPasswordlessResponse, error)
	UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*UpdateMachineResponse, error)
	GenerateMachineSecret(ctx context.Context, in *GenerateMachineSecretRequest, opts ...grpc.CallOption) (*GenerateMachineSecretResponse, error)
	RemoveMachineSecret(ctx context.Context, in *RemoveMachineSecretRequest, opts ...grpc.CallOption) (*RemoveMachineSecretResponse, error)
	GetMachineKeyByIDs(ctx context.Context, in *GetMachineKeyByIDsRequest, opts ...grpc.CallOption) (*GetMachineKeyByIDsResponse, error)
	ListMachineKeys(ctx context.Context, in *ListMachineKeysRequest, opts ...grpc.CallOption) (*ListMachineKeysResponse, error)
	AddMachineKey(ctx context.Context, in *AddMachineKeyRequest, opts ...grpc.CallOption) (*AddMachineKeyResponse, error)
	RemoveMachineKey(ctx context.Context, in *RemoveMachineKeyRequest, opts ...grpc.CallOption) (*RemoveMachineKeyResponse, error)
	GetPersonalAccessTokenByIDs(ctx context.Context, in *GetPersonalAccessTokenByIDsRequest, opts ...grpc.CallOption) (*GetPersonalAccessTokenByIDsResponse, error)
	ListPersonalAccessTokens(ctx context.Context, in *ListPersonalAccessTokensRequest, opts ...grpc.CallOption) (*ListPersonalAccessTokensResponse, error)
	AddPersonalAccessToken(ctx context.Context, in *AddPersonalAccessTokenRequest, opts ...grpc.CallOption) (*AddPersonalAccessTokenResponse, error)
	RemovePersonalAccessToken(ctx context.Context, in *RemovePersonalAccessTokenRequest, opts ...grpc.CallOption) (*RemovePersonalAccessTokenResponse, error)
	ListHumanLinkedIDPs(ctx context.Context, in *ListHumanLinkedIDPsRequest, opts ...grpc.CallOption) (*ListHumanLinkedIDPsResponse, error)
	RemoveHumanLinkedIDP(ctx context.Context, in *RemoveHumanLinkedIDPRequest, opts ...grpc.CallOption) (*RemoveHumanLinkedIDPResponse, error)
	ListUserMemberships(ctx context.Context, in *ListUserMembershipsRequest, opts ...grpc.CallOption) (*ListUserMembershipsResponse, error)
	GetMyOrg(ctx context.Context, in *GetMyOrgRequest, opts ...grpc.CallOption) (*GetMyOrgResponse, error)
	GetOrgByDomainGlobal(ctx context.Context, in *GetOrgByDomainGlobalRequest, opts ...grpc.CallOption) (*GetOrgByDomainGlobalResponse, error)
	ListOrgChanges(ctx context.Context, in *ListOrgChangesRequest, opts ...grpc.CallOption) (*ListOrgChangesResponse, error)
	AddOrg(ctx context.Context, in *AddOrgRequest, opts ...grpc.CallOption) (*AddOrgResponse, error)
	UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...grpc.CallOption) (*UpdateOrgResponse, error)
	DeactivateOrg(ctx context.Context, in *DeactivateOrgRequest, opts ...grpc.CallOption) (*DeactivateOrgResponse, error)
	ReactivateOrg(ctx context.Context, in *ReactivateOrgRequest, opts ...grpc.CallOption) (*ReactivateOrgResponse, error)
	RemoveOrg(ctx context.Context, in *RemoveOrgRequest, opts ...grpc.CallOption) (*RemoveOrgResponse, error)
	SetOrgMetadata(ctx context.Context, in *SetOrgMetadataRequest, opts ...grpc.CallOption) (*SetOrgMetadataResponse, error)
	BulkSetOrgMetadata(ctx context.Context, in *BulkSetOrgMetadataRequest, opts ...grpc.CallOption) (*BulkSetOrgMetadataResponse, error)
	ListOrgMetadata(ctx context.Context, in *ListOrgMetadataRequest, opts ...grpc.CallOption) (*ListOrgMetadataResponse, error)
	GetOrgMetadata(ctx context.Context, in *GetOrgMetadataRequest, opts ...grpc.CallOption) (*GetOrgMetadataResponse, error)
	RemoveOrgMetadata(ctx context.Context, in *RemoveOrgMetadataRequest, opts ...grpc.CallOption) (*RemoveOrgMetadataResponse, error)
	BulkRemoveOrgMetadata(ctx context.Context, in *BulkRemoveOrgMetadataRequest, opts ...grpc.CallOption) (*BulkRemoveOrgMetadataResponse, error)
	ListOrgDomains(ctx context.Context, in *ListOrgDomainsRequest, opts ...grpc.CallOption) (*ListOrgDomainsResponse, error)
	AddOrgDomain(ctx context.Context, in *AddOrgDomainRequest, opts ...grpc.CallOption) (*AddOrgDomainResponse, error)
	RemoveOrgDomain(ctx context.Context, in *RemoveOrgDomainRequest, opts ...grpc.CallOption) (*RemoveOrgDomainResponse, error)
	GenerateOrgDomainValidation(ctx context.Context, in *GenerateOrgDomainValidationRequest, opts ...grpc.CallOption) (*GenerateOrgDomainValidationResponse, error)
	ValidateOrgDomain(ctx context.Context, in *ValidateOrgDomainRequest, opts ...grpc.CallOption) (*ValidateOrgDomainResponse, error)
	SetPrimaryOrgDomain(ctx context.Context, in *SetPrimaryOrgDomainRequest, opts ...grpc.CallOption) (*SetPrimaryOrgDomainResponse, error)
	ListOrgMemberRoles(ctx context.Context, in *ListOrgMemberRolesRequest, opts ...grpc.CallOption) (*ListOrgMemberRolesResponse, error)
	ListOrgMembers(ctx context.Context, in *ListOrgMembersRequest, opts ...grpc.CallOption) (*ListOrgMembersResponse, error)
	AddOrgMember(ctx context.Context, in *AddOrgMemberRequest, opts ...grpc.CallOption) (*AddOrgMemberResponse, error)
	UpdateOrgMember(ctx context.Context, in *UpdateOrgMemberRequest, opts ...grpc.CallOption) (*UpdateOrgMemberResponse, error)
	RemoveOrgMember(ctx context.Context, in *RemoveOrgMemberRequest, opts ...grpc.CallOption) (*RemoveOrgMemberResponse, error)
	GetProjectByID(ctx context.Context, in *GetProjectByIDRequest, opts ...grpc.CallOption) (*GetProjectByIDResponse, error)
	GetGrantedProjectByID(ctx context.Context, in *GetGrantedProjectByIDRequest, opts ...grpc.CallOption) (*GetGrantedProjectByIDResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	ListGrantedProjects(ctx context.Context, in *ListGrantedProjectsRequest, opts ...grpc.CallOption) (*ListGrantedProjectsResponse, error)
	ListGrantedProjectRoles(ctx context.Context, in *ListGrantedProjectRolesRequest, opts ...grpc.CallOption) (*ListGrantedProjectRolesResponse, error)
	ListProjectChanges(ctx context.Context, in *ListProjectChangesRequest, opts ...grpc.CallOption) (*ListProjectChangesResponse, error)
	AddProject(ctx context.Context, in *AddProjectRequest, opts ...grpc.CallOption) (*AddProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	DeactivateProject(ctx context.Context, in *DeactivateProjectRequest, opts ...grpc.CallOption) (*DeactivateProjectResponse, error)
	ReactivateProject(ctx context.Context, in *ReactivateProjectRequest, opts ...grpc.CallOption) (*ReactivateProjectResponse, error)
	RemoveProject(ctx context.Context, in *RemoveProjectRequest, opts ...grpc.CallOption) (*RemoveProjectResponse, error)
	ListProjectRoles(ctx context.Context, in *ListProjectRolesRequest, opts ...grpc.CallOption) (*ListProjectRolesResponse, error)
	AddProjectRole(ctx context.Context, in *AddProjectRoleRequest, opts ...grpc.CallOption) (*AddProjectRoleResponse, error)
	BulkAddProjectRoles(ctx context.Context, in *BulkAddProjectRolesRequest, opts ...grpc.CallOption) (*BulkAddProjectRolesResponse, error)
	UpdateProjectRole(ctx context.Context, in *UpdateProjectRoleRequest, opts ...grpc.CallOption) (*UpdateProjectRoleResponse, error)
	RemoveProjectRole(ctx context.Context, in *RemoveProjectRoleRequest, opts ...grpc.CallOption) (*RemoveProjectRoleResponse, error)
	ListProjectMemberRoles(ctx context.Context, in *ListProjectMemberRolesRequest, opts ...grpc.CallOption) (*ListProjectMemberRolesResponse, error)
	ListProjectMembers(ctx context.Context, in *ListProjectMembersRequest, opts ...grpc.CallOption) (*ListProjectMembersResponse, error)
	AddProjectMember(ctx context.Context, in *AddProjectMemberRequest, opts ...grpc.CallOption) (*AddProjectMemberResponse, error)
	UpdateProjectMember(ctx context.Context, in *UpdateProjectMemberRequest, opts ...grpc.CallOption) (*UpdateProjectMemberResponse, error)
	RemoveProjectMember(ctx context.Context, in *RemoveProjectMemberRequest, opts ...grpc.CallOption) (*RemoveProjectMemberResponse, error)
	GetAppByID(ctx context.Context, in *GetAppByIDRequest, opts ...grpc.CallOption) (*GetAppByIDResponse, error)
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	ListAppChanges(ctx context.Context, in *ListAppChangesRequest, opts ...grpc.CallOption) (*ListAppChangesResponse, error)
	AddOIDCApp(ctx context.Context, in *AddOIDCAppRequest, opts ...grpc.CallOption) (*AddOIDCAppResponse, error)
	AddSAMLApp(ctx context.Context, in *AddSAMLAppRequest, opts ...grpc.CallOption) (*AddSAMLAppResponse, error)
	AddAPIApp(ctx context.Context, in *AddAPIAppRequest, opts ...grpc.CallOption) (*AddAPIAppResponse, error)
	// Changes application
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	UpdateOIDCAppConfig(ctx context.Context, in *UpdateOIDCAppConfigRequest, opts ...grpc.CallOption) (*UpdateOIDCAppConfigResponse, error)
	UpdateSAMLAppConfig(ctx context.Context, in *UpdateSAMLAppConfigRequest, opts ...grpc.CallOption) (*UpdateSAMLAppConfigResponse, error)
	UpdateAPIAppConfig(ctx context.Context, in *UpdateAPIAppConfigRequest, opts ...grpc.CallOption) (*UpdateAPIAppConfigResponse, error)
	DeactivateApp(ctx context.Context, in *DeactivateAppRequest, opts ...grpc.CallOption) (*DeactivateAppResponse, error)
	ReactivateApp(ctx context.Context, in *ReactivateAppRequest, opts ...grpc.CallOption) (*ReactivateAppResponse, error)
	RemoveApp(ctx context.Context, in *RemoveAppRequest, opts ...grpc.CallOption) (*RemoveAppResponse, error)
	RegenerateOIDCClientSecret(ctx context.Context, in *RegenerateOIDCClientSecretRequest, opts ...grpc.CallOption) (*RegenerateOIDCClientSecretResponse, error)
	RegenerateAPIClientSecret(ctx context.Context, in *RegenerateAPIClientSecretRequest, opts ...grpc.CallOption) (*RegenerateAPIClientSecretResponse, error)
	GetAppKey(ctx context.Context, in *GetAppKeyRequest, opts ...grpc.CallOption) (*GetAppKeyResponse, error)
	ListAppKeys(ctx context.Context, in *ListAppKeysRequest, opts ...grpc.CallOption) (*ListAppKeysResponse, error)
	AddAppKey(ctx context.Context, in *AddAppKeyRequest, opts ...grpc.CallOption) (*AddAppKeyResponse, error)
	RemoveAppKey(ctx context.Context, in *RemoveAppKeyRequest, opts ...grpc.CallOption) (*RemoveAppKeyResponse, error)
	ListProjectGrantChanges(ctx context.Context, in *ListProjectGrantChangesRequest, opts ...grpc.CallOption) (*ListProjectGrantChangesResponse, error)
	GetProjectGrantByID(ctx context.Context, in *GetProjectGrantByIDRequest, opts ...grpc.CallOption) (*GetProjectGrantByIDResponse, error)
	ListProjectGrants(ctx context.Context, in *ListProjectGrantsRequest, opts ...grpc.CallOption) (*ListProjectGrantsResponse, error)
	ListAllProjectGrants(ctx context.Context, in *ListAllProjectGrantsRequest, opts ...grpc.CallOption) (*ListAllProjectGrantsResponse, error)
	AddProjectGrant(ctx context.Context, in *AddProjectGrantRequest, opts ...grpc.CallOption) (*AddProjectGrantResponse, error)
	UpdateProjectGrant(ctx context.Context, in *UpdateProjectGrantRequest, opts ...grpc.CallOption) (*UpdateProjectGrantResponse, error)
	DeactivateProjectGrant(ctx context.Context, in *DeactivateProjectGrantRequest, opts ...grpc.CallOption) (*DeactivateProjectGrantResponse, error)
	ReactivateProjectGrant(ctx context.Context, in *ReactivateProjectGrantRequest, opts ...grpc.CallOption) (*ReactivateProjectGrantResponse, error)
	RemoveProjectGrant(ctx context.Context, in *RemoveProjectGrantRequest, opts ...grpc.CallOption) (*RemoveProjectGrantResponse, error)
	ListProjectGrantMemberRoles(ctx context.Context, in *ListProjectGrantMemberRolesRequest, opts ...grpc.CallOption) (*ListProjectGrantMemberRolesResponse, error)
	ListProjectGrantMembers(ctx context.Context, in *ListProjectGrantMembersRequest, opts ...grpc.CallOption) (*ListProjectGrantMembersResponse, error)
	AddProjectGrantMember(ctx context.Context, in *AddProjectGrantMemberRequest, opts ...grpc.CallOption) (*AddProjectGrantMemberResponse, error)
	UpdateProjectGrantMember(ctx context.Context, in *UpdateProjectGrantMemberRequest, opts ...grpc.CallOption) (*UpdateProjectGrantMemberResponse, error)
	RemoveProjectGrantMember(ctx context.Context, in *RemoveProjectGrantMemberRequest, opts ...grpc.CallOption) (*RemoveProjectGrantMemberResponse, error)
	GetUserGrantByID(ctx context.Context, in *GetUserGrantByIDRequest, opts ...grpc.CallOption) (*GetUserGrantByIDResponse, error)
	ListUserGrants(ctx context.Context, in *ListUserGrantRequest, opts ...grpc.CallOption) (*ListUserGrantResponse, error)
	AddUserGrant(ctx context.Context, in *AddUserGrantRequest, opts ...grpc.CallOption) (*AddUserGrantResponse, error)
	UpdateUserGrant(ctx context.Context, in *UpdateUserGrantRequest, opts ...grpc.CallOption) (*UpdateUserGrantResponse, error)
	DeactivateUserGrant(ctx context.Context, in *DeactivateUserGrantRequest, opts ...grpc.CallOption) (*DeactivateUserGrantResponse, error)
	ReactivateUserGrant(ctx context.Context, in *ReactivateUserGrantRequest, opts ...grpc.CallOption) (*ReactivateUserGrantResponse, error)
	RemoveUserGrant(ctx context.Context, in *RemoveUserGrantRequest, opts ...grpc.CallOption) (*RemoveUserGrantResponse, error)
	BulkRemoveUserGrant(ctx context.Context, in *BulkRemoveUserGrantRequest, opts ...grpc.CallOption) (*BulkRemoveUserGrantResponse, error)
	// deprecated: please use DomainPolicy instead
	GetOrgIAMPolicy(ctx context.Context, in *GetOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetOrgIAMPolicyResponse, error)
	GetDomainPolicy(ctx context.Context, in *GetDomainPolicyRequest, opts ...grpc.CallOption) (*GetDomainPolicyResponse, error)
	GetLoginPolicy(ctx context.Context, in *GetLoginPolicyRequest, opts ...grpc.CallOption) (*GetLoginPolicyResponse, error)
	GetDefaultLoginPolicy(ctx context.Context, in *GetDefaultLoginPolicyRequest, opts ...grpc.CallOption) (*GetDefaultLoginPolicyResponse, error)
	AddCustomLoginPolicy(ctx context.Context, in *AddCustomLoginPolicyRequest, opts ...grpc.CallOption) (*AddCustomLoginPolicyResponse, error)
	UpdateCustomLoginPolicy(ctx context.Context, in *UpdateCustomLoginPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomLoginPolicyResponse, error)
	ResetLoginPolicyToDefault(ctx context.Context, in *ResetLoginPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetLoginPolicyToDefaultResponse, error)
	ListLoginPolicyIDPs(ctx context.Context, in *ListLoginPolicyIDPsRequest, opts ...grpc.CallOption) (*ListLoginPolicyIDPsResponse, error)
	AddIDPToLoginPolicy(ctx context.Context, in *AddIDPToLoginPolicyRequest, opts ...grpc.CallOption) (*AddIDPToLoginPolicyResponse, error)
	RemoveIDPFromLoginPolicy(ctx context.Context, in *RemoveIDPFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveIDPFromLoginPolicyResponse, error)
	ListLoginPolicySecondFactors(ctx context.Context, in *ListLoginPolicySecondFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicySecondFactorsResponse, error)
	AddSecondFactorToLoginPolicy(ctx context.Context, in *AddSecondFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddSecondFactorToLoginPolicyResponse, error)
	RemoveSecondFactorFromLoginPolicy(ctx context.Context, in *RemoveSecondFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveSecondFactorFromLoginPolicyResponse, error)
	ListLoginPolicyMultiFactors(ctx context.Context, in *ListLoginPolicyMultiFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicyMultiFactorsResponse, error)
	AddMultiFactorToLoginPolicy(ctx context.Context, in *AddMultiFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddMultiFactorToLoginPolicyResponse, error)
	RemoveMultiFactorFromLoginPolicy(ctx context.Context, in *RemoveMultiFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveMultiFactorFromLoginPolicyResponse, error)
	GetPasswordComplexityPolicy(ctx context.Context, in *GetPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetPasswordComplexityPolicyResponse, error)
	GetDefaultPasswordComplexityPolicy(ctx context.Context, in *GetDefaultPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetDefaultPasswordComplexityPolicyResponse, error)
	AddCustomPasswordComplexityPolicy(ctx context.Context, in *AddCustomPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*AddCustomPasswordComplexityPolicyResponse, error)
	UpdateCustomPasswordComplexityPolicy(ctx context.Context, in *UpdateCustomPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPasswordComplexityPolicyResponse, error)
	ResetPasswordComplexityPolicyToDefault(ctx context.Context, in *ResetPasswordComplexityPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPasswordComplexityPolicyToDefaultResponse, error)
	GetPasswordAgePolicy(ctx context.Context, in *GetPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetPasswordAgePolicyResponse, error)
	GetDefaultPasswordAgePolicy(ctx context.Context, in *GetDefaultPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetDefaultPasswordAgePolicyResponse, error)
	AddCustomPasswordAgePolicy(ctx context.Context, in *AddCustomPasswordAgePolicyRequest, opts ...grpc.CallOption) (*AddCustomPasswordAgePolicyResponse, error)
	UpdateCustomPasswordAgePolicy(ctx context.Context, in *UpdateCustomPasswordAgePolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPasswordAgePolicyResponse, error)
	ResetPasswordAgePolicyToDefault(ctx context.Context, in *ResetPasswordAgePolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPasswordAgePolicyToDefaultResponse, error)
	GetLockoutPolicy(ctx context.Context, in *GetLockoutPolicyRequest, opts ...grpc.CallOption) (*GetLockoutPolicyResponse, error)
	GetDefaultLockoutPolicy(ctx context.Context, in *GetDefaultLockoutPolicyRequest, opts ...grpc.CallOption) (*GetDefaultLockoutPolicyResponse, error)
	AddCustomLockoutPolicy(ctx context.Context, in *AddCustomLockoutPolicyRequest, opts ...grpc.CallOption) (*AddCustomLockoutPolicyResponse, error)
	UpdateCustomLockoutPolicy(ctx context.Context, in *UpdateCustomLockoutPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomLockoutPolicyResponse, error)
	ResetLockoutPolicyToDefault(ctx context.Context, in *ResetLockoutPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetLockoutPolicyToDefaultResponse, error)
	GetPrivacyPolicy(ctx context.Context, in *GetPrivacyPolicyRequest, opts ...grpc.CallOption) (*GetPrivacyPolicyResponse, error)
	GetDefaultPrivacyPolicy(ctx context.Context, in *GetDefaultPrivacyPolicyRequest, opts ...grpc.CallOption) (*GetDefaultPrivacyPolicyResponse, error)
	AddCustomPrivacyPolicy(ctx context.Context, in *AddCustomPrivacyPolicyRequest, opts ...grpc.CallOption) (*AddCustomPrivacyPolicyResponse, error)
	UpdateCustomPrivacyPolicy(ctx context.Context, in *UpdateCustomPrivacyPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPrivacyPolicyResponse, error)
	ResetPrivacyPolicyToDefault(ctx context.Context, in *ResetPrivacyPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPrivacyPolicyToDefaultResponse, error)
	GetNotificationPolicy(ctx context.Context, in *GetNotificationPolicyRequest, opts ...grpc.CallOption) (*GetNotificationPolicyResponse, error)
	GetDefaultNotificationPolicy(ctx context.Context, in *GetDefaultNotificationPolicyRequest, opts ...grpc.CallOption) (*GetDefaultNotificationPolicyResponse, error)
	AddCustomNotificationPolicy(ctx context.Context, in *AddCustomNotificationPolicyRequest, opts ...grpc.CallOption) (*AddCustomNotificationPolicyResponse, error)
	UpdateCustomNotificationPolicy(ctx context.Context, in *UpdateCustomNotificationPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomNotificationPolicyResponse, error)
	ResetNotificationPolicyToDefault(ctx context.Context, in *ResetNotificationPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetNotificationPolicyToDefaultResponse, error)
	GetLabelPolicy(ctx context.Context, in *GetLabelPolicyRequest, opts ...grpc.CallOption) (*GetLabelPolicyResponse, error)
	GetPreviewLabelPolicy(ctx context.Context, in *GetPreviewLabelPolicyRequest, opts ...grpc.CallOption) (*GetPreviewLabelPolicyResponse, error)
	GetDefaultLabelPolicy(ctx context.Context, in *GetDefaultLabelPolicyRequest, opts ...grpc.CallOption) (*GetDefaultLabelPolicyResponse, error)
	AddCustomLabelPolicy(ctx context.Context, in *AddCustomLabelPolicyRequest, opts ...grpc.CallOption) (*AddCustomLabelPolicyResponse, error)
	UpdateCustomLabelPolicy(ctx context.Context, in *UpdateCustomLabelPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomLabelPolicyResponse, error)
	ActivateCustomLabelPolicy(ctx context.Context, in *ActivateCustomLabelPolicyRequest, opts ...grpc.CallOption) (*ActivateCustomLabelPolicyResponse, error)
	RemoveCustomLabelPolicyLogo(ctx context.Context, in *RemoveCustomLabelPolicyLogoRequest, opts ...grpc.CallOption) (*RemoveCustomLabelPolicyLogoResponse, error)
	RemoveCustomLabelPolicyLogoDark(ctx context.Context, in *RemoveCustomLabelPolicyLogoDarkRequest, opts ...grpc.CallOption) (*RemoveCustomLabelPolicyLogoDarkResponse, error)
	RemoveCustomLabelPolicyIcon(ctx context.Context, in *RemoveCustomLabelPolicyIconRequest, opts ...grpc.CallOption) (*RemoveCustomLabelPolicyIconResponse, error)
	RemoveCustomLabelPolicyIconDark(ctx context.Context, in *RemoveCustomLabelPolicyIconDarkRequest, opts ...grpc.CallOption) (*RemoveCustomLabelPolicyIconDarkResponse, error)
	RemoveCustomLabelPolicyFont(ctx context.Context, in *RemoveCustomLabelPolicyFontRequest, opts ...grpc.CallOption) (*RemoveCustomLabelPolicyFontResponse, error)
	ResetLabelPolicyToDefault(ctx context.Context, in *ResetLabelPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetLabelPolicyToDefaultResponse, error)
	GetCustomInitMessageText(ctx context.Context, in *GetCustomInitMessageTextRequest, opts ...grpc.CallOption) (*GetCustomInitMessageTextResponse, error)
	GetDefaultInitMessageText(ctx context.Context, in *GetDefaultInitMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultInitMessageTextResponse, error)
	SetCustomInitMessageText(ctx context.Context, in *SetCustomInitMessageTextRequest, opts ...grpc.CallOption) (*SetCustomInitMessageTextResponse, error)
	ResetCustomInitMessageTextToDefault(ctx context.Context, in *ResetCustomInitMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomInitMessageTextToDefaultResponse, error)
	GetCustomPasswordResetMessageText(ctx context.Context, in *GetCustomPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordResetMessageTextResponse, error)
	GetDefaultPasswordResetMessageText(ctx context.Context, in *GetDefaultPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordResetMessageTextResponse, error)
	SetCustomPasswordResetMessageText(ctx context.Context, in *SetCustomPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*SetCustomPasswordResetMessageTextResponse, error)
	ResetCustomPasswordResetMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordResetMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error)
	GetCustomVerifyEmailMessageText(ctx context.Context, in *GetCustomVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyEmailMessageTextResponse, error)
	GetDefaultVerifyEmailMessageText(ctx context.Context, in *GetDefaultVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyEmailMessageTextResponse, error)
	SetCustomVerifyEmailMessageText(ctx context.Context, in *SetCustomVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*SetCustomVerifyEmailMessageTextResponse, error)
	ResetCustomVerifyEmailMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyEmailMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error)
	GetCustomVerifyPhoneMessageText(ctx context.Context, in *GetCustomVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyPhoneMessageTextResponse, error)
	GetDefaultVerifyPhoneMessageText(ctx context.Context, in *GetDefaultVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyPhoneMessageTextResponse, error)
	SetCustomVerifyPhoneMessageText(ctx context.Context, in *SetCustomVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*SetCustomVerifyPhoneMessageTextResponse, error)
	ResetCustomVerifyPhoneMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyPhoneMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error)
	GetCustomVerifySMSOTPMessageText(ctx context.Context, in *GetCustomVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifySMSOTPMessageTextResponse, error)
	GetDefaultVerifySMSOTPMessageText(ctx context.Context, in *GetDefaultVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifySMSOTPMessageTextResponse, error)
	SetCustomVerifySMSOTPMessageText(ctx context.Context, in *SetCustomVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*SetCustomVerifySMSOTPMessageTextResponse, error)
	ResetCustomVerifySMSOTPMessageTextToDefault(ctx context.Context, in *ResetCustomVerifySMSOTPMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifySMSOTPMessageTextToDefaultResponse, error)
	GetCustomVerifyEmailOTPMessageText(ctx context.Context, in *GetCustomVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyEmailOTPMessageTextResponse, error)
	GetDefaultVerifyEmailOTPMessageText(ctx context.Context, in *GetDefaultVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyEmailOTPMessageTextResponse, error)
	SetCustomVerifyEmailOTPMessageText(ctx context.Context, in *SetCustomVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*SetCustomVerifyEmailOTPMessageTextResponse, error)
	ResetCustomVerifyEmailOTPMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyEmailOTPMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyEmailOTPMessageTextToDefaultResponse, error)
	GetCustomDomainClaimedMessageText(ctx context.Context, in *GetCustomDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetCustomDomainClaimedMessageTextResponse, error)
	GetDefaultDomainClaimedMessageText(ctx context.Context, in *GetDefaultDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultDomainClaimedMessageTextResponse, error)
	SetCustomDomainClaimedMessageCustomText(ctx context.Context, in *SetCustomDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*SetCustomDomainClaimedMessageTextResponse, error)
	ResetCustomDomainClaimedMessageTextToDefault(ctx context.Context, in *ResetCustomDomainClaimedMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error)
	GetCustomPasswordlessRegistrationMessageText(ctx context.Context, in *GetCustomPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordlessRegistrationMessageTextResponse, error)
	GetDefaultPasswordlessRegistrationMessageText(ctx context.Context, in *GetDefaultPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error)
	SetCustomPasswordlessRegistrationMessageCustomText(ctx context.Context, in *SetCustomPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*SetCustomPasswordlessRegistrationMessageTextResponse, error)
	ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error)
	GetCustomPasswordChangeMessageText(ctx context.Context, in *GetCustomPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordChangeMessageTextResponse, error)
	GetDefaultPasswordChangeMessageText(ctx context.Context, in *GetDefaultPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordChangeMessageTextResponse, error)
	SetCustomPasswordChangeMessageCustomText(ctx context.Context, in *SetCustomPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*SetCustomPasswordChangeMessageTextResponse, error)
	ResetCustomPasswordChangeMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordChangeMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordChangeMessageTextToDefaultResponse, error)
	GetCustomLoginTexts(ctx context.Context, in *GetCustomLoginTextsRequest, opts ...grpc.CallOption) (*GetCustomLoginTextsResponse, error)
	GetDefaultLoginTexts(ctx context.Context, in *GetDefaultLoginTextsRequest, opts ...grpc.CallOption) (*GetDefaultLoginTextsResponse, error)
	SetCustomLoginText(ctx context.Context, in *SetCustomLoginTextsRequest, opts ...grpc.CallOption) (*SetCustomLoginTextsResponse, error)
	ResetCustomLoginTextToDefault(ctx context.Context, in *ResetCustomLoginTextsToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomLoginTextsToDefaultResponse, error)
	GetOrgIDPByID(ctx context.Context, in *GetOrgIDPByIDRequest, opts ...grpc.CallOption) (*GetOrgIDPByIDResponse, error)
	ListOrgIDPs(ctx context.Context, in *ListOrgIDPsRequest, opts ...grpc.CallOption) (*ListOrgIDPsResponse, error)
	AddOrgOIDCIDP(ctx context.Context, in *AddOrgOIDCIDPRequest, opts ...grpc.CallOption) (*AddOrgOIDCIDPResponse, error)
	AddOrgJWTIDP(ctx context.Context, in *AddOrgJWTIDPRequest, opts ...grpc.CallOption) (*AddOrgJWTIDPResponse, error)
	DeactivateOrgIDP(ctx context.Context, in *DeactivateOrgIDPRequest, opts ...grpc.CallOption) (*DeactivateOrgIDPResponse, error)
	ReactivateOrgIDP(ctx context.Context, in *ReactivateOrgIDPRequest, opts ...grpc.CallOption) (*ReactivateOrgIDPResponse, error)
	RemoveOrgIDP(ctx context.Context, in *RemoveOrgIDPRequest, opts ...grpc.CallOption) (*RemoveOrgIDPResponse, error)
	UpdateOrgIDP(ctx context.Context, in *UpdateOrgIDPRequest, opts ...grpc.CallOption) (*UpdateOrgIDPResponse, error)
	UpdateOrgIDPOIDCConfig(ctx context.Context, in *UpdateOrgIDPOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateOrgIDPOIDCConfigResponse, error)
	UpdateOrgIDPJWTConfig(ctx context.Context, in *UpdateOrgIDPJWTConfigRequest, opts ...grpc.CallOption) (*UpdateOrgIDPJWTConfigResponse, error)
	// Returns all identity providers, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	// Returns an identity provider of the organization
	GetProviderByID(ctx context.Context, in *GetProviderByIDRequest, opts ...grpc.CallOption) (*GetProviderByIDResponse, error)
	// Add a new OAuth2 identity provider in the organization
	AddGenericOAuthProvider(ctx context.Context, in *AddGenericOAuthProviderRequest, opts ...grpc.CallOption) (*AddGenericOAuthProviderResponse, error)
	// Change an existing OAuth2 identity provider in the organization
	UpdateGenericOAuthProvider(ctx context.Context, in *UpdateGenericOAuthProviderRequest, opts ...grpc.CallOption) (*UpdateGenericOAuthProviderResponse, error)
	// Add a new OIDC identity provider in the organization
	AddGenericOIDCProvider(ctx context.Context, in *AddGenericOIDCProviderRequest, opts ...grpc.CallOption) (*AddGenericOIDCProviderResponse, error)
	// Change an existing OIDC identity provider in the organization
	UpdateGenericOIDCProvider(ctx context.Context, in *UpdateGenericOIDCProviderRequest, opts ...grpc.CallOption) (*UpdateGenericOIDCProviderResponse, error)
	// Migrate an existing OIDC identity provider in the organization
	MigrateGenericOIDCProvider(ctx context.Context, in *MigrateGenericOIDCProviderRequest, opts ...grpc.CallOption) (*MigrateGenericOIDCProviderResponse, error)
	// Add a new JWT identity provider in the organization
	AddJWTProvider(ctx context.Context, in *AddJWTProviderRequest, opts ...grpc.CallOption) (*AddJWTProviderResponse, error)
	// Change an existing JWT identity provider in the organization
	UpdateJWTProvider(ctx context.Context, in *UpdateJWTProviderRequest, opts ...grpc.CallOption) (*UpdateJWTProviderResponse, error)
	// Add a new Azure AD identity provider in the organization
	AddAzureADProvider(ctx context.Context, in *AddAzureADProviderRequest, opts ...grpc.CallOption) (*AddAzureADProviderResponse, error)
	// Change an existing Azure AD identity provider in the organization
	UpdateAzureADProvider(ctx context.Context, in *UpdateAzureADProviderRequest, opts ...grpc.CallOption) (*UpdateAzureADProviderResponse, error)
	// Add a new GitHub identity provider in the organization
	AddGitHubProvider(ctx context.Context, in *AddGitHubProviderRequest, opts ...grpc.CallOption) (*AddGitHubProviderResponse, error)
	// Change an existing GitHub identity provider in the organization
	UpdateGitHubProvider(ctx context.Context, in *UpdateGitHubProviderRequest, opts ...grpc.CallOption) (*UpdateGitHubProviderResponse, error)
	// Add a new GitHub Enterprise Server identity provider in the organization
	AddGitHubEnterpriseServerProvider(ctx context.Context, in *AddGitHubEnterpriseServerProviderRequest, opts ...grpc.CallOption) (*AddGitHubEnterpriseServerProviderResponse, error)
	// Change an existing GitHub Enterprise Server identity provider in the organization
	UpdateGitHubEnterpriseServerProvider(ctx context.Context, in *UpdateGitHubEnterpriseServerProviderRequest, opts ...grpc.CallOption) (*UpdateGitHubEnterpriseServerProviderResponse, error)
	// Add a new GitLab identity provider in the organization
	AddGitLabProvider(ctx context.Context, in *AddGitLabProviderRequest, opts ...grpc.CallOption) (*AddGitLabProviderResponse, error)
	// Change an existing GitLab identity provider in the organization
	UpdateGitLabProvider(ctx context.Context, in *UpdateGitLabProviderRequest, opts ...grpc.CallOption) (*UpdateGitLabProviderResponse, error)
	// Add a new self hosted GitLab identity provider in the organization
	AddGitLabSelfHostedProvider(ctx context.Context, in *AddGitLabSelfHostedProviderRequest, opts ...grpc.CallOption) (*AddGitLabSelfHostedProviderResponse, error)
	// Change an existing self hosted GitLab identity provider in the organization
	UpdateGitLabSelfHostedProvider(ctx context.Context, in *UpdateGitLabSelfHostedProviderRequest, opts ...grpc.CallOption) (*UpdateGitLabSelfHostedProviderResponse, error)
	// Add a new Google identity provider in the organization
	AddGoogleProvider(ctx context.Context, in *AddGoogleProviderRequest, opts ...grpc.CallOption) (*AddGoogleProviderResponse, error)
	// Change an existing Google identity provider in the organization
	UpdateGoogleProvider(ctx context.Context, in *UpdateGoogleProviderRequest, opts ...grpc.CallOption) (*UpdateGoogleProviderResponse, error)
	// Add a new LDAP identity provider in the organization
	AddLDAPProvider(ctx context.Context, in *AddLDAPProviderRequest, opts ...grpc.CallOption) (*AddLDAPProviderResponse, error)
	// Change an existing LDAP identity provider in the organization
	UpdateLDAPProvider(ctx context.Context, in *UpdateLDAPProviderRequest, opts ...grpc.CallOption) (*UpdateLDAPProviderResponse, error)
	// Add a new Apple identity provider in the organization
	AddAppleProvider(ctx context.Context, in *AddAppleProviderRequest, opts ...grpc.CallOption) (*AddAppleProviderResponse, error)
	// Change an existing Apple identity provider in the organization
	UpdateAppleProvider(ctx context.Context, in *UpdateAppleProviderRequest, opts ...grpc.CallOption) (*UpdateAppleProviderResponse, error)
	// Add a new SAML identity provider in the organization
	AddSAMLProvider(ctx context.Context, in *AddSAMLProviderRequest, opts ...grpc.CallOption) (*AddSAMLProviderResponse, error)
	// Change an existing SAML identity provider in the organization
	UpdateSAMLProvider(ctx context.Context, in *UpdateSAMLProviderRequest, opts ...grpc.CallOption) (*UpdateSAMLProviderResponse, error)
	// Regenerate certificate for an existing SAML identity provider in the organization
	RegenerateSAMLProviderCertificate(ctx context.Context, in *RegenerateSAMLProviderCertificateRequest, opts ...grpc.CallOption) (*RegenerateSAMLProviderCertificateResponse, error)
	// Remove an identity provider
	// Will remove all linked providers of this configuration on the users
	DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error)
	ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error)
	GetAction(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*GetActionResponse, error)
	CreateAction(ctx context.Context, in *CreateActionRequest, opts ...grpc.CallOption) (*CreateActionResponse, error)
	UpdateAction(ctx context.Context, in *UpdateActionRequest, opts ...grpc.CallOption) (*UpdateActionResponse, error)
	DeactivateAction(ctx context.Context, in *DeactivateActionRequest, opts ...grpc.CallOption) (*DeactivateActionResponse, error)
	ReactivateAction(ctx context.Context, in *ReactivateActionRequest, opts ...grpc.CallOption) (*ReactivateActionResponse, error)
	DeleteAction(ctx context.Context, in *DeleteActionRequest, opts ...grpc.CallOption) (*DeleteActionResponse, error)
	ListFlowTypes(ctx context.Context, in *ListFlowTypesRequest, opts ...grpc.CallOption) (*ListFlowTypesResponse, error)
	ListFlowTriggerTypes(ctx context.Context, in *ListFlowTriggerTypesRequest, opts ...grpc.CallOption) (*ListFlowTriggerTypesResponse, error)
	GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowResponse, error)
	ClearFlow(ctx context.Context, in *ClearFlowRequest, opts ...grpc.CallOption) (*ClearFlowResponse, error)
	SetTriggerActions(ctx context.Context, in *SetTriggerActionsRequest, opts ...grpc.CallOption) (*SetTriggerActionsResponse, error)
}

type managementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementServiceClient(cc grpc.ClientConnInterface) ManagementServiceClient {
	return &managementServiceClient{cc}
}

func (c *managementServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetOIDCInformation(ctx context.Context, in *GetOIDCInformationRequest, opts ...grpc.CallOption) (*GetOIDCInformationResponse, error) {
	out := new(GetOIDCInformationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetOIDCInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetIAM(ctx context.Context, in *GetIAMRequest, opts ...grpc.CallOption) (*GetIAMResponse, error) {
	out := new(GetIAMResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetIAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetSupportedLanguages(ctx context.Context, in *GetSupportedLanguagesRequest, opts ...grpc.CallOption) (*GetSupportedLanguagesResponse, error) {
	out := new(GetSupportedLanguagesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetSupportedLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUserByLoginNameGlobal(ctx context.Context, in *GetUserByLoginNameGlobalRequest, opts ...grpc.CallOption) (*GetUserByLoginNameGlobalResponse, error) {
	out := new(GetUserByLoginNameGlobalResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetUserByLoginNameGlobal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListUserChanges(ctx context.Context, in *ListUserChangesRequest, opts ...grpc.CallOption) (*ListUserChangesResponse, error) {
	out := new(ListUserChangesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListUserChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) IsUserUnique(ctx context.Context, in *IsUserUniqueRequest, opts ...grpc.CallOption) (*IsUserUniqueResponse, error) {
	out := new(IsUserUniqueResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/IsUserUnique", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddHumanUser(ctx context.Context, in *AddHumanUserRequest, opts ...grpc.CallOption) (*AddHumanUserResponse, error) {
	out := new(AddHumanUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddHumanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ImportHumanUser(ctx context.Context, in *ImportHumanUserRequest, opts ...grpc.CallOption) (*ImportHumanUserResponse, error) {
	out := new(ImportHumanUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ImportHumanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddMachineUser(ctx context.Context, in *AddMachineUserRequest, opts ...grpc.CallOption) (*AddMachineUserResponse, error) {
	out := new(AddMachineUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddMachineUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error) {
	out := new(DeactivateUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateUser(ctx context.Context, in *ReactivateUserRequest, opts ...grpc.CallOption) (*ReactivateUserResponse, error) {
	out := new(ReactivateUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) LockUser(ctx context.Context, in *LockUserRequest, opts ...grpc.CallOption) (*LockUserResponse, error) {
	out := new(LockUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/LockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UnlockUser(ctx context.Context, in *UnlockUserRequest, opts ...grpc.CallOption) (*UnlockUserResponse, error) {
	out := new(UnlockUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UnlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error) {
	out := new(UpdateUserNameResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetUserMetadata(ctx context.Context, in *SetUserMetadataRequest, opts ...grpc.CallOption) (*SetUserMetadataResponse, error) {
	out := new(SetUserMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetUserMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) BulkSetUserMetadata(ctx context.Context, in *BulkSetUserMetadataRequest, opts ...grpc.CallOption) (*BulkSetUserMetadataResponse, error) {
	out := new(BulkSetUserMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/BulkSetUserMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListUserMetadata(ctx context.Context, in *ListUserMetadataRequest, opts ...grpc.CallOption) (*ListUserMetadataResponse, error) {
	out := new(ListUserMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListUserMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUserMetadata(ctx context.Context, in *GetUserMetadataRequest, opts ...grpc.CallOption) (*GetUserMetadataResponse, error) {
	out := new(GetUserMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetUserMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveUserMetadata(ctx context.Context, in *RemoveUserMetadataRequest, opts ...grpc.CallOption) (*RemoveUserMetadataResponse, error) {
	out := new(RemoveUserMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveUserMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) BulkRemoveUserMetadata(ctx context.Context, in *BulkRemoveUserMetadataRequest, opts ...grpc.CallOption) (*BulkRemoveUserMetadataResponse, error) {
	out := new(BulkRemoveUserMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/BulkRemoveUserMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetHumanProfile(ctx context.Context, in *GetHumanProfileRequest, opts ...grpc.CallOption) (*GetHumanProfileResponse, error) {
	out := new(GetHumanProfileResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetHumanProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateHumanProfile(ctx context.Context, in *UpdateHumanProfileRequest, opts ...grpc.CallOption) (*UpdateHumanProfileResponse, error) {
	out := new(UpdateHumanProfileResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateHumanProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetHumanEmail(ctx context.Context, in *GetHumanEmailRequest, opts ...grpc.CallOption) (*GetHumanEmailResponse, error) {
	out := new(GetHumanEmailResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetHumanEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateHumanEmail(ctx context.Context, in *UpdateHumanEmailRequest, opts ...grpc.CallOption) (*UpdateHumanEmailResponse, error) {
	out := new(UpdateHumanEmailResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateHumanEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResendHumanInitialization(ctx context.Context, in *ResendHumanInitializationRequest, opts ...grpc.CallOption) (*ResendHumanInitializationResponse, error) {
	out := new(ResendHumanInitializationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResendHumanInitialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResendHumanEmailVerification(ctx context.Context, in *ResendHumanEmailVerificationRequest, opts ...grpc.CallOption) (*ResendHumanEmailVerificationResponse, error) {
	out := new(ResendHumanEmailVerificationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResendHumanEmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetHumanPhone(ctx context.Context, in *GetHumanPhoneRequest, opts ...grpc.CallOption) (*GetHumanPhoneResponse, error) {
	out := new(GetHumanPhoneResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetHumanPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateHumanPhone(ctx context.Context, in *UpdateHumanPhoneRequest, opts ...grpc.CallOption) (*UpdateHumanPhoneResponse, error) {
	out := new(UpdateHumanPhoneResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateHumanPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanPhone(ctx context.Context, in *RemoveHumanPhoneRequest, opts ...grpc.CallOption) (*RemoveHumanPhoneResponse, error) {
	out := new(RemoveHumanPhoneResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResendHumanPhoneVerification(ctx context.Context, in *ResendHumanPhoneVerificationRequest, opts ...grpc.CallOption) (*ResendHumanPhoneVerificationResponse, error) {
	out := new(ResendHumanPhoneVerificationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResendHumanPhoneVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanAvatar(ctx context.Context, in *RemoveHumanAvatarRequest, opts ...grpc.CallOption) (*RemoveHumanAvatarResponse, error) {
	out := new(RemoveHumanAvatarResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetHumanInitialPassword(ctx context.Context, in *SetHumanInitialPasswordRequest, opts ...grpc.CallOption) (*SetHumanInitialPasswordResponse, error) {
	out := new(SetHumanInitialPasswordResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetHumanInitialPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetHumanPassword(ctx context.Context, in *SetHumanPasswordRequest, opts ...grpc.CallOption) (*SetHumanPasswordResponse, error) {
	out := new(SetHumanPasswordResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetHumanPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SendHumanResetPasswordNotification(ctx context.Context, in *SendHumanResetPasswordNotificationRequest, opts ...grpc.CallOption) (*SendHumanResetPasswordNotificationResponse, error) {
	out := new(SendHumanResetPasswordNotificationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SendHumanResetPasswordNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListHumanAuthFactors(ctx context.Context, in *ListHumanAuthFactorsRequest, opts ...grpc.CallOption) (*ListHumanAuthFactorsResponse, error) {
	out := new(ListHumanAuthFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListHumanAuthFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanAuthFactorOTP(ctx context.Context, in *RemoveHumanAuthFactorOTPRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorOTPResponse, error) {
	out := new(RemoveHumanAuthFactorOTPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanAuthFactorU2F(ctx context.Context, in *RemoveHumanAuthFactorU2FRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorU2FResponse, error) {
	out := new(RemoveHumanAuthFactorU2FResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorU2F", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanAuthFactorOTPSMS(ctx context.Context, in *RemoveHumanAuthFactorOTPSMSRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorOTPSMSResponse, error) {
	out := new(RemoveHumanAuthFactorOTPSMSResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTPSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanAuthFactorOTPEmail(ctx context.Context, in *RemoveHumanAuthFactorOTPEmailRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorOTPEmailResponse, error) {
	out := new(RemoveHumanAuthFactorOTPEmailResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTPEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListHumanPasswordless(ctx context.Context, in *ListHumanPasswordlessRequest, opts ...grpc.CallOption) (*ListHumanPasswordlessResponse, error) {
	out := new(ListHumanPasswordlessResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListHumanPasswordless", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddPasswordlessRegistration(ctx context.Context, in *AddPasswordlessRegistrationRequest, opts ...grpc.CallOption) (*AddPasswordlessRegistrationResponse, error) {
	out := new(AddPasswordlessRegistrationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddPasswordlessRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SendPasswordlessRegistration(ctx context.Context, in *SendPasswordlessRegistrationRequest, opts ...grpc.CallOption) (*SendPasswordlessRegistrationResponse, error) {
	out := new(SendPasswordlessRegistrationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SendPasswordlessRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanPasswordless(ctx context.Context, in *RemoveHumanPasswordlessRequest, opts ...grpc.CallOption) (*RemoveHumanPasswordlessResponse, error) {
	out := new(RemoveHumanPasswordlessResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanPasswordless", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*UpdateMachineResponse, error) {
	out := new(UpdateMachineResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GenerateMachineSecret(ctx context.Context, in *GenerateMachineSecretRequest, opts ...grpc.CallOption) (*GenerateMachineSecretResponse, error) {
	out := new(GenerateMachineSecretResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GenerateMachineSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveMachineSecret(ctx context.Context, in *RemoveMachineSecretRequest, opts ...grpc.CallOption) (*RemoveMachineSecretResponse, error) {
	out := new(RemoveMachineSecretResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveMachineSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetMachineKeyByIDs(ctx context.Context, in *GetMachineKeyByIDsRequest, opts ...grpc.CallOption) (*GetMachineKeyByIDsResponse, error) {
	out := new(GetMachineKeyByIDsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetMachineKeyByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListMachineKeys(ctx context.Context, in *ListMachineKeysRequest, opts ...grpc.CallOption) (*ListMachineKeysResponse, error) {
	out := new(ListMachineKeysResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListMachineKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddMachineKey(ctx context.Context, in *AddMachineKeyRequest, opts ...grpc.CallOption) (*AddMachineKeyResponse, error) {
	out := new(AddMachineKeyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddMachineKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveMachineKey(ctx context.Context, in *RemoveMachineKeyRequest, opts ...grpc.CallOption) (*RemoveMachineKeyResponse, error) {
	out := new(RemoveMachineKeyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveMachineKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetPersonalAccessTokenByIDs(ctx context.Context, in *GetPersonalAccessTokenByIDsRequest, opts ...grpc.CallOption) (*GetPersonalAccessTokenByIDsResponse, error) {
	out := new(GetPersonalAccessTokenByIDsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetPersonalAccessTokenByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListPersonalAccessTokens(ctx context.Context, in *ListPersonalAccessTokensRequest, opts ...grpc.CallOption) (*ListPersonalAccessTokensResponse, error) {
	out := new(ListPersonalAccessTokensResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListPersonalAccessTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddPersonalAccessToken(ctx context.Context, in *AddPersonalAccessTokenRequest, opts ...grpc.CallOption) (*AddPersonalAccessTokenResponse, error) {
	out := new(AddPersonalAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddPersonalAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemovePersonalAccessToken(ctx context.Context, in *RemovePersonalAccessTokenRequest, opts ...grpc.CallOption) (*RemovePersonalAccessTokenResponse, error) {
	out := new(RemovePersonalAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemovePersonalAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListHumanLinkedIDPs(ctx context.Context, in *ListHumanLinkedIDPsRequest, opts ...grpc.CallOption) (*ListHumanLinkedIDPsResponse, error) {
	out := new(ListHumanLinkedIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListHumanLinkedIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanLinkedIDP(ctx context.Context, in *RemoveHumanLinkedIDPRequest, opts ...grpc.CallOption) (*RemoveHumanLinkedIDPResponse, error) {
	out := new(RemoveHumanLinkedIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanLinkedIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListUserMemberships(ctx context.Context, in *ListUserMembershipsRequest, opts ...grpc.CallOption) (*ListUserMembershipsResponse, error) {
	out := new(ListUserMembershipsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListUserMemberships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetMyOrg(ctx context.Context, in *GetMyOrgRequest, opts ...grpc.CallOption) (*GetMyOrgResponse, error) {
	out := new(GetMyOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetMyOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetOrgByDomainGlobal(ctx context.Context, in *GetOrgByDomainGlobalRequest, opts ...grpc.CallOption) (*GetOrgByDomainGlobalResponse, error) {
	out := new(GetOrgByDomainGlobalResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetOrgByDomainGlobal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgChanges(ctx context.Context, in *ListOrgChangesRequest, opts ...grpc.CallOption) (*ListOrgChangesResponse, error) {
	out := new(ListOrgChangesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOrg(ctx context.Context, in *AddOrgRequest, opts ...grpc.CallOption) (*AddOrgResponse, error) {
	out := new(AddOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...grpc.CallOption) (*UpdateOrgResponse, error) {
	out := new(UpdateOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateOrg(ctx context.Context, in *DeactivateOrgRequest, opts ...grpc.CallOption) (*DeactivateOrgResponse, error) {
	out := new(DeactivateOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateOrg(ctx context.Context, in *ReactivateOrgRequest, opts ...grpc.CallOption) (*ReactivateOrgResponse, error) {
	out := new(ReactivateOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveOrg(ctx context.Context, in *RemoveOrgRequest, opts ...grpc.CallOption) (*RemoveOrgResponse, error) {
	out := new(RemoveOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetOrgMetadata(ctx context.Context, in *SetOrgMetadataRequest, opts ...grpc.CallOption) (*SetOrgMetadataResponse, error) {
	out := new(SetOrgMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetOrgMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) BulkSetOrgMetadata(ctx context.Context, in *BulkSetOrgMetadataRequest, opts ...grpc.CallOption) (*BulkSetOrgMetadataResponse, error) {
	out := new(BulkSetOrgMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/BulkSetOrgMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgMetadata(ctx context.Context, in *ListOrgMetadataRequest, opts ...grpc.CallOption) (*ListOrgMetadataResponse, error) {
	out := new(ListOrgMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetOrgMetadata(ctx context.Context, in *GetOrgMetadataRequest, opts ...grpc.CallOption) (*GetOrgMetadataResponse, error) {
	out := new(GetOrgMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetOrgMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveOrgMetadata(ctx context.Context, in *RemoveOrgMetadataRequest, opts ...grpc.CallOption) (*RemoveOrgMetadataResponse, error) {
	out := new(RemoveOrgMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveOrgMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) BulkRemoveOrgMetadata(ctx context.Context, in *BulkRemoveOrgMetadataRequest, opts ...grpc.CallOption) (*BulkRemoveOrgMetadataResponse, error) {
	out := new(BulkRemoveOrgMetadataResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/BulkRemoveOrgMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgDomains(ctx context.Context, in *ListOrgDomainsRequest, opts ...grpc.CallOption) (*ListOrgDomainsResponse, error) {
	out := new(ListOrgDomainsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOrgDomain(ctx context.Context, in *AddOrgDomainRequest, opts ...grpc.CallOption) (*AddOrgDomainResponse, error) {
	out := new(AddOrgDomainResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOrgDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveOrgDomain(ctx context.Context, in *RemoveOrgDomainRequest, opts ...grpc.CallOption) (*RemoveOrgDomainResponse, error) {
	out := new(RemoveOrgDomainResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveOrgDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GenerateOrgDomainValidation(ctx context.Context, in *GenerateOrgDomainValidationRequest, opts ...grpc.CallOption) (*GenerateOrgDomainValidationResponse, error) {
	out := new(GenerateOrgDomainValidationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GenerateOrgDomainValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ValidateOrgDomain(ctx context.Context, in *ValidateOrgDomainRequest, opts ...grpc.CallOption) (*ValidateOrgDomainResponse, error) {
	out := new(ValidateOrgDomainResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ValidateOrgDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetPrimaryOrgDomain(ctx context.Context, in *SetPrimaryOrgDomainRequest, opts ...grpc.CallOption) (*SetPrimaryOrgDomainResponse, error) {
	out := new(SetPrimaryOrgDomainResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetPrimaryOrgDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgMemberRoles(ctx context.Context, in *ListOrgMemberRolesRequest, opts ...grpc.CallOption) (*ListOrgMemberRolesResponse, error) {
	out := new(ListOrgMemberRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgMemberRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgMembers(ctx context.Context, in *ListOrgMembersRequest, opts ...grpc.CallOption) (*ListOrgMembersResponse, error) {
	out := new(ListOrgMembersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOrgMember(ctx context.Context, in *AddOrgMemberRequest, opts ...grpc.CallOption) (*AddOrgMemberResponse, error) {
	out := new(AddOrgMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOrgMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOrgMember(ctx context.Context, in *UpdateOrgMemberRequest, opts ...grpc.CallOption) (*UpdateOrgMemberResponse, error) {
	out := new(UpdateOrgMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateOrgMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveOrgMember(ctx context.Context, in *RemoveOrgMemberRequest, opts ...grpc.CallOption) (*RemoveOrgMemberResponse, error) {
	out := new(RemoveOrgMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveOrgMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetProjectByID(ctx context.Context, in *GetProjectByIDRequest, opts ...grpc.CallOption) (*GetProjectByIDResponse, error) {
	out := new(GetProjectByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetProjectByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetGrantedProjectByID(ctx context.Context, in *GetGrantedProjectByIDRequest, opts ...grpc.CallOption) (*GetGrantedProjectByIDResponse, error) {
	out := new(GetGrantedProjectByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetGrantedProjectByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListGrantedProjects(ctx context.Context, in *ListGrantedProjectsRequest, opts ...grpc.CallOption) (*ListGrantedProjectsResponse, error) {
	out := new(ListGrantedProjectsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListGrantedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListGrantedProjectRoles(ctx context.Context, in *ListGrantedProjectRolesRequest, opts ...grpc.CallOption) (*ListGrantedProjectRolesResponse, error) {
	out := new(ListGrantedProjectRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListGrantedProjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectChanges(ctx context.Context, in *ListProjectChangesRequest, opts ...grpc.CallOption) (*ListProjectChangesResponse, error) {
	out := new(ListProjectChangesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddProject(ctx context.Context, in *AddProjectRequest, opts ...grpc.CallOption) (*AddProjectResponse, error) {
	out := new(AddProjectResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateProject(ctx context.Context, in *DeactivateProjectRequest, opts ...grpc.CallOption) (*DeactivateProjectResponse, error) {
	out := new(DeactivateProjectResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateProject(ctx context.Context, in *ReactivateProjectRequest, opts ...grpc.CallOption) (*ReactivateProjectResponse, error) {
	out := new(ReactivateProjectResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveProject(ctx context.Context, in *RemoveProjectRequest, opts ...grpc.CallOption) (*RemoveProjectResponse, error) {
	out := new(RemoveProjectResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectRoles(ctx context.Context, in *ListProjectRolesRequest, opts ...grpc.CallOption) (*ListProjectRolesResponse, error) {
	out := new(ListProjectRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddProjectRole(ctx context.Context, in *AddProjectRoleRequest, opts ...grpc.CallOption) (*AddProjectRoleResponse, error) {
	out := new(AddProjectRoleResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddProjectRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) BulkAddProjectRoles(ctx context.Context, in *BulkAddProjectRolesRequest, opts ...grpc.CallOption) (*BulkAddProjectRolesResponse, error) {
	out := new(BulkAddProjectRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/BulkAddProjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateProjectRole(ctx context.Context, in *UpdateProjectRoleRequest, opts ...grpc.CallOption) (*UpdateProjectRoleResponse, error) {
	out := new(UpdateProjectRoleResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateProjectRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveProjectRole(ctx context.Context, in *RemoveProjectRoleRequest, opts ...grpc.CallOption) (*RemoveProjectRoleResponse, error) {
	out := new(RemoveProjectRoleResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveProjectRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectMemberRoles(ctx context.Context, in *ListProjectMemberRolesRequest, opts ...grpc.CallOption) (*ListProjectMemberRolesResponse, error) {
	out := new(ListProjectMemberRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectMemberRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectMembers(ctx context.Context, in *ListProjectMembersRequest, opts ...grpc.CallOption) (*ListProjectMembersResponse, error) {
	out := new(ListProjectMembersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddProjectMember(ctx context.Context, in *AddProjectMemberRequest, opts ...grpc.CallOption) (*AddProjectMemberResponse, error) {
	out := new(AddProjectMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateProjectMember(ctx context.Context, in *UpdateProjectMemberRequest, opts ...grpc.CallOption) (*UpdateProjectMemberResponse, error) {
	out := new(UpdateProjectMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveProjectMember(ctx context.Context, in *RemoveProjectMemberRequest, opts ...grpc.CallOption) (*RemoveProjectMemberResponse, error) {
	out := new(RemoveProjectMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetAppByID(ctx context.Context, in *GetAppByIDRequest, opts ...grpc.CallOption) (*GetAppByIDResponse, error) {
	out := new(GetAppByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetAppByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListAppChanges(ctx context.Context, in *ListAppChangesRequest, opts ...grpc.CallOption) (*ListAppChangesResponse, error) {
	out := new(ListAppChangesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListAppChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOIDCApp(ctx context.Context, in *AddOIDCAppRequest, opts ...grpc.CallOption) (*AddOIDCAppResponse, error) {
	out := new(AddOIDCAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOIDCApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddSAMLApp(ctx context.Context, in *AddSAMLAppRequest, opts ...grpc.CallOption) (*AddSAMLAppResponse, error) {
	out := new(AddSAMLAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddSAMLApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddAPIApp(ctx context.Context, in *AddAPIAppRequest, opts ...grpc.CallOption) (*AddAPIAppResponse, error) {
	out := new(AddAPIAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddAPIApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOIDCAppConfig(ctx context.Context, in *UpdateOIDCAppConfigRequest, opts ...grpc.CallOption) (*UpdateOIDCAppConfigResponse, error) {
	out := new(UpdateOIDCAppConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateOIDCAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateSAMLAppConfig(ctx context.Context, in *UpdateSAMLAppConfigRequest, opts ...grpc.CallOption) (*UpdateSAMLAppConfigResponse, error) {
	out := new(UpdateSAMLAppConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateSAMLAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateAPIAppConfig(ctx context.Context, in *UpdateAPIAppConfigRequest, opts ...grpc.CallOption) (*UpdateAPIAppConfigResponse, error) {
	out := new(UpdateAPIAppConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateAPIAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateApp(ctx context.Context, in *DeactivateAppRequest, opts ...grpc.CallOption) (*DeactivateAppResponse, error) {
	out := new(DeactivateAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateApp(ctx context.Context, in *ReactivateAppRequest, opts ...grpc.CallOption) (*ReactivateAppResponse, error) {
	out := new(ReactivateAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveApp(ctx context.Context, in *RemoveAppRequest, opts ...grpc.CallOption) (*RemoveAppResponse, error) {
	out := new(RemoveAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RegenerateOIDCClientSecret(ctx context.Context, in *RegenerateOIDCClientSecretRequest, opts ...grpc.CallOption) (*RegenerateOIDCClientSecretResponse, error) {
	out := new(RegenerateOIDCClientSecretResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RegenerateOIDCClientSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RegenerateAPIClientSecret(ctx context.Context, in *RegenerateAPIClientSecretRequest, opts ...grpc.CallOption) (*RegenerateAPIClientSecretResponse, error) {
	out := new(RegenerateAPIClientSecretResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RegenerateAPIClientSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetAppKey(ctx context.Context, in *GetAppKeyRequest, opts ...grpc.CallOption) (*GetAppKeyResponse, error) {
	out := new(GetAppKeyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetAppKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListAppKeys(ctx context.Context, in *ListAppKeysRequest, opts ...grpc.CallOption) (*ListAppKeysResponse, error) {
	out := new(ListAppKeysResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListAppKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddAppKey(ctx context.Context, in *AddAppKeyRequest, opts ...grpc.CallOption) (*AddAppKeyResponse, error) {
	out := new(AddAppKeyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddAppKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveAppKey(ctx context.Context, in *RemoveAppKeyRequest, opts ...grpc.CallOption) (*RemoveAppKeyResponse, error) {
	out := new(RemoveAppKeyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveAppKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectGrantChanges(ctx context.Context, in *ListProjectGrantChangesRequest, opts ...grpc.CallOption) (*ListProjectGrantChangesResponse, error) {
	out := new(ListProjectGrantChangesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectGrantChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetProjectGrantByID(ctx context.Context, in *GetProjectGrantByIDRequest, opts ...grpc.CallOption) (*GetProjectGrantByIDResponse, error) {
	out := new(GetProjectGrantByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetProjectGrantByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectGrants(ctx context.Context, in *ListProjectGrantsRequest, opts ...grpc.CallOption) (*ListProjectGrantsResponse, error) {
	out := new(ListProjectGrantsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectGrants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListAllProjectGrants(ctx context.Context, in *ListAllProjectGrantsRequest, opts ...grpc.CallOption) (*ListAllProjectGrantsResponse, error) {
	out := new(ListAllProjectGrantsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListAllProjectGrants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddProjectGrant(ctx context.Context, in *AddProjectGrantRequest, opts ...grpc.CallOption) (*AddProjectGrantResponse, error) {
	out := new(AddProjectGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddProjectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateProjectGrant(ctx context.Context, in *UpdateProjectGrantRequest, opts ...grpc.CallOption) (*UpdateProjectGrantResponse, error) {
	out := new(UpdateProjectGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateProjectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateProjectGrant(ctx context.Context, in *DeactivateProjectGrantRequest, opts ...grpc.CallOption) (*DeactivateProjectGrantResponse, error) {
	out := new(DeactivateProjectGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateProjectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateProjectGrant(ctx context.Context, in *ReactivateProjectGrantRequest, opts ...grpc.CallOption) (*ReactivateProjectGrantResponse, error) {
	out := new(ReactivateProjectGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateProjectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveProjectGrant(ctx context.Context, in *RemoveProjectGrantRequest, opts ...grpc.CallOption) (*RemoveProjectGrantResponse, error) {
	out := new(RemoveProjectGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveProjectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectGrantMemberRoles(ctx context.Context, in *ListProjectGrantMemberRolesRequest, opts ...grpc.CallOption) (*ListProjectGrantMemberRolesResponse, error) {
	out := new(ListProjectGrantMemberRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectGrantMemberRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectGrantMembers(ctx context.Context, in *ListProjectGrantMembersRequest, opts ...grpc.CallOption) (*ListProjectGrantMembersResponse, error) {
	out := new(ListProjectGrantMembersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectGrantMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddProjectGrantMember(ctx context.Context, in *AddProjectGrantMemberRequest, opts ...grpc.CallOption) (*AddProjectGrantMemberResponse, error) {
	out := new(AddProjectGrantMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddProjectGrantMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateProjectGrantMember(ctx context.Context, in *UpdateProjectGrantMemberRequest, opts ...grpc.CallOption) (*UpdateProjectGrantMemberResponse, error) {
	out := new(UpdateProjectGrantMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateProjectGrantMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveProjectGrantMember(ctx context.Context, in *RemoveProjectGrantMemberRequest, opts ...grpc.CallOption) (*RemoveProjectGrantMemberResponse, error) {
	out := new(RemoveProjectGrantMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveProjectGrantMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUserGrantByID(ctx context.Context, in *GetUserGrantByIDRequest, opts ...grpc.CallOption) (*GetUserGrantByIDResponse, error) {
	out := new(GetUserGrantByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetUserGrantByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListUserGrants(ctx context.Context, in *ListUserGrantRequest, opts ...grpc.CallOption) (*ListUserGrantResponse, error) {
	out := new(ListUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListUserGrants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddUserGrant(ctx context.Context, in *AddUserGrantRequest, opts ...grpc.CallOption) (*AddUserGrantResponse, error) {
	out := new(AddUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateUserGrant(ctx context.Context, in *UpdateUserGrantRequest, opts ...grpc.CallOption) (*UpdateUserGrantResponse, error) {
	out := new(UpdateUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateUserGrant(ctx context.Context, in *DeactivateUserGrantRequest, opts ...grpc.CallOption) (*DeactivateUserGrantResponse, error) {
	out := new(DeactivateUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateUserGrant(ctx context.Context, in *ReactivateUserGrantRequest, opts ...grpc.CallOption) (*ReactivateUserGrantResponse, error) {
	out := new(ReactivateUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveUserGrant(ctx context.Context, in *RemoveUserGrantRequest, opts ...grpc.CallOption) (*RemoveUserGrantResponse, error) {
	out := new(RemoveUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) BulkRemoveUserGrant(ctx context.Context, in *BulkRemoveUserGrantRequest, opts ...grpc.CallOption) (*BulkRemoveUserGrantResponse, error) {
	out := new(BulkRemoveUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/BulkRemoveUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetOrgIAMPolicy(ctx context.Context, in *GetOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetOrgIAMPolicyResponse, error) {
	out := new(GetOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDomainPolicy(ctx context.Context, in *GetDomainPolicyRequest, opts ...grpc.CallOption) (*GetDomainPolicyResponse, error) {
	out := new(GetDomainPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDomainPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetLoginPolicy(ctx context.Context, in *GetLoginPolicyRequest, opts ...grpc.CallOption) (*GetLoginPolicyResponse, error) {
	out := new(GetLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultLoginPolicy(ctx context.Context, in *GetDefaultLoginPolicyRequest, opts ...grpc.CallOption) (*GetDefaultLoginPolicyResponse, error) {
	out := new(GetDefaultLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomLoginPolicy(ctx context.Context, in *AddCustomLoginPolicyRequest, opts ...grpc.CallOption) (*AddCustomLoginPolicyResponse, error) {
	out := new(AddCustomLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomLoginPolicy(ctx context.Context, in *UpdateCustomLoginPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomLoginPolicyResponse, error) {
	out := new(UpdateCustomLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetLoginPolicyToDefault(ctx context.Context, in *ResetLoginPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetLoginPolicyToDefaultResponse, error) {
	out := new(ResetLoginPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetLoginPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListLoginPolicyIDPs(ctx context.Context, in *ListLoginPolicyIDPsRequest, opts ...grpc.CallOption) (*ListLoginPolicyIDPsResponse, error) {
	out := new(ListLoginPolicyIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListLoginPolicyIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddIDPToLoginPolicy(ctx context.Context, in *AddIDPToLoginPolicyRequest, opts ...grpc.CallOption) (*AddIDPToLoginPolicyResponse, error) {
	out := new(AddIDPToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddIDPToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveIDPFromLoginPolicy(ctx context.Context, in *RemoveIDPFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveIDPFromLoginPolicyResponse, error) {
	out := new(RemoveIDPFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveIDPFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListLoginPolicySecondFactors(ctx context.Context, in *ListLoginPolicySecondFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicySecondFactorsResponse, error) {
	out := new(ListLoginPolicySecondFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListLoginPolicySecondFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddSecondFactorToLoginPolicy(ctx context.Context, in *AddSecondFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddSecondFactorToLoginPolicyResponse, error) {
	out := new(AddSecondFactorToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddSecondFactorToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveSecondFactorFromLoginPolicy(ctx context.Context, in *RemoveSecondFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveSecondFactorFromLoginPolicyResponse, error) {
	out := new(RemoveSecondFactorFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveSecondFactorFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListLoginPolicyMultiFactors(ctx context.Context, in *ListLoginPolicyMultiFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicyMultiFactorsResponse, error) {
	out := new(ListLoginPolicyMultiFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListLoginPolicyMultiFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddMultiFactorToLoginPolicy(ctx context.Context, in *AddMultiFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddMultiFactorToLoginPolicyResponse, error) {
	out := new(AddMultiFactorToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddMultiFactorToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveMultiFactorFromLoginPolicy(ctx context.Context, in *RemoveMultiFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveMultiFactorFromLoginPolicyResponse, error) {
	out := new(RemoveMultiFactorFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveMultiFactorFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetPasswordComplexityPolicy(ctx context.Context, in *GetPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetPasswordComplexityPolicyResponse, error) {
	out := new(GetPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultPasswordComplexityPolicy(ctx context.Context, in *GetDefaultPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetDefaultPasswordComplexityPolicyResponse, error) {
	out := new(GetDefaultPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomPasswordComplexityPolicy(ctx context.Context, in *AddCustomPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*AddCustomPasswordComplexityPolicyResponse, error) {
	out := new(AddCustomPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomPasswordComplexityPolicy(ctx context.Context, in *UpdateCustomPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPasswordComplexityPolicyResponse, error) {
	out := new(UpdateCustomPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetPasswordComplexityPolicyToDefault(ctx context.Context, in *ResetPasswordComplexityPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPasswordComplexityPolicyToDefaultResponse, error) {
	out := new(ResetPasswordComplexityPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetPasswordComplexityPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetPasswordAgePolicy(ctx context.Context, in *GetPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetPasswordAgePolicyResponse, error) {
	out := new(GetPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetPasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultPasswordAgePolicy(ctx context.Context, in *GetDefaultPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetDefaultPasswordAgePolicyResponse, error) {
	out := new(GetDefaultPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultPasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomPasswordAgePolicy(ctx context.Context, in *AddCustomPasswordAgePolicyRequest, opts ...grpc.CallOption) (*AddCustomPasswordAgePolicyResponse, error) {
	out := new(AddCustomPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomPasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomPasswordAgePolicy(ctx context.Context, in *UpdateCustomPasswordAgePolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPasswordAgePolicyResponse, error) {
	out := new(UpdateCustomPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomPasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetPasswordAgePolicyToDefault(ctx context.Context, in *ResetPasswordAgePolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPasswordAgePolicyToDefaultResponse, error) {
	out := new(ResetPasswordAgePolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetPasswordAgePolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetLockoutPolicy(ctx context.Context, in *GetLockoutPolicyRequest, opts ...grpc.CallOption) (*GetLockoutPolicyResponse, error) {
	out := new(GetLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultLockoutPolicy(ctx context.Context, in *GetDefaultLockoutPolicyRequest, opts ...grpc.CallOption) (*GetDefaultLockoutPolicyResponse, error) {
	out := new(GetDefaultLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomLockoutPolicy(ctx context.Context, in *AddCustomLockoutPolicyRequest, opts ...grpc.CallOption) (*AddCustomLockoutPolicyResponse, error) {
	out := new(AddCustomLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomLockoutPolicy(ctx context.Context, in *UpdateCustomLockoutPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomLockoutPolicyResponse, error) {
	out := new(UpdateCustomLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetLockoutPolicyToDefault(ctx context.Context, in *ResetLockoutPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetLockoutPolicyToDefaultResponse, error) {
	out := new(ResetLockoutPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetLockoutPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetPrivacyPolicy(ctx context.Context, in *GetPrivacyPolicyRequest, opts ...grpc.CallOption) (*GetPrivacyPolicyResponse, error) {
	out := new(GetPrivacyPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetPrivacyPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultPrivacyPolicy(ctx context.Context, in *GetDefaultPrivacyPolicyRequest, opts ...grpc.CallOption) (*GetDefaultPrivacyPolicyResponse, error) {
	out := new(GetDefaultPrivacyPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultPrivacyPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomPrivacyPolicy(ctx context.Context, in *AddCustomPrivacyPolicyRequest, opts ...grpc.CallOption) (*AddCustomPrivacyPolicyResponse, error) {
	out := new(AddCustomPrivacyPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomPrivacyPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomPrivacyPolicy(ctx context.Context, in *UpdateCustomPrivacyPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPrivacyPolicyResponse, error) {
	out := new(UpdateCustomPrivacyPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomPrivacyPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetPrivacyPolicyToDefault(ctx context.Context, in *ResetPrivacyPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPrivacyPolicyToDefaultResponse, error) {
	out := new(ResetPrivacyPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetPrivacyPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetNotificationPolicy(ctx context.Context, in *GetNotificationPolicyRequest, opts ...grpc.CallOption) (*GetNotificationPolicyResponse, error) {
	out := new(GetNotificationPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetNotificationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultNotificationPolicy(ctx context.Context, in *GetDefaultNotificationPolicyRequest, opts ...grpc.CallOption) (*GetDefaultNotificationPolicyResponse, error) {
	out := new(GetDefaultNotificationPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultNotificationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomNotificationPolicy(ctx context.Context, in *AddCustomNotificationPolicyRequest, opts ...grpc.CallOption) (*AddCustomNotificationPolicyResponse, error) {
	out := new(AddCustomNotificationPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomNotificationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomNotificationPolicy(ctx context.Context, in *UpdateCustomNotificationPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomNotificationPolicyResponse, error) {
	out := new(UpdateCustomNotificationPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomNotificationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetNotificationPolicyToDefault(ctx context.Context, in *ResetNotificationPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetNotificationPolicyToDefaultResponse, error) {
	out := new(ResetNotificationPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetNotificationPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetLabelPolicy(ctx context.Context, in *GetLabelPolicyRequest, opts ...grpc.CallOption) (*GetLabelPolicyResponse, error) {
	out := new(GetLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetPreviewLabelPolicy(ctx context.Context, in *GetPreviewLabelPolicyRequest, opts ...grpc.CallOption) (*GetPreviewLabelPolicyResponse, error) {
	out := new(GetPreviewLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetPreviewLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultLabelPolicy(ctx context.Context, in *GetDefaultLabelPolicyRequest, opts ...grpc.CallOption) (*GetDefaultLabelPolicyResponse, error) {
	out := new(GetDefaultLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomLabelPolicy(ctx context.Context, in *AddCustomLabelPolicyRequest, opts ...grpc.CallOption) (*AddCustomLabelPolicyResponse, error) {
	out := new(AddCustomLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomLabelPolicy(ctx context.Context, in *UpdateCustomLabelPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomLabelPolicyResponse, error) {
	out := new(UpdateCustomLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ActivateCustomLabelPolicy(ctx context.Context, in *ActivateCustomLabelPolicyRequest, opts ...grpc.CallOption) (*ActivateCustomLabelPolicyResponse, error) {
	out := new(ActivateCustomLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ActivateCustomLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveCustomLabelPolicyLogo(ctx context.Context, in *RemoveCustomLabelPolicyLogoRequest, opts ...grpc.CallOption) (*RemoveCustomLabelPolicyLogoResponse, error) {
	out := new(RemoveCustomLabelPolicyLogoResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveCustomLabelPolicyLogoDark(ctx context.Context, in *RemoveCustomLabelPolicyLogoDarkRequest, opts ...grpc.CallOption) (*RemoveCustomLabelPolicyLogoDarkResponse, error) {
	out := new(RemoveCustomLabelPolicyLogoDarkResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyLogoDark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveCustomLabelPolicyIcon(ctx context.Context, in *RemoveCustomLabelPolicyIconRequest, opts ...grpc.CallOption) (*RemoveCustomLabelPolicyIconResponse, error) {
	out := new(RemoveCustomLabelPolicyIconResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveCustomLabelPolicyIconDark(ctx context.Context, in *RemoveCustomLabelPolicyIconDarkRequest, opts ...grpc.CallOption) (*RemoveCustomLabelPolicyIconDarkResponse, error) {
	out := new(RemoveCustomLabelPolicyIconDarkResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyIconDark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveCustomLabelPolicyFont(ctx context.Context, in *RemoveCustomLabelPolicyFontRequest, opts ...grpc.CallOption) (*RemoveCustomLabelPolicyFontResponse, error) {
	out := new(RemoveCustomLabelPolicyFontResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyFont", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetLabelPolicyToDefault(ctx context.Context, in *ResetLabelPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetLabelPolicyToDefaultResponse, error) {
	out := new(ResetLabelPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetLabelPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCustomInitMessageText(ctx context.Context, in *GetCustomInitMessageTextRequest, opts ...grpc.CallOption) (*GetCustomInitMessageTextResponse, error) {
	out := new(GetCustomInitMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetCustomInitMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultInitMessageText(ctx context.Context, in *GetDefaultInitMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultInitMessageTextResponse, error) {
	out := new(GetDefaultInitMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultInitMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetCustomInitMessageText(ctx context.Context, in *SetCustomInitMessageTextRequest, opts ...grpc.CallOption) (*SetCustomInitMessageTextResponse, error) {
	out := new(SetCustomInitMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetCustomInitMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetCustomInitMessageTextToDefault(ctx context.Context, in *ResetCustomInitMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomInitMessageTextToDefaultResponse, error) {
	out := new(ResetCustomInitMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetCustomInitMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCustomPasswordResetMessageText(ctx context.Context, in *GetCustomPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordResetMessageTextResponse, error) {
	out := new(GetCustomPasswordResetMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetCustomPasswordResetMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultPasswordResetMessageText(ctx context.Context, in *GetDefaultPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordResetMessageTextResponse, error) {
	out := new(GetDefaultPasswordResetMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultPasswordResetMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetCustomPasswordResetMessageText(ctx context.Context, in *SetCustomPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*SetCustomPasswordResetMessageTextResponse, error) {
	out := new(SetCustomPasswordResetMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetCustomPasswordResetMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetCustomPasswordResetMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordResetMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error) {
	out := new(ResetCustomPasswordResetMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetCustomPasswordResetMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCustomVerifyEmailMessageText(ctx context.Context, in *GetCustomVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyEmailMessageTextResponse, error) {
	out := new(GetCustomVerifyEmailMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetCustomVerifyEmailMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultVerifyEmailMessageText(ctx context.Context, in *GetDefaultVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyEmailMessageTextResponse, error) {
	out := new(GetDefaultVerifyEmailMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultVerifyEmailMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetCustomVerifyEmailMessageText(ctx context.Context, in *SetCustomVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*SetCustomVerifyEmailMessageTextResponse, error) {
	out := new(SetCustomVerifyEmailMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetCustomVerifyEmailMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetCustomVerifyEmailMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyEmailMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error) {
	out := new(ResetCustomVerifyEmailMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetCustomVerifyEmailMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCustomVerifyPhoneMessageText(ctx context.Context, in *GetCustomVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyPhoneMessageTextResponse, error) {
	out := new(GetCustomVerifyPhoneMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetCustomVerifyPhoneMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultVerifyPhoneMessageText(ctx context.Context, in *GetDefaultVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyPhoneMessageTextResponse, error) {
	out := new(GetDefaultVerifyPhoneMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultVerifyPhoneMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetCustomVerifyPhoneMessageText(ctx context.Context, in *SetCustomVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*SetCustomVerifyPhoneMessageTextResponse, error) {
	out := new(SetCustomVerifyPhoneMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetCustomVerifyPhoneMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetCustomVerifyPhoneMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyPhoneMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error) {
	out := new(ResetCustomVerifyPhoneMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetCustomVerifyPhoneMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCustomVerifySMSOTPMessageText(ctx context.Context, in *GetCustomVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifySMSOTPMessageTextResponse, error) {
	out := new(GetCustomVerifySMSOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetCustomVerifySMSOTPMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultVerifySMSOTPMessageText(ctx context.Context, in *GetDefaultVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifySMSOTPMessageTextResponse, error) {
	out := new(GetDefaultVerifySMSOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultVerifySMSOTPMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetCustomVerifySMSOTPMessageText(ctx context.Context, in *SetCustomVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*SetCustomVerifySMSOTPMessageTextResponse, error) {
	out := new(SetCustomVerifySMSOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetCustomVerifySMSOTPMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetCustomVerifySMSOTPMessageTextToDefault(ctx context.Context, in *ResetCustomVerifySMSOTPMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifySMSOTPMessageTextToDefaultResponse, error) {
	out := new(ResetCustomVerifySMSOTPMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetCustomVerifySMSOTPMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCustomVerifyEmailOTPMessageText(ctx context.Context, in *GetCustomVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyEmailOTPMessageTextResponse, error) {
	out := new(GetCustomVerifyEmailOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetCustomVerifyEmailOTPMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultVerifyEmailOTPMessageText(ctx context.Context, in *GetDefaultVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyEmailOTPMessageTextResponse, error) {
	out := new(GetDefaultVerifyEmailOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultVerifyEmailOTPMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetCustomVerifyEmailOTPMessageText(ctx context.Context, in *SetCustomVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*SetCustomVerifyEmailOTPMessageTextResponse, error) {
	out := new(SetCustomVerifyEmailOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetCustomVerifyEmailOTPMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetCustomVerifyEmailOTPMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyEmailOTPMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyEmailOTPMessageTextToDefaultResponse, error) {
	out := new(ResetCustomVerifyEmailOTPMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetCustomVerifyEmailOTPMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCustomDomainClaimedMessageText(ctx context.Context, in *GetCustomDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetCustomDomainClaimedMessageTextResponse, error) {
	out := new(GetCustomDomainClaimedMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetCustomDomainClaimedMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultDomainClaimedMessageText(ctx context.Context, in *GetDefaultDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultDomainClaimedMessageTextResponse, error) {
	out := new(GetDefaultDomainClaimedMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultDomainClaimedMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetCustomDomainClaimedMessageCustomText(ctx context.Context, in *SetCustomDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*SetCustomDomainClaimedMessageTextResponse, error) {
	out := new(SetCustomDomainClaimedMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetCustomDomainClaimedMessageCustomText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetCustomDomainClaimedMessageTextToDefault(ctx context.Context, in *ResetCustomDomainClaimedMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error) {
	out := new(ResetCustomDomainClaimedMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetCustomDomainClaimedMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCustomPasswordlessRegistrationMessageText(ctx context.Context, in *GetCustomPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordlessRegistrationMessageTextResponse, error) {
	out := new(GetCustomPasswordlessRegistrationMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetCustomPasswordlessRegistrationMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultPasswordlessRegistrationMessageText(ctx context.Context, in *GetDefaultPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error) {
	out := new(GetDefaultPasswordlessRegistrationMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultPasswordlessRegistrationMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetCustomPasswordlessRegistrationMessageCustomText(ctx context.Context, in *SetCustomPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*SetCustomPasswordlessRegistrationMessageTextResponse, error) {
	out := new(SetCustomPasswordlessRegistrationMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetCustomPasswordlessRegistrationMessageCustomText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error) {
	out := new(ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetCustomPasswordlessRegistrationMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCustomPasswordChangeMessageText(ctx context.Context, in *GetCustomPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordChangeMessageTextResponse, error) {
	out := new(GetCustomPasswordChangeMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetCustomPasswordChangeMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultPasswordChangeMessageText(ctx context.Context, in *GetDefaultPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordChangeMessageTextResponse, error) {
	out := new(GetDefaultPasswordChangeMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultPasswordChangeMessageText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetCustomPasswordChangeMessageCustomText(ctx context.Context, in *SetCustomPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*SetCustomPasswordChangeMessageTextResponse, error) {
	out := new(SetCustomPasswordChangeMessageTextResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetCustomPasswordChangeMessageCustomText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetCustomPasswordChangeMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordChangeMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordChangeMessageTextToDefaultResponse, error) {
	out := new(ResetCustomPasswordChangeMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetCustomPasswordChangeMessageTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCustomLoginTexts(ctx context.Context, in *GetCustomLoginTextsRequest, opts ...grpc.CallOption) (*GetCustomLoginTextsResponse, error) {
	out := new(GetCustomLoginTextsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetCustomLoginTexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultLoginTexts(ctx context.Context, in *GetDefaultLoginTextsRequest, opts ...grpc.CallOption) (*GetDefaultLoginTextsResponse, error) {
	out := new(GetDefaultLoginTextsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultLoginTexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetCustomLoginText(ctx context.Context, in *SetCustomLoginTextsRequest, opts ...grpc.CallOption) (*SetCustomLoginTextsResponse, error) {
	out := new(SetCustomLoginTextsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetCustomLoginText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetCustomLoginTextToDefault(ctx context.Context, in *ResetCustomLoginTextsToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomLoginTextsToDefaultResponse, error) {
	out := new(ResetCustomLoginTextsToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetCustomLoginTextToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetOrgIDPByID(ctx context.Context, in *GetOrgIDPByIDRequest, opts ...grpc.CallOption) (*GetOrgIDPByIDResponse, error) {
	out := new(GetOrgIDPByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetOrgIDPByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgIDPs(ctx context.Context, in *ListOrgIDPsRequest, opts ...grpc.CallOption) (*ListOrgIDPsResponse, error) {
	out := new(ListOrgIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOrgOIDCIDP(ctx context.Context, in *AddOrgOIDCIDPRequest, opts ...grpc.CallOption) (*AddOrgOIDCIDPResponse, error) {
	out := new(AddOrgOIDCIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOrgOIDCIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOrgJWTIDP(ctx context.Context, in *AddOrgJWTIDPRequest, opts ...grpc.CallOption) (*AddOrgJWTIDPResponse, error) {
	out := new(AddOrgJWTIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOrgJWTIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateOrgIDP(ctx context.Context, in *DeactivateOrgIDPRequest, opts ...grpc.CallOption) (*DeactivateOrgIDPResponse, error) {
	out := new(DeactivateOrgIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateOrgIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateOrgIDP(ctx context.Context, in *ReactivateOrgIDPRequest, opts ...grpc.CallOption) (*ReactivateOrgIDPResponse, error) {
	out := new(ReactivateOrgIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateOrgIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveOrgIDP(ctx context.Context, in *RemoveOrgIDPRequest, opts ...grpc.CallOption) (*RemoveOrgIDPResponse, error) {
	out := new(RemoveOrgIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveOrgIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOrgIDP(ctx context.Context, in *UpdateOrgIDPRequest, opts ...grpc.CallOption) (*UpdateOrgIDPResponse, error) {
	out := new(UpdateOrgIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateOrgIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOrgIDPOIDCConfig(ctx context.Context, in *UpdateOrgIDPOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateOrgIDPOIDCConfigResponse, error) {
	out := new(UpdateOrgIDPOIDCConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateOrgIDPOIDCConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOrgIDPJWTConfig(ctx context.Context, in *UpdateOrgIDPJWTConfigRequest, opts ...grpc.CallOption) (*UpdateOrgIDPJWTConfigResponse, error) {
	out := new(UpdateOrgIDPJWTConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateOrgIDPJWTConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetProviderByID(ctx context.Context, in *GetProviderByIDRequest, opts ...grpc.CallOption) (*GetProviderByIDResponse, error) {
	out := new(GetProviderByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetProviderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddGenericOAuthProvider(ctx context.Context, in *AddGenericOAuthProviderRequest, opts ...grpc.CallOption) (*AddGenericOAuthProviderResponse, error) {
	out := new(AddGenericOAuthProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddGenericOAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateGenericOAuthProvider(ctx context.Context, in *UpdateGenericOAuthProviderRequest, opts ...grpc.CallOption) (*UpdateGenericOAuthProviderResponse, error) {
	out := new(UpdateGenericOAuthProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateGenericOAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddGenericOIDCProvider(ctx context.Context, in *AddGenericOIDCProviderRequest, opts ...grpc.CallOption) (*AddGenericOIDCProviderResponse, error) {
	out := new(AddGenericOIDCProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddGenericOIDCProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateGenericOIDCProvider(ctx context.Context, in *UpdateGenericOIDCProviderRequest, opts ...grpc.CallOption) (*UpdateGenericOIDCProviderResponse, error) {
	out := new(UpdateGenericOIDCProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateGenericOIDCProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) MigrateGenericOIDCProvider(ctx context.Context, in *MigrateGenericOIDCProviderRequest, opts ...grpc.CallOption) (*MigrateGenericOIDCProviderResponse, error) {
	out := new(MigrateGenericOIDCProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/MigrateGenericOIDCProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddJWTProvider(ctx context.Context, in *AddJWTProviderRequest, opts ...grpc.CallOption) (*AddJWTProviderResponse, error) {
	out := new(AddJWTProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddJWTProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateJWTProvider(ctx context.Context, in *UpdateJWTProviderRequest, opts ...grpc.CallOption) (*UpdateJWTProviderResponse, error) {
	out := new(UpdateJWTProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateJWTProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddAzureADProvider(ctx context.Context, in *AddAzureADProviderRequest, opts ...grpc.CallOption) (*AddAzureADProviderResponse, error) {
	out := new(AddAzureADProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddAzureADProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateAzureADProvider(ctx context.Context, in *UpdateAzureADProviderRequest, opts ...grpc.CallOption) (*UpdateAzureADProviderResponse, error) {
	out := new(UpdateAzureADProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateAzureADProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddGitHubProvider(ctx context.Context, in *AddGitHubProviderRequest, opts ...grpc.CallOption) (*AddGitHubProviderResponse, error) {
	out := new(AddGitHubProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddGitHubProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateGitHubProvider(ctx context.Context, in *UpdateGitHubProviderRequest, opts ...grpc.CallOption) (*UpdateGitHubProviderResponse, error) {
	out := new(UpdateGitHubProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateGitHubProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddGitHubEnterpriseServerProvider(ctx context.Context, in *AddGitHubEnterpriseServerProviderRequest, opts ...grpc.CallOption) (*AddGitHubEnterpriseServerProviderResponse, error) {
	out := new(AddGitHubEnterpriseServerProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddGitHubEnterpriseServerProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateGitHubEnterpriseServerProvider(ctx context.Context, in *UpdateGitHubEnterpriseServerProviderRequest, opts ...grpc.CallOption) (*UpdateGitHubEnterpriseServerProviderResponse, error) {
	out := new(UpdateGitHubEnterpriseServerProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateGitHubEnterpriseServerProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddGitLabProvider(ctx context.Context, in *AddGitLabProviderRequest, opts ...grpc.CallOption) (*AddGitLabProviderResponse, error) {
	out := new(AddGitLabProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddGitLabProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateGitLabProvider(ctx context.Context, in *UpdateGitLabProviderRequest, opts ...grpc.CallOption) (*UpdateGitLabProviderResponse, error) {
	out := new(UpdateGitLabProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateGitLabProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddGitLabSelfHostedProvider(ctx context.Context, in *AddGitLabSelfHostedProviderRequest, opts ...grpc.CallOption) (*AddGitLabSelfHostedProviderResponse, error) {
	out := new(AddGitLabSelfHostedProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddGitLabSelfHostedProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateGitLabSelfHostedProvider(ctx context.Context, in *UpdateGitLabSelfHostedProviderRequest, opts ...grpc.CallOption) (*UpdateGitLabSelfHostedProviderResponse, error) {
	out := new(UpdateGitLabSelfHostedProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateGitLabSelfHostedProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddGoogleProvider(ctx context.Context, in *AddGoogleProviderRequest, opts ...grpc.CallOption) (*AddGoogleProviderResponse, error) {
	out := new(AddGoogleProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddGoogleProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateGoogleProvider(ctx context.Context, in *UpdateGoogleProviderRequest, opts ...grpc.CallOption) (*UpdateGoogleProviderResponse, error) {
	out := new(UpdateGoogleProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateGoogleProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddLDAPProvider(ctx context.Context, in *AddLDAPProviderRequest, opts ...grpc.CallOption) (*AddLDAPProviderResponse, error) {
	out := new(AddLDAPProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddLDAPProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateLDAPProvider(ctx context.Context, in *UpdateLDAPProviderRequest, opts ...grpc.CallOption) (*UpdateLDAPProviderResponse, error) {
	out := new(UpdateLDAPProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateLDAPProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddAppleProvider(ctx context.Context, in *AddAppleProviderRequest, opts ...grpc.CallOption) (*AddAppleProviderResponse, error) {
	out := new(AddAppleProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddAppleProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateAppleProvider(ctx context.Context, in *UpdateAppleProviderRequest, opts ...grpc.CallOption) (*UpdateAppleProviderResponse, error) {
	out := new(UpdateAppleProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateAppleProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddSAMLProvider(ctx context.Context, in *AddSAMLProviderRequest, opts ...grpc.CallOption) (*AddSAMLProviderResponse, error) {
	out := new(AddSAMLProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddSAMLProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateSAMLProvider(ctx context.Context, in *UpdateSAMLProviderRequest, opts ...grpc.CallOption) (*UpdateSAMLProviderResponse, error) {
	out := new(UpdateSAMLProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateSAMLProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RegenerateSAMLProviderCertificate(ctx context.Context, in *RegenerateSAMLProviderCertificateRequest, opts ...grpc.CallOption) (*RegenerateSAMLProviderCertificateResponse, error) {
	out := new(RegenerateSAMLProviderCertificateResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RegenerateSAMLProviderCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error) {
	out := new(DeleteProviderResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeleteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error) {
	out := new(ListActionsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetAction(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*GetActionResponse, error) {
	out := new(GetActionResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) CreateAction(ctx context.Context, in *CreateActionRequest, opts ...grpc.CallOption) (*CreateActionResponse, error) {
	out := new(CreateActionResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/CreateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateAction(ctx context.Context, in *UpdateActionRequest, opts ...grpc.CallOption) (*UpdateActionResponse, error) {
	out := new(UpdateActionResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateAction(ctx context.Context, in *DeactivateActionRequest, opts ...grpc.CallOption) (*DeactivateActionResponse, error) {
	out := new(DeactivateActionResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateAction(ctx context.Context, in *ReactivateActionRequest, opts ...grpc.CallOption) (*ReactivateActionResponse, error) {
	out := new(ReactivateActionResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeleteAction(ctx context.Context, in *DeleteActionRequest, opts ...grpc.CallOption) (*DeleteActionResponse, error) {
	out := new(DeleteActionResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeleteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListFlowTypes(ctx context.Context, in *ListFlowTypesRequest, opts ...grpc.CallOption) (*ListFlowTypesResponse, error) {
	out := new(ListFlowTypesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListFlowTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListFlowTriggerTypes(ctx context.Context, in *ListFlowTriggerTypesRequest, opts ...grpc.CallOption) (*ListFlowTriggerTypesResponse, error) {
	out := new(ListFlowTriggerTypesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListFlowTriggerTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowResponse, error) {
	out := new(GetFlowResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ClearFlow(ctx context.Context, in *ClearFlowRequest, opts ...grpc.CallOption) (*ClearFlowResponse, error) {
	out := new(ClearFlowResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ClearFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetTriggerActions(ctx context.Context, in *SetTriggerActionsRequest, opts ...grpc.CallOption) (*SetTriggerActionsResponse, error) {
	out := new(SetTriggerActionsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetTriggerActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServiceServer is the server API for ManagementService service.
// All implementations must embed UnimplementedManagementServiceServer
// for forward compatibility
type ManagementServiceServer interface {
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	GetOIDCInformation(context.Context, *GetOIDCInformationRequest) (*GetOIDCInformationResponse, error)
	GetIAM(context.Context, *GetIAMRequest) (*GetIAMResponse, error)
	GetSupportedLanguages(context.Context, *GetSupportedLanguagesRequest) (*GetSupportedLanguagesResponse, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	GetUserByLoginNameGlobal(context.Context, *GetUserByLoginNameGlobalRequest) (*GetUserByLoginNameGlobalResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	ListUserChanges(context.Context, *ListUserChangesRequest) (*ListUserChangesResponse, error)
	IsUserUnique(context.Context, *IsUserUniqueRequest) (*IsUserUniqueResponse, error)
	// deprecated: use ImportHumanUser
	AddHumanUser(context.Context, *AddHumanUserRequest) (*AddHumanUserResponse, error)
	ImportHumanUser(context.Context, *ImportHumanUserRequest) (*ImportHumanUserResponse, error)
	AddMachineUser(context.Context, *AddMachineUserRequest) (*AddMachineUserResponse, error)
	DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error)
	ReactivateUser(context.Context, *ReactivateUserRequest) (*ReactivateUserResponse, error)
	LockUser(context.Context, *LockUserRequest) (*LockUserResponse, error)
	UnlockUser(context.Context, *UnlockUserRequest) (*UnlockUserResponse, error)
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error)
	SetUserMetadata(context.Context, *SetUserMetadataRequest) (*SetUserMetadataResponse, error)
	BulkSetUserMetadata(context.Context, *BulkSetUserMetadataRequest) (*BulkSetUserMetadataResponse, error)
	ListUserMetadata(context.Context, *ListUserMetadataRequest) (*ListUserMetadataResponse, error)
	GetUserMetadata(context.Context, *GetUserMetadataRequest) (*GetUserMetadataResponse, error)
	RemoveUserMetadata(context.Context, *RemoveUserMetadataRequest) (*RemoveUserMetadataResponse, error)
	BulkRemoveUserMetadata(context.Context, *BulkRemoveUserMetadataRequest) (*BulkRemoveUserMetadataResponse, error)
	GetHumanProfile(context.Context, *GetHumanProfileRequest) (*GetHumanProfileResponse, error)
	UpdateHumanProfile(context.Context, *UpdateHumanProfileRequest) (*UpdateHumanProfileResponse, error)
	GetHumanEmail(context.Context, *GetHumanEmailRequest) (*GetHumanEmailResponse, error)
	UpdateHumanEmail(context.Context, *UpdateHumanEmailRequest) (*UpdateHumanEmailResponse, error)
	ResendHumanInitialization(context.Context, *ResendHumanInitializationRequest) (*ResendHumanInitializationResponse, error)
	ResendHumanEmailVerification(context.Context, *ResendHumanEmailVerificationRequest) (*ResendHumanEmailVerificationResponse, error)
	GetHumanPhone(context.Context, *GetHumanPhoneRequest) (*GetHumanPhoneResponse, error)
	UpdateHumanPhone(context.Context, *UpdateHumanPhoneRequest) (*UpdateHumanPhoneResponse, error)
	RemoveHumanPhone(context.Context, *RemoveHumanPhoneRequest) (*RemoveHumanPhoneResponse, error)
	ResendHumanPhoneVerification(context.Context, *ResendHumanPhoneVerificationRequest) (*ResendHumanPhoneVerificationResponse, error)
	RemoveHumanAvatar(context.Context, *RemoveHumanAvatarRequest) (*RemoveHumanAvatarResponse, error)
	// deprecated: use SetHumanPassword
	SetHumanInitialPassword(context.Context, *SetHumanInitialPasswordRequest) (*SetHumanInitialPasswordResponse, error)
	SetHumanPassword(context.Context, *SetHumanPasswordRequest) (*SetHumanPasswordResponse, error)
	SendHumanResetPasswordNotification(context.Context, *SendHumanResetPasswordNotificationRequest) (*SendHumanResetPasswordNotificationResponse, error)
	ListHumanAuthFactors(context.Context, *ListHumanAuthFactorsRequest) (*ListHumanAuthFactorsResponse, error)
	RemoveHumanAuthFactorOTP(context.Context, *RemoveHumanAuthFactorOTPRequest) (*RemoveHumanAuthFactorOTPResponse, error)
	RemoveHumanAuthFactorU2F(context.Context, *RemoveHumanAuthFactorU2FRequest) (*RemoveHumanAuthFactorU2FResponse, error)
	RemoveHumanAuthFactorOTPSMS(context.Context, *RemoveHumanAuthFactorOTPSMSRequest) (*RemoveHumanAuthFactorOTPSMSResponse, error)
	RemoveHumanAuthFactorOTPEmail(context.Context, *RemoveHumanAuthFactorOTPEmailRequest) (*RemoveHumanAuthFactorOTPEmailResponse, error)
	ListHumanPasswordless(context.Context, *ListHumanPasswordlessRequest) (*ListHumanPasswordlessResponse, error)
	AddPasswordlessRegistration(context.Context, *AddPasswordlessRegistrationRequest) (*AddPasswordlessRegistrationResponse, error)
	SendPasswordlessRegistration(context.Context, *SendPasswordlessRegistrationRequest) (*SendPasswordlessRegistrationResponse, error)
	RemoveHumanPasswordless(context.Context, *RemoveHumanPasswordlessRequest) (*RemoveHumanPasswordlessResponse, error)
	UpdateMachine(context.Context, *UpdateMachineRequest) (*UpdateMachineResponse, error)
	GenerateMachineSecret(context.Context, *GenerateMachineSecretRequest) (*GenerateMachineSecretResponse, error)
	RemoveMachineSecret(context.Context, *RemoveMachineSecretRequest) (*RemoveMachineSecretResponse, error)
	GetMachineKeyByIDs(context.Context, *GetMachineKeyByIDsRequest) (*GetMachineKeyByIDsResponse, error)
	ListMachineKeys(context.Context, *ListMachineKeysRequest) (*ListMachineKeysResponse, error)
	AddMachineKey(context.Context, *AddMachineKeyRequest) (*AddMachineKeyResponse, error)
	RemoveMachineKey(context.Context, *RemoveMachineKeyRequest) (*RemoveMachineKeyResponse, error)
	GetPersonalAccessTokenByIDs(context.Context, *GetPersonalAccessTokenByIDsRequest) (*GetPersonalAccessTokenByIDsResponse, error)
	ListPersonalAccessTokens(context.Context, *ListPersonalAccessTokensRequest) (*ListPersonalAccessTokensResponse, error)
	AddPersonalAccessToken(context.Context, *AddPersonalAccessTokenRequest) (*AddPersonalAccessTokenResponse, error)
	RemovePersonalAccessToken(context.Context, *RemovePersonalAccessTokenRequest) (*RemovePersonalAccessTokenResponse, error)
	ListHumanLinkedIDPs(context.Context, *ListHumanLinkedIDPsRequest) (*ListHumanLinkedIDPsResponse, error)
	RemoveHumanLinkedIDP(context.Context, *RemoveHumanLinkedIDPRequest) (*RemoveHumanLinkedIDPResponse, error)
	ListUserMemberships(context.Context, *ListUserMembershipsRequest) (*ListUserMembershipsResponse, error)
	GetMyOrg(context.Context, *GetMyOrgRequest) (*GetMyOrgResponse, error)
	GetOrgByDomainGlobal(context.Context, *GetOrgByDomainGlobalRequest) (*GetOrgByDomainGlobalResponse, error)
	ListOrgChanges(context.Context, *ListOrgChangesRequest) (*ListOrgChangesResponse, error)
	AddOrg(context.Context, *AddOrgRequest) (*AddOrgResponse, error)
	UpdateOrg(context.Context, *UpdateOrgRequest) (*UpdateOrgResponse, error)
	DeactivateOrg(context.Context, *DeactivateOrgRequest) (*DeactivateOrgResponse, error)
	ReactivateOrg(context.Context, *ReactivateOrgRequest) (*ReactivateOrgResponse, error)
	RemoveOrg(context.Context, *RemoveOrgRequest) (*RemoveOrgResponse, error)
	SetOrgMetadata(context.Context, *SetOrgMetadataRequest) (*SetOrgMetadataResponse, error)
	BulkSetOrgMetadata(context.Context, *BulkSetOrgMetadataRequest) (*BulkSetOrgMetadataResponse, error)
	ListOrgMetadata(context.Context, *ListOrgMetadataRequest) (*ListOrgMetadataResponse, error)
	GetOrgMetadata(context.Context, *GetOrgMetadataRequest) (*GetOrgMetadataResponse, error)
	RemoveOrgMetadata(context.Context, *RemoveOrgMetadataRequest) (*RemoveOrgMetadataResponse, error)
	BulkRemoveOrgMetadata(context.Context, *BulkRemoveOrgMetadataRequest) (*BulkRemoveOrgMetadataResponse, error)
	ListOrgDomains(context.Context, *ListOrgDomainsRequest) (*ListOrgDomainsResponse, error)
	AddOrgDomain(context.Context, *AddOrgDomainRequest) (*AddOrgDomainResponse, error)
	RemoveOrgDomain(context.Context, *RemoveOrgDomainRequest) (*RemoveOrgDomainResponse, error)
	GenerateOrgDomainValidation(context.Context, *GenerateOrgDomainValidationRequest) (*GenerateOrgDomainValidationResponse, error)
	ValidateOrgDomain(context.Context, *ValidateOrgDomainRequest) (*ValidateOrgDomainResponse, error)
	SetPrimaryOrgDomain(context.Context, *SetPrimaryOrgDomainRequest) (*SetPrimaryOrgDomainResponse, error)
	ListOrgMemberRoles(context.Context, *ListOrgMemberRolesRequest) (*ListOrgMemberRolesResponse, error)
	ListOrgMembers(context.Context, *ListOrgMembersRequest) (*ListOrgMembersResponse, error)
	AddOrgMember(context.Context, *AddOrgMemberRequest) (*AddOrgMemberResponse, error)
	UpdateOrgMember(context.Context, *UpdateOrgMemberRequest) (*UpdateOrgMemberResponse, error)
	RemoveOrgMember(context.Context, *RemoveOrgMemberRequest) (*RemoveOrgMemberResponse, error)
	GetProjectByID(context.Context, *GetProjectByIDRequest) (*GetProjectByIDResponse, error)
	GetGrantedProjectByID(context.Context, *GetGrantedProjectByIDRequest) (*GetGrantedProjectByIDResponse, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	ListGrantedProjects(context.Context, *ListGrantedProjectsRequest) (*ListGrantedProjectsResponse, error)
	ListGrantedProjectRoles(context.Context, *ListGrantedProjectRolesRequest) (*ListGrantedProjectRolesResponse, error)
	ListProjectChanges(context.Context, *ListProjectChangesRequest) (*ListProjectChangesResponse, error)
	AddProject(context.Context, *AddProjectRequest) (*AddProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	DeactivateProject(context.Context, *DeactivateProjectRequest) (*DeactivateProjectResponse, error)
	ReactivateProject(context.Context, *ReactivateProjectRequest) (*ReactivateProjectResponse, error)
	RemoveProject(context.Context, *RemoveProjectRequest) (*RemoveProjectResponse, error)
	ListProjectRoles(context.Context, *ListProjectRolesRequest) (*ListProjectRolesResponse, error)
	AddProjectRole(context.Context, *AddProjectRoleRequest) (*AddProjectRoleResponse, error)
	BulkAddProjectRoles(context.Context, *BulkAddProjectRolesRequest) (*BulkAddProjectRolesResponse, error)
	UpdateProjectRole(context.Context, *UpdateProjectRoleRequest) (*UpdateProjectRoleResponse, error)
	RemoveProjectRole(context.Context, *RemoveProjectRoleRequest) (*RemoveProjectRoleResponse, error)
	ListProjectMemberRoles(context.Context, *ListProjectMemberRolesRequest) (*ListProjectMemberRolesResponse, error)
	ListProjectMembers(context.Context, *ListProjectMembersRequest) (*ListProjectMembersResponse, error)
	AddProjectMember(context.Context, *AddProjectMemberRequest) (*AddProjectMemberResponse, error)
	UpdateProjectMember(context.Context, *UpdateProjectMemberRequest) (*UpdateProjectMemberResponse, error)
	RemoveProjectMember(context.Context, *RemoveProjectMemberRequest) (*RemoveProjectMemberResponse, error)
	GetAppByID(context.Context, *GetAppByIDRequest) (*GetAppByIDResponse, error)
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	ListAppChanges(context.Context, *ListAppChangesRequest) (*ListAppChangesResponse, error)
	AddOIDCApp(context.Context, *AddOIDCAppRequest) (*AddOIDCAppResponse, error)
	AddSAMLApp(context.Context, *AddSAMLAppRequest) (*AddSAMLAppResponse, error)
	AddAPIApp(context.Context, *AddAPIAppRequest) (*AddAPIAppResponse, error)
	// Changes application
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	UpdateOIDCAppConfig(context.Context, *UpdateOIDCAppConfigRequest) (*UpdateOIDCAppConfigResponse, error)
	UpdateSAMLAppConfig(context.Context, *UpdateSAMLAppConfigRequest) (*UpdateSAMLAppConfigResponse, error)
	UpdateAPIAppConfig(context.Context, *UpdateAPIAppConfigRequest) (*UpdateAPIAppConfigResponse, error)
	DeactivateApp(context.Context, *DeactivateAppRequest) (*DeactivateAppResponse, error)
	ReactivateApp(context.Context, *ReactivateAppRequest) (*ReactivateAppResponse, error)
	RemoveApp(context.Context, *RemoveAppRequest) (*RemoveAppResponse, error)
	RegenerateOIDCClientSecret(context.Context, *RegenerateOIDCClientSecretRequest) (*RegenerateOIDCClientSecretResponse, error)
	RegenerateAPIClientSecret(context.Context, *RegenerateAPIClientSecretRequest) (*RegenerateAPIClientSecretResponse, error)
	GetAppKey(context.Context, *GetAppKeyRequest) (*GetAppKeyResponse, error)
	ListAppKeys(context.Context, *ListAppKeysRequest) (*ListAppKeysResponse, error)
	AddAppKey(context.Context, *AddAppKeyRequest) (*AddAppKeyResponse, error)
	RemoveAppKey(context.Context, *RemoveAppKeyRequest) (*RemoveAppKeyResponse, error)
	ListProjectGrantChanges(context.Context, *ListProjectGrantChangesRequest) (*ListProjectGrantChangesResponse, error)
	GetProjectGrantByID(context.Context, *GetProjectGrantByIDRequest) (*GetProjectGrantByIDResponse, error)
	ListProjectGrants(context.Context, *ListProjectGrantsRequest) (*ListProjectGrantsResponse, error)
	ListAllProjectGrants(context.Context, *ListAllProjectGrantsRequest) (*ListAllProjectGrantsResponse, error)
	AddProjectGrant(context.Context, *AddProjectGrantRequest) (*AddProjectGrantResponse, error)
	UpdateProjectGrant(context.Context, *UpdateProjectGrantRequest) (*UpdateProjectGrantResponse, error)
	DeactivateProjectGrant(context.Context, *DeactivateProjectGrantRequest) (*DeactivateProjectGrantResponse, error)
	ReactivateProjectGrant(context.Context, *ReactivateProjectGrantRequest) (*ReactivateProjectGrantResponse, error)
	RemoveProjectGrant(context.Context, *RemoveProjectGrantRequest) (*RemoveProjectGrantResponse, error)
	ListProjectGrantMemberRoles(context.Context, *ListProjectGrantMemberRolesRequest) (*ListProjectGrantMemberRolesResponse, error)
	ListProjectGrantMembers(context.Context, *ListProjectGrantMembersRequest) (*ListProjectGrantMembersResponse, error)
	AddProjectGrantMember(context.Context, *AddProjectGrantMemberRequest) (*AddProjectGrantMemberResponse, error)
	UpdateProjectGrantMember(context.Context, *UpdateProjectGrantMemberRequest) (*UpdateProjectGrantMemberResponse, error)
	RemoveProjectGrantMember(context.Context, *RemoveProjectGrantMemberRequest) (*RemoveProjectGrantMemberResponse, error)
	GetUserGrantByID(context.Context, *GetUserGrantByIDRequest) (*GetUserGrantByIDResponse, error)
	ListUserGrants(context.Context, *ListUserGrantRequest) (*ListUserGrantResponse, error)
	AddUserGrant(context.Context, *AddUserGrantRequest) (*AddUserGrantResponse, error)
	UpdateUserGrant(context.Context, *UpdateUserGrantRequest) (*UpdateUserGrantResponse, error)
	DeactivateUserGrant(context.Context, *DeactivateUserGrantRequest) (*DeactivateUserGrantResponse, error)
	ReactivateUserGrant(context.Context, *ReactivateUserGrantRequest) (*ReactivateUserGrantResponse, error)
	RemoveUserGrant(context.Context, *RemoveUserGrantRequest) (*RemoveUserGrantResponse, error)
	BulkRemoveUserGrant(context.Context, *BulkRemoveUserGrantRequest) (*BulkRemoveUserGrantResponse, error)
	// deprecated: please use DomainPolicy instead
	GetOrgIAMPolicy(context.Context, *GetOrgIAMPolicyRequest) (*GetOrgIAMPolicyResponse, error)
	GetDomainPolicy(context.Context, *GetDomainPolicyRequest) (*GetDomainPolicyResponse, error)
	GetLoginPolicy(context.Context, *GetLoginPolicyRequest) (*GetLoginPolicyResponse, error)
	GetDefaultLoginPolicy(context.Context, *GetDefaultLoginPolicyRequest) (*GetDefaultLoginPolicyResponse, error)
	AddCustomLoginPolicy(context.Context, *AddCustomLoginPolicyRequest) (*AddCustomLoginPolicyResponse, error)
	UpdateCustomLoginPolicy(context.Context, *UpdateCustomLoginPolicyRequest) (*UpdateCustomLoginPolicyResponse, error)
	ResetLoginPolicyToDefault(context.Context, *ResetLoginPolicyToDefaultRequest) (*ResetLoginPolicyToDefaultResponse, error)
	ListLoginPolicyIDPs(context.Context, *ListLoginPolicyIDPsRequest) (*ListLoginPolicyIDPsResponse, error)
	AddIDPToLoginPolicy(context.Context, *AddIDPToLoginPolicyRequest) (*AddIDPToLoginPolicyResponse, error)
	RemoveIDPFromLoginPolicy(context.Context, *RemoveIDPFromLoginPolicyRequest) (*RemoveIDPFromLoginPolicyResponse, error)
	ListLoginPolicySecondFactors(context.Context, *ListLoginPolicySecondFactorsRequest) (*ListLoginPolicySecondFactorsResponse, error)
	AddSecondFactorToLoginPolicy(context.Context, *AddSecondFactorToLoginPolicyRequest) (*AddSecondFactorToLoginPolicyResponse, error)
	RemoveSecondFactorFromLoginPolicy(context.Context, *RemoveSecondFactorFromLoginPolicyRequest) (*RemoveSecondFactorFromLoginPolicyResponse, error)
	ListLoginPolicyMultiFactors(context.Context, *ListLoginPolicyMultiFactorsRequest) (*ListLoginPolicyMultiFactorsResponse, error)
	AddMultiFactorToLoginPolicy(context.Context, *AddMultiFactorToLoginPolicyRequest) (*AddMultiFactorToLoginPolicyResponse, error)
	RemoveMultiFactorFromLoginPolicy(context.Context, *RemoveMultiFactorFromLoginPolicyRequest) (*RemoveMultiFactorFromLoginPolicyResponse, error)
	GetPasswordComplexityPolicy(context.Context, *GetPasswordComplexityPolicyRequest) (*GetPasswordComplexityPolicyResponse, error)
	GetDefaultPasswordComplexityPolicy(context.Context, *GetDefaultPasswordComplexityPolicyRequest) (*GetDefaultPasswordComplexityPolicyResponse, error)
	AddCustomPasswordComplexityPolicy(context.Context, *AddCustomPasswordComplexityPolicyRequest) (*AddCustomPasswordComplexityPolicyResponse, error)
	UpdateCustomPasswordComplexityPolicy(context.Context, *UpdateCustomPasswordComplexityPolicyRequest) (*UpdateCustomPasswordComplexityPolicyResponse, error)
	ResetPasswordComplexityPolicyToDefault(context.Context, *ResetPasswordComplexityPolicyToDefaultRequest) (*ResetPasswordComplexityPolicyToDefaultResponse, error)
	GetPasswordAgePolicy(context.Context, *GetPasswordAgePolicyRequest) (*GetPasswordAgePolicyResponse, error)
	GetDefaultPasswordAgePolicy(context.Context, *GetDefaultPasswordAgePolicyRequest) (*GetDefaultPasswordAgePolicyResponse, error)
	AddCustomPasswordAgePolicy(context.Context, *AddCustomPasswordAgePolicyRequest) (*AddCustomPasswordAgePolicyResponse, error)
	UpdateCustomPasswordAgePolicy(context.Context, *UpdateCustomPasswordAgePolicyRequest) (*UpdateCustomPasswordAgePolicyResponse, error)
	ResetPasswordAgePolicyToDefault(context.Context, *ResetPasswordAgePolicyToDefaultRequest) (*ResetPasswordAgePolicyToDefaultResponse, error)
	GetLockoutPolicy(context.Context, *GetLockoutPolicyRequest) (*GetLockoutPolicyResponse, error)
	GetDefaultLockoutPolicy(context.Context, *GetDefaultLockoutPolicyRequest) (*GetDefaultLockoutPolicyResponse, error)
	AddCustomLockoutPolicy(context.Context, *AddCustomLockoutPolicyRequest) (*AddCustomLockoutPolicyResponse, error)
	UpdateCustomLockoutPolicy(context.Context, *UpdateCustomLockoutPolicyRequest) (*UpdateCustomLockoutPolicyResponse, error)
	ResetLockoutPolicyToDefault(context.Context, *ResetLockoutPolicyToDefaultRequest) (*ResetLockoutPolicyToDefaultResponse, error)
	GetPrivacyPolicy(context.Context, *GetPrivacyPolicyRequest) (*GetPrivacyPolicyResponse, error)
	GetDefaultPrivacyPolicy(context.Context, *GetDefaultPrivacyPolicyRequest) (*GetDefaultPrivacyPolicyResponse, error)
	AddCustomPrivacyPolicy(context.Context, *AddCustomPrivacyPolicyRequest) (*AddCustomPrivacyPolicyResponse, error)
	UpdateCustomPrivacyPolicy(context.Context, *UpdateCustomPrivacyPolicyRequest) (*UpdateCustomPrivacyPolicyResponse, error)
	ResetPrivacyPolicyToDefault(context.Context, *ResetPrivacyPolicyToDefaultRequest) (*ResetPrivacyPolicyToDefaultResponse, error)
	GetNotificationPolicy(context.Context, *GetNotificationPolicyRequest) (*GetNotificationPolicyResponse, error)
	GetDefaultNotificationPolicy(context.Context, *GetDefaultNotificationPolicyRequest) (*GetDefaultNotificationPolicyResponse, error)
	AddCustomNotificationPolicy(context.Context, *AddCustomNotificationPolicyRequest) (*AddCustomNotificationPolicyResponse, error)
	UpdateCustomNotificationPolicy(context.Context, *UpdateCustomNotificationPolicyRequest) (*UpdateCustomNotificationPolicyResponse, error)
	ResetNotificationPolicyToDefault(context.Context, *ResetNotificationPolicyToDefaultRequest) (*ResetNotificationPolicyToDefaultResponse, error)
	GetLabelPolicy(context.Context, *GetLabelPolicyRequest) (*GetLabelPolicyResponse, error)
	GetPreviewLabelPolicy(context.Context, *GetPreviewLabelPolicyRequest) (*GetPreviewLabelPolicyResponse, error)
	GetDefaultLabelPolicy(context.Context, *GetDefaultLabelPolicyRequest) (*GetDefaultLabelPolicyResponse, error)
	AddCustomLabelPolicy(context.Context, *AddCustomLabelPolicyRequest) (*AddCustomLabelPolicyResponse, error)
	UpdateCustomLabelPolicy(context.Context, *UpdateCustomLabelPolicyRequest) (*UpdateCustomLabelPolicyResponse, error)
	ActivateCustomLabelPolicy(context.Context, *ActivateCustomLabelPolicyRequest) (*ActivateCustomLabelPolicyResponse, error)
	RemoveCustomLabelPolicyLogo(context.Context, *RemoveCustomLabelPolicyLogoRequest) (*RemoveCustomLabelPolicyLogoResponse, error)
	RemoveCustomLabelPolicyLogoDark(context.Context, *RemoveCustomLabelPolicyLogoDarkRequest) (*RemoveCustomLabelPolicyLogoDarkResponse, error)
	RemoveCustomLabelPolicyIcon(context.Context, *RemoveCustomLabelPolicyIconRequest) (*RemoveCustomLabelPolicyIconResponse, error)
	RemoveCustomLabelPolicyIconDark(context.Context, *RemoveCustomLabelPolicyIconDarkRequest) (*RemoveCustomLabelPolicyIconDarkResponse, error)
	RemoveCustomLabelPolicyFont(context.Context, *RemoveCustomLabelPolicyFontRequest) (*RemoveCustomLabelPolicyFontResponse, error)
	ResetLabelPolicyToDefault(context.Context, *ResetLabelPolicyToDefaultRequest) (*ResetLabelPolicyToDefaultResponse, error)
	GetCustomInitMessageText(context.Context, *GetCustomInitMessageTextRequest) (*GetCustomInitMessageTextResponse, error)
	GetDefaultInitMessageText(context.Context, *GetDefaultInitMessageTextRequest) (*GetDefaultInitMessageTextResponse, error)
	SetCustomInitMessageText(context.Context, *SetCustomInitMessageTextRequest) (*SetCustomInitMessageTextResponse, error)
	ResetCustomInitMessageTextToDefault(context.Context, *ResetCustomInitMessageTextToDefaultRequest) (*ResetCustomInitMessageTextToDefaultResponse, error)
	GetCustomPasswordResetMessageText(context.Context, *GetCustomPasswordResetMessageTextRequest) (*GetCustomPasswordResetMessageTextResponse, error)
	GetDefaultPasswordResetMessageText(context.Context, *GetDefaultPasswordResetMessageTextRequest) (*GetDefaultPasswordResetMessageTextResponse, error)
	SetCustomPasswordResetMessageText(context.Context, *SetCustomPasswordResetMessageTextRequest) (*SetCustomPasswordResetMessageTextResponse, error)
	ResetCustomPasswordResetMessageTextToDefault(context.Context, *ResetCustomPasswordResetMessageTextToDefaultRequest) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error)
	GetCustomVerifyEmailMessageText(context.Context, *GetCustomVerifyEmailMessageTextRequest) (*GetCustomVerifyEmailMessageTextResponse, error)
	GetDefaultVerifyEmailMessageText(context.Context, *GetDefaultVerifyEmailMessageTextRequest) (*GetDefaultVerifyEmailMessageTextResponse, error)
	SetCustomVerifyEmailMessageText(context.Context, *SetCustomVerifyEmailMessageTextRequest) (*SetCustomVerifyEmailMessageTextResponse, error)
	ResetCustomVerifyEmailMessageTextToDefault(context.Context, *ResetCustomVerifyEmailMessageTextToDefaultRequest) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error)
	GetCustomVerifyPhoneMessageText(context.Context, *GetCustomVerifyPhoneMessageTextRequest) (*GetCustomVerifyPhoneMessageTextResponse, error)
	GetDefaultVerifyPhoneMessageText(context.Context, *GetDefaultVerifyPhoneMessageTextRequest) (*GetDefaultVerifyPhoneMessageTextResponse, error)
	SetCustomVerifyPhoneMessageText(context.Context, *SetCustomVerifyPhoneMessageTextRequest) (*SetCustomVerifyPhoneMessageTextResponse, error)
	ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *ResetCustomVerifyPhoneMessageTextToDefaultRequest) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error)
	GetCustomVerifySMSOTPMessageText(context.Context, *GetCustomVerifySMSOTPMessageTextRequest) (*GetCustomVerifySMSOTPMessageTextResponse, error)
	GetDefaultVerifySMSOTPMessageText(context.Context, *GetDefaultVerifySMSOTPMessageTextRequest) (*GetDefaultVerifySMSOTPMessageTextResponse, error)
	SetCustomVerifySMSOTPMessageText(context.Context, *SetCustomVerifySMSOTPMessageTextRequest) (*SetCustomVerifySMSOTPMessageTextResponse, error)
	ResetCustomVerifySMSOTPMessageTextToDefault(context.Context, *ResetCustomVerifySMSOTPMessageTextToDefaultRequest) (*ResetCustomVerifySMSOTPMessageTextToDefaultResponse, error)
	GetCustomVerifyEmailOTPMessageText(context.Context, *GetCustomVerifyEmailOTPMessageTextRequest) (*GetCustomVerifyEmailOTPMessageTextResponse, error)
	GetDefaultVerifyEmailOTPMessageText(context.Context, *GetDefaultVerifyEmailOTPMessageTextRequest) (*GetDefaultVerifyEmailOTPMessageTextResponse, error)
	SetCustomVerifyEmailOTPMessageText(context.Context, *SetCustomVerifyEmailOTPMessageTextRequest) (*SetCustomVerifyEmailOTPMessageTextResponse, error)
	ResetCustomVerifyEmailOTPMessageTextToDefault(context.Context, *ResetCustomVerifyEmailOTPMessageTextToDefaultRequest) (*ResetCustomVerifyEmailOTPMessageTextToDefaultResponse, error)
	GetCustomDomainClaimedMessageText(context.Context, *GetCustomDomainClaimedMessageTextRequest) (*GetCustomDomainClaimedMessageTextResponse, error)
	GetDefaultDomainClaimedMessageText(context.Context, *GetDefaultDomainClaimedMessageTextRequest) (*GetDefaultDomainClaimedMessageTextResponse, error)
	SetCustomDomainClaimedMessageCustomText(context.Context, *SetCustomDomainClaimedMessageTextRequest) (*SetCustomDomainClaimedMessageTextResponse, error)
	ResetCustomDomainClaimedMessageTextToDefault(context.Context, *ResetCustomDomainClaimedMessageTextToDefaultRequest) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error)
	GetCustomPasswordlessRegistrationMessageText(context.Context, *GetCustomPasswordlessRegistrationMessageTextRequest) (*GetCustomPasswordlessRegistrationMessageTextResponse, error)
	GetDefaultPasswordlessRegistrationMessageText(context.Context, *GetDefaultPasswordlessRegistrationMessageTextRequest) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error)
	SetCustomPasswordlessRegistrationMessageCustomText(context.Context, *SetCustomPasswordlessRegistrationMessageTextRequest) (*SetCustomPasswordlessRegistrationMessageTextResponse, error)
	ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error)
	GetCustomPasswordChangeMessageText(context.Context, *GetCustomPasswordChangeMessageTextRequest) (*GetCustomPasswordChangeMessageTextResponse, error)
	GetDefaultPasswordChangeMessageText(context.Context, *GetDefaultPasswordChangeMessageTextRequest) (*GetDefaultPasswordChangeMessageTextResponse, error)
	SetCustomPasswordChangeMessageCustomText(context.Context, *SetCustomPasswordChangeMessageTextRequest) (*SetCustomPasswordChangeMessageTextResponse, error)
	ResetCustomPasswordChangeMessageTextToDefault(context.Context, *ResetCustomPasswordChangeMessageTextToDefaultRequest) (*ResetCustomPasswordChangeMessageTextToDefaultResponse, error)
	GetCustomLoginTexts(context.Context, *GetCustomLoginTextsRequest) (*GetCustomLoginTextsResponse, error)
	GetDefaultLoginTexts(context.Context, *GetDefaultLoginTextsRequest) (*GetDefaultLoginTextsResponse, error)
	SetCustomLoginText(context.Context, *SetCustomLoginTextsRequest) (*SetCustomLoginTextsResponse, error)
	ResetCustomLoginTextToDefault(context.Context, *ResetCustomLoginTextsToDefaultRequest) (*ResetCustomLoginTextsToDefaultResponse, error)
	GetOrgIDPByID(context.Context, *GetOrgIDPByIDRequest) (*GetOrgIDPByIDResponse, error)
	ListOrgIDPs(context.Context, *ListOrgIDPsRequest) (*ListOrgIDPsResponse, error)
	AddOrgOIDCIDP(context.Context, *AddOrgOIDCIDPRequest) (*AddOrgOIDCIDPResponse, error)
	AddOrgJWTIDP(context.Context, *AddOrgJWTIDPRequest) (*AddOrgJWTIDPResponse, error)
	DeactivateOrgIDP(context.Context, *DeactivateOrgIDPRequest) (*DeactivateOrgIDPResponse, error)
	ReactivateOrgIDP(context.Context, *ReactivateOrgIDPRequest) (*ReactivateOrgIDPResponse, error)
	RemoveOrgIDP(context.Context, *RemoveOrgIDPRequest) (*RemoveOrgIDPResponse, error)
	UpdateOrgIDP(context.Context, *UpdateOrgIDPRequest) (*UpdateOrgIDPResponse, error)
	UpdateOrgIDPOIDCConfig(context.Context, *UpdateOrgIDPOIDCConfigRequest) (*UpdateOrgIDPOIDCConfigResponse, error)
	UpdateOrgIDPJWTConfig(context.Context, *UpdateOrgIDPJWTConfigRequest) (*UpdateOrgIDPJWTConfigResponse, error)
	// Returns all identity providers, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	// Returns an identity provider of the organization
	GetProviderByID(context.Context, *GetProviderByIDRequest) (*GetProviderByIDResponse, error)
	// Add a new OAuth2 identity provider in the organization
	AddGenericOAuthProvider(context.Context, *AddGenericOAuthProviderRequest) (*AddGenericOAuthProviderResponse, error)
	// Change an existing OAuth2 identity provider in the organization
	UpdateGenericOAuthProvider(context.Context, *UpdateGenericOAuthProviderRequest) (*UpdateGenericOAuthProviderResponse, error)
	// Add a new OIDC identity provider in the organization
	AddGenericOIDCProvider(context.Context, *AddGenericOIDCProviderRequest) (*AddGenericOIDCProviderResponse, error)
	// Change an existing OIDC identity provider in the organization
	UpdateGenericOIDCProvider(context.Context, *UpdateGenericOIDCProviderRequest) (*UpdateGenericOIDCProviderResponse, error)
	// Migrate an existing OIDC identity provider in the organization
	MigrateGenericOIDCProvider(context.Context, *MigrateGenericOIDCProviderRequest) (*MigrateGenericOIDCProviderResponse, error)
	// Add a new JWT identity provider in the organization
	AddJWTProvider(context.Context, *AddJWTProviderRequest) (*AddJWTProviderResponse, error)
	// Change an existing JWT identity provider in the organization
	UpdateJWTProvider(context.Context, *UpdateJWTProviderRequest) (*UpdateJWTProviderResponse, error)
	// Add a new Azure AD identity provider in the organization
	AddAzureADProvider(context.Context, *AddAzureADProviderRequest) (*AddAzureADProviderResponse, error)
	// Change an existing Azure AD identity provider in the organization
	UpdateAzureADProvider(context.Context, *UpdateAzureADProviderRequest) (*UpdateAzureADProviderResponse, error)
	// Add a new GitHub identity provider in the organization
	AddGitHubProvider(context.Context, *AddGitHubProviderRequest) (*AddGitHubProviderResponse, error)
	// Change an existing GitHub identity provider in the organization
	UpdateGitHubProvider(context.Context, *UpdateGitHubProviderRequest) (*UpdateGitHubProviderResponse, error)
	// Add a new GitHub Enterprise Server identity provider in the organization
	AddGitHubEnterpriseServerProvider(context.Context, *AddGitHubEnterpriseServerProviderRequest) (*AddGitHubEnterpriseServerProviderResponse, error)
	// Change an existing GitHub Enterprise Server identity provider in the organization
	UpdateGitHubEnterpriseServerProvider(context.Context, *UpdateGitHubEnterpriseServerProviderRequest) (*UpdateGitHubEnterpriseServerProviderResponse, error)
	// Add a new GitLab identity provider in the organization
	AddGitLabProvider(context.Context, *AddGitLabProviderRequest) (*AddGitLabProviderResponse, error)
	// Change an existing GitLab identity provider in the organization
	UpdateGitLabProvider(context.Context, *UpdateGitLabProviderRequest) (*UpdateGitLabProviderResponse, error)
	// Add a new self hosted GitLab identity provider in the organization
	AddGitLabSelfHostedProvider(context.Context, *AddGitLabSelfHostedProviderRequest) (*AddGitLabSelfHostedProviderResponse, error)
	// Change an existing self hosted GitLab identity provider in the organization
	UpdateGitLabSelfHostedProvider(context.Context, *UpdateGitLabSelfHostedProviderRequest) (*UpdateGitLabSelfHostedProviderResponse, error)
	// Add a new Google identity provider in the organization
	AddGoogleProvider(context.Context, *AddGoogleProviderRequest) (*AddGoogleProviderResponse, error)
	// Change an existing Google identity provider in the organization
	UpdateGoogleProvider(context.Context, *UpdateGoogleProviderRequest) (*UpdateGoogleProviderResponse, error)
	// Add a new LDAP identity provider in the organization
	AddLDAPProvider(context.Context, *AddLDAPProviderRequest) (*AddLDAPProviderResponse, error)
	// Change an existing LDAP identity provider in the organization
	UpdateLDAPProvider(context.Context, *UpdateLDAPProviderRequest) (*UpdateLDAPProviderResponse, error)
	// Add a new Apple identity provider in the organization
	AddAppleProvider(context.Context, *AddAppleProviderRequest) (*AddAppleProviderResponse, error)
	// Change an existing Apple identity provider in the organization
	UpdateAppleProvider(context.Context, *UpdateAppleProviderRequest) (*UpdateAppleProviderResponse, error)
	// Add a new SAML identity provider in the organization
	AddSAMLProvider(context.Context, *AddSAMLProviderRequest) (*AddSAMLProviderResponse, error)
	// Change an existing SAML identity provider in the organization
	UpdateSAMLProvider(context.Context, *UpdateSAMLProviderRequest) (*UpdateSAMLProviderResponse, error)
	// Regenerate certificate for an existing SAML identity provider in the organization
	RegenerateSAMLProviderCertificate(context.Context, *RegenerateSAMLProviderCertificateRequest) (*RegenerateSAMLProviderCertificateResponse, error)
	// Remove an identity provider
	// Will remove all linked providers of this configuration on the users
	DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error)
	ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error)
	GetAction(context.Context, *GetActionRequest) (*GetActionResponse, error)
	CreateAction(context.Context, *CreateActionRequest) (*CreateActionResponse, error)
	UpdateAction(context.Context, *UpdateActionRequest) (*UpdateActionResponse, error)
	DeactivateAction(context.Context, *DeactivateActionRequest) (*DeactivateActionResponse, error)
	ReactivateAction(context.Context, *ReactivateActionRequest) (*ReactivateActionResponse, error)
	DeleteAction(context.Context, *DeleteActionRequest) (*DeleteActionResponse, error)
	ListFlowTypes(context.Context, *ListFlowTypesRequest) (*ListFlowTypesResponse, error)
	ListFlowTriggerTypes(context.Context, *ListFlowTriggerTypesRequest) (*ListFlowTriggerTypesResponse, error)
	GetFlow(context.Context, *GetFlowRequest) (*GetFlowResponse, error)
	ClearFlow(context.Context, *ClearFlowRequest) (*ClearFlowResponse, error)
	SetTriggerActions(context.Context, *SetTriggerActionsRequest) (*SetTriggerActionsResponse, error)
	mustEmbedUnimplementedManagementServiceServer()
}

// UnimplementedManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServiceServer struct {
}

func (UnimplementedManagementServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedManagementServiceServer) GetOIDCInformation(context.Context, *GetOIDCInformationRequest) (*GetOIDCInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOIDCInformation not implemented")
}
func (UnimplementedManagementServiceServer) GetIAM(context.Context, *GetIAMRequest) (*GetIAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIAM not implemented")
}
func (UnimplementedManagementServiceServer) GetSupportedLanguages(context.Context, *GetSupportedLanguagesRequest) (*GetSupportedLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedLanguages not implemented")
}
func (UnimplementedManagementServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedManagementServiceServer) GetUserByLoginNameGlobal(context.Context, *GetUserByLoginNameGlobalRequest) (*GetUserByLoginNameGlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByLoginNameGlobal not implemented")
}
func (UnimplementedManagementServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedManagementServiceServer) ListUserChanges(context.Context, *ListUserChangesRequest) (*ListUserChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserChanges not implemented")
}
func (UnimplementedManagementServiceServer) IsUserUnique(context.Context, *IsUserUniqueRequest) (*IsUserUniqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserUnique not implemented")
}
func (UnimplementedManagementServiceServer) AddHumanUser(context.Context, *AddHumanUserRequest) (*AddHumanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHumanUser not implemented")
}
func (UnimplementedManagementServiceServer) ImportHumanUser(context.Context, *ImportHumanUserRequest) (*ImportHumanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportHumanUser not implemented")
}
func (UnimplementedManagementServiceServer) AddMachineUser(context.Context, *AddMachineUserRequest) (*AddMachineUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachineUser not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUser not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateUser(context.Context, *ReactivateUserRequest) (*ReactivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateUser not implemented")
}
func (UnimplementedManagementServiceServer) LockUser(context.Context, *LockUserRequest) (*LockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockUser not implemented")
}
func (UnimplementedManagementServiceServer) UnlockUser(context.Context, *UnlockUserRequest) (*UnlockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockUser not implemented")
}
func (UnimplementedManagementServiceServer) RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedManagementServiceServer) UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedManagementServiceServer) SetUserMetadata(context.Context, *SetUserMetadataRequest) (*SetUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserMetadata not implemented")
}
func (UnimplementedManagementServiceServer) BulkSetUserMetadata(context.Context, *BulkSetUserMetadataRequest) (*BulkSetUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkSetUserMetadata not implemented")
}
func (UnimplementedManagementServiceServer) ListUserMetadata(context.Context, *ListUserMetadataRequest) (*ListUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMetadata not implemented")
}
func (UnimplementedManagementServiceServer) GetUserMetadata(context.Context, *GetUserMetadataRequest) (*GetUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMetadata not implemented")
}
func (UnimplementedManagementServiceServer) RemoveUserMetadata(context.Context, *RemoveUserMetadataRequest) (*RemoveUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserMetadata not implemented")
}
func (UnimplementedManagementServiceServer) BulkRemoveUserMetadata(context.Context, *BulkRemoveUserMetadataRequest) (*BulkRemoveUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkRemoveUserMetadata not implemented")
}
func (UnimplementedManagementServiceServer) GetHumanProfile(context.Context, *GetHumanProfileRequest) (*GetHumanProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHumanProfile not implemented")
}
func (UnimplementedManagementServiceServer) UpdateHumanProfile(context.Context, *UpdateHumanProfileRequest) (*UpdateHumanProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHumanProfile not implemented")
}
func (UnimplementedManagementServiceServer) GetHumanEmail(context.Context, *GetHumanEmailRequest) (*GetHumanEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHumanEmail not implemented")
}
func (UnimplementedManagementServiceServer) UpdateHumanEmail(context.Context, *UpdateHumanEmailRequest) (*UpdateHumanEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHumanEmail not implemented")
}
func (UnimplementedManagementServiceServer) ResendHumanInitialization(context.Context, *ResendHumanInitializationRequest) (*ResendHumanInitializationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendHumanInitialization not implemented")
}
func (UnimplementedManagementServiceServer) ResendHumanEmailVerification(context.Context, *ResendHumanEmailVerificationRequest) (*ResendHumanEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendHumanEmailVerification not implemented")
}
func (UnimplementedManagementServiceServer) GetHumanPhone(context.Context, *GetHumanPhoneRequest) (*GetHumanPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHumanPhone not implemented")
}
func (UnimplementedManagementServiceServer) UpdateHumanPhone(context.Context, *UpdateHumanPhoneRequest) (*UpdateHumanPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHumanPhone not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanPhone(context.Context, *RemoveHumanPhoneRequest) (*RemoveHumanPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanPhone not implemented")
}
func (UnimplementedManagementServiceServer) ResendHumanPhoneVerification(context.Context, *ResendHumanPhoneVerificationRequest) (*ResendHumanPhoneVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendHumanPhoneVerification not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanAvatar(context.Context, *RemoveHumanAvatarRequest) (*RemoveHumanAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanAvatar not implemented")
}
func (UnimplementedManagementServiceServer) SetHumanInitialPassword(context.Context, *SetHumanInitialPasswordRequest) (*SetHumanInitialPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHumanInitialPassword not implemented")
}
func (UnimplementedManagementServiceServer) SetHumanPassword(context.Context, *SetHumanPasswordRequest) (*SetHumanPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHumanPassword not implemented")
}
func (UnimplementedManagementServiceServer) SendHumanResetPasswordNotification(context.Context, *SendHumanResetPasswordNotificationRequest) (*SendHumanResetPasswordNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHumanResetPasswordNotification not implemented")
}
func (UnimplementedManagementServiceServer) ListHumanAuthFactors(context.Context, *ListHumanAuthFactorsRequest) (*ListHumanAuthFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHumanAuthFactors not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanAuthFactorOTP(context.Context, *RemoveHumanAuthFactorOTPRequest) (*RemoveHumanAuthFactorOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanAuthFactorOTP not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanAuthFactorU2F(context.Context, *RemoveHumanAuthFactorU2FRequest) (*RemoveHumanAuthFactorU2FResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanAuthFactorU2F not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanAuthFactorOTPSMS(context.Context, *RemoveHumanAuthFactorOTPSMSRequest) (*RemoveHumanAuthFactorOTPSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanAuthFactorOTPSMS not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanAuthFactorOTPEmail(context.Context, *RemoveHumanAuthFactorOTPEmailRequest) (*RemoveHumanAuthFactorOTPEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanAuthFactorOTPEmail not implemented")
}
func (UnimplementedManagementServiceServer) ListHumanPasswordless(context.Context, *ListHumanPasswordlessRequest) (*ListHumanPasswordlessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHumanPasswordless not implemented")
}
func (UnimplementedManagementServiceServer) AddPasswordlessRegistration(context.Context, *AddPasswordlessRegistrationRequest) (*AddPasswordlessRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPasswordlessRegistration not implemented")
}
func (UnimplementedManagementServiceServer) SendPasswordlessRegistration(context.Context, *SendPasswordlessRegistrationRequest) (*SendPasswordlessRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordlessRegistration not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanPasswordless(context.Context, *RemoveHumanPasswordlessRequest) (*RemoveHumanPasswordlessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanPasswordless not implemented")
}
func (UnimplementedManagementServiceServer) UpdateMachine(context.Context, *UpdateMachineRequest) (*UpdateMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachine not implemented")
}
func (UnimplementedManagementServiceServer) GenerateMachineSecret(context.Context, *GenerateMachineSecretRequest) (*GenerateMachineSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMachineSecret not implemented")
}
func (UnimplementedManagementServiceServer) RemoveMachineSecret(context.Context, *RemoveMachineSecretRequest) (*RemoveMachineSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMachineSecret not implemented")
}
func (UnimplementedManagementServiceServer) GetMachineKeyByIDs(context.Context, *GetMachineKeyByIDsRequest) (*GetMachineKeyByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineKeyByIDs not implemented")
}
func (UnimplementedManagementServiceServer) ListMachineKeys(context.Context, *ListMachineKeysRequest) (*ListMachineKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineKeys not implemented")
}
func (UnimplementedManagementServiceServer) AddMachineKey(context.Context, *AddMachineKeyRequest) (*AddMachineKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachineKey not implemented")
}
func (UnimplementedManagementServiceServer) RemoveMachineKey(context.Context, *RemoveMachineKeyRequest) (*RemoveMachineKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMachineKey not implemented")
}
func (UnimplementedManagementServiceServer) GetPersonalAccessTokenByIDs(context.Context, *GetPersonalAccessTokenByIDsRequest) (*GetPersonalAccessTokenByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAccessTokenByIDs not implemented")
}
func (UnimplementedManagementServiceServer) ListPersonalAccessTokens(context.Context, *ListPersonalAccessTokensRequest) (*ListPersonalAccessTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonalAccessTokens not implemented")
}
func (UnimplementedManagementServiceServer) AddPersonalAccessToken(context.Context, *AddPersonalAccessTokenRequest) (*AddPersonalAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPersonalAccessToken not implemented")
}
func (UnimplementedManagementServiceServer) RemovePersonalAccessToken(context.Context, *RemovePersonalAccessTokenRequest) (*RemovePersonalAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePersonalAccessToken not implemented")
}
func (UnimplementedManagementServiceServer) ListHumanLinkedIDPs(context.Context, *ListHumanLinkedIDPsRequest) (*ListHumanLinkedIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHumanLinkedIDPs not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanLinkedIDP(context.Context, *RemoveHumanLinkedIDPRequest) (*RemoveHumanLinkedIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanLinkedIDP not implemented")
}
func (UnimplementedManagementServiceServer) ListUserMemberships(context.Context, *ListUserMembershipsRequest) (*ListUserMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMemberships not implemented")
}
func (UnimplementedManagementServiceServer) GetMyOrg(context.Context, *GetMyOrgRequest) (*GetMyOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyOrg not implemented")
}
func (UnimplementedManagementServiceServer) GetOrgByDomainGlobal(context.Context, *GetOrgByDomainGlobalRequest) (*GetOrgByDomainGlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByDomainGlobal not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgChanges(context.Context, *ListOrgChangesRequest) (*ListOrgChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgChanges not implemented")
}
func (UnimplementedManagementServiceServer) AddOrg(context.Context, *AddOrgRequest) (*AddOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrg not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOrg(context.Context, *UpdateOrgRequest) (*UpdateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateOrg(context.Context, *DeactivateOrgRequest) (*DeactivateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateOrg not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateOrg(context.Context, *ReactivateOrgRequest) (*ReactivateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateOrg not implemented")
}
func (UnimplementedManagementServiceServer) RemoveOrg(context.Context, *RemoveOrgRequest) (*RemoveOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrg not implemented")
}
func (UnimplementedManagementServiceServer) SetOrgMetadata(context.Context, *SetOrgMetadataRequest) (*SetOrgMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgMetadata not implemented")
}
func (UnimplementedManagementServiceServer) BulkSetOrgMetadata(context.Context, *BulkSetOrgMetadataRequest) (*BulkSetOrgMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkSetOrgMetadata not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgMetadata(context.Context, *ListOrgMetadataRequest) (*ListOrgMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgMetadata not implemented")
}
func (UnimplementedManagementServiceServer) GetOrgMetadata(context.Context, *GetOrgMetadataRequest) (*GetOrgMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgMetadata not implemented")
}
func (UnimplementedManagementServiceServer) RemoveOrgMetadata(context.Context, *RemoveOrgMetadataRequest) (*RemoveOrgMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgMetadata not implemented")
}
func (UnimplementedManagementServiceServer) BulkRemoveOrgMetadata(context.Context, *BulkRemoveOrgMetadataRequest) (*BulkRemoveOrgMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkRemoveOrgMetadata not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgDomains(context.Context, *ListOrgDomainsRequest) (*ListOrgDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgDomains not implemented")
}
func (UnimplementedManagementServiceServer) AddOrgDomain(context.Context, *AddOrgDomainRequest) (*AddOrgDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgDomain not implemented")
}
func (UnimplementedManagementServiceServer) RemoveOrgDomain(context.Context, *RemoveOrgDomainRequest) (*RemoveOrgDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgDomain not implemented")
}
func (UnimplementedManagementServiceServer) GenerateOrgDomainValidation(context.Context, *GenerateOrgDomainValidationRequest) (*GenerateOrgDomainValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOrgDomainValidation not implemented")
}
func (UnimplementedManagementServiceServer) ValidateOrgDomain(context.Context, *ValidateOrgDomainRequest) (*ValidateOrgDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrgDomain not implemented")
}
func (UnimplementedManagementServiceServer) SetPrimaryOrgDomain(context.Context, *SetPrimaryOrgDomainRequest) (*SetPrimaryOrgDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrimaryOrgDomain not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgMemberRoles(context.Context, *ListOrgMemberRolesRequest) (*ListOrgMemberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgMemberRoles not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgMembers(context.Context, *ListOrgMembersRequest) (*ListOrgMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgMembers not implemented")
}
func (UnimplementedManagementServiceServer) AddOrgMember(context.Context, *AddOrgMemberRequest) (*AddOrgMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgMember not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOrgMember(context.Context, *UpdateOrgMemberRequest) (*UpdateOrgMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgMember not implemented")
}
func (UnimplementedManagementServiceServer) RemoveOrgMember(context.Context, *RemoveOrgMemberRequest) (*RemoveOrgMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgMember not implemented")
}
func (UnimplementedManagementServiceServer) GetProjectByID(context.Context, *GetProjectByIDRequest) (*GetProjectByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByID not implemented")
}
func (UnimplementedManagementServiceServer) GetGrantedProjectByID(context.Context, *GetGrantedProjectByIDRequest) (*GetGrantedProjectByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrantedProjectByID not implemented")
}
func (UnimplementedManagementServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedManagementServiceServer) ListGrantedProjects(context.Context, *ListGrantedProjectsRequest) (*ListGrantedProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrantedProjects not implemented")
}
func (UnimplementedManagementServiceServer) ListGrantedProjectRoles(context.Context, *ListGrantedProjectRolesRequest) (*ListGrantedProjectRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrantedProjectRoles not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectChanges(context.Context, *ListProjectChangesRequest) (*ListProjectChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectChanges not implemented")
}
func (UnimplementedManagementServiceServer) AddProject(context.Context, *AddProjectRequest) (*AddProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProject not implemented")
}
func (UnimplementedManagementServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateProject(context.Context, *DeactivateProjectRequest) (*DeactivateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateProject not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateProject(context.Context, *ReactivateProjectRequest) (*ReactivateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateProject not implemented")
}
func (UnimplementedManagementServiceServer) RemoveProject(context.Context, *RemoveProjectRequest) (*RemoveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProject not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectRoles(context.Context, *ListProjectRolesRequest) (*ListProjectRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectRoles not implemented")
}
func (UnimplementedManagementServiceServer) AddProjectRole(context.Context, *AddProjectRoleRequest) (*AddProjectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectRole not implemented")
}
func (UnimplementedManagementServiceServer) BulkAddProjectRoles(context.Context, *BulkAddProjectRolesRequest) (*BulkAddProjectRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAddProjectRoles not implemented")
}
func (UnimplementedManagementServiceServer) UpdateProjectRole(context.Context, *UpdateProjectRoleRequest) (*UpdateProjectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectRole not implemented")
}
func (UnimplementedManagementServiceServer) RemoveProjectRole(context.Context, *RemoveProjectRoleRequest) (*RemoveProjectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectRole not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectMemberRoles(context.Context, *ListProjectMemberRolesRequest) (*ListProjectMemberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectMemberRoles not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectMembers(context.Context, *ListProjectMembersRequest) (*ListProjectMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectMembers not implemented")
}
func (UnimplementedManagementServiceServer) AddProjectMember(context.Context, *AddProjectMemberRequest) (*AddProjectMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectMember not implemented")
}
func (UnimplementedManagementServiceServer) UpdateProjectMember(context.Context, *UpdateProjectMemberRequest) (*UpdateProjectMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectMember not implemented")
}
func (UnimplementedManagementServiceServer) RemoveProjectMember(context.Context, *RemoveProjectMemberRequest) (*RemoveProjectMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectMember not implemented")
}
func (UnimplementedManagementServiceServer) GetAppByID(context.Context, *GetAppByIDRequest) (*GetAppByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByID not implemented")
}
func (UnimplementedManagementServiceServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedManagementServiceServer) ListAppChanges(context.Context, *ListAppChangesRequest) (*ListAppChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppChanges not implemented")
}
func (UnimplementedManagementServiceServer) AddOIDCApp(context.Context, *AddOIDCAppRequest) (*AddOIDCAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOIDCApp not implemented")
}
func (UnimplementedManagementServiceServer) AddSAMLApp(context.Context, *AddSAMLAppRequest) (*AddSAMLAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSAMLApp not implemented")
}
func (UnimplementedManagementServiceServer) AddAPIApp(context.Context, *AddAPIAppRequest) (*AddAPIAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAPIApp not implemented")
}
func (UnimplementedManagementServiceServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOIDCAppConfig(context.Context, *UpdateOIDCAppConfigRequest) (*UpdateOIDCAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOIDCAppConfig not implemented")
}
func (UnimplementedManagementServiceServer) UpdateSAMLAppConfig(context.Context, *UpdateSAMLAppConfigRequest) (*UpdateSAMLAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSAMLAppConfig not implemented")
}
func (UnimplementedManagementServiceServer) UpdateAPIAppConfig(context.Context, *UpdateAPIAppConfigRequest) (*UpdateAPIAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIAppConfig not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateApp(context.Context, *DeactivateAppRequest) (*DeactivateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateApp not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateApp(context.Context, *ReactivateAppRequest) (*ReactivateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateApp not implemented")
}
func (UnimplementedManagementServiceServer) RemoveApp(context.Context, *RemoveAppRequest) (*RemoveAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApp not implemented")
}
func (UnimplementedManagementServiceServer) RegenerateOIDCClientSecret(context.Context, *RegenerateOIDCClientSecretRequest) (*RegenerateOIDCClientSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateOIDCClientSecret not implemented")
}
func (UnimplementedManagementServiceServer) RegenerateAPIClientSecret(context.Context, *RegenerateAPIClientSecretRequest) (*RegenerateAPIClientSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateAPIClientSecret not implemented")
}
func (UnimplementedManagementServiceServer) GetAppKey(context.Context, *GetAppKeyRequest) (*GetAppKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppKey not implemented")
}
func (UnimplementedManagementServiceServer) ListAppKeys(context.Context, *ListAppKeysRequest) (*ListAppKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppKeys not implemented")
}
func (UnimplementedManagementServiceServer) AddAppKey(context.Context, *AddAppKeyRequest) (*AddAppKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppKey not implemented")
}
func (UnimplementedManagementServiceServer) RemoveAppKey(context.Context, *RemoveAppKeyRequest) (*RemoveAppKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppKey not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectGrantChanges(context.Context, *ListProjectGrantChangesRequest) (*ListProjectGrantChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGrantChanges not implemented")
}
func (UnimplementedManagementServiceServer) GetProjectGrantByID(context.Context, *GetProjectGrantByIDRequest) (*GetProjectGrantByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectGrantByID not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectGrants(context.Context, *ListProjectGrantsRequest) (*ListProjectGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGrants not implemented")
}
func (UnimplementedManagementServiceServer) ListAllProjectGrants(context.Context, *ListAllProjectGrantsRequest) (*ListAllProjectGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllProjectGrants not implemented")
}
func (UnimplementedManagementServiceServer) AddProjectGrant(context.Context, *AddProjectGrantRequest) (*AddProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectGrant not implemented")
}
func (UnimplementedManagementServiceServer) UpdateProjectGrant(context.Context, *UpdateProjectGrantRequest) (*UpdateProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectGrant not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateProjectGrant(context.Context, *DeactivateProjectGrantRequest) (*DeactivateProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateProjectGrant not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateProjectGrant(context.Context, *ReactivateProjectGrantRequest) (*ReactivateProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateProjectGrant not implemented")
}
func (UnimplementedManagementServiceServer) RemoveProjectGrant(context.Context, *RemoveProjectGrantRequest) (*RemoveProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectGrant not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectGrantMemberRoles(context.Context, *ListProjectGrantMemberRolesRequest) (*ListProjectGrantMemberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGrantMemberRoles not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectGrantMembers(context.Context, *ListProjectGrantMembersRequest) (*ListProjectGrantMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGrantMembers not implemented")
}
func (UnimplementedManagementServiceServer) AddProjectGrantMember(context.Context, *AddProjectGrantMemberRequest) (*AddProjectGrantMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectGrantMember not implemented")
}
func (UnimplementedManagementServiceServer) UpdateProjectGrantMember(context.Context, *UpdateProjectGrantMemberRequest) (*UpdateProjectGrantMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectGrantMember not implemented")
}
func (UnimplementedManagementServiceServer) RemoveProjectGrantMember(context.Context, *RemoveProjectGrantMemberRequest) (*RemoveProjectGrantMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectGrantMember not implemented")
}
func (UnimplementedManagementServiceServer) GetUserGrantByID(context.Context, *GetUserGrantByIDRequest) (*GetUserGrantByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGrantByID not implemented")
}
func (UnimplementedManagementServiceServer) ListUserGrants(context.Context, *ListUserGrantRequest) (*ListUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGrants not implemented")
}
func (UnimplementedManagementServiceServer) AddUserGrant(context.Context, *AddUserGrantRequest) (*AddUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) UpdateUserGrant(context.Context, *UpdateUserGrantRequest) (*UpdateUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateUserGrant(context.Context, *DeactivateUserGrantRequest) (*DeactivateUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateUserGrant(context.Context, *ReactivateUserGrantRequest) (*ReactivateUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) RemoveUserGrant(context.Context, *RemoveUserGrantRequest) (*RemoveUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) BulkRemoveUserGrant(context.Context, *BulkRemoveUserGrantRequest) (*BulkRemoveUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkRemoveUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) GetOrgIAMPolicy(context.Context, *GetOrgIAMPolicyRequest) (*GetOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgIAMPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDomainPolicy(context.Context, *GetDomainPolicyRequest) (*GetDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetLoginPolicy(context.Context, *GetLoginPolicyRequest) (*GetLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultLoginPolicy(context.Context, *GetDefaultLoginPolicyRequest) (*GetDefaultLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomLoginPolicy(context.Context, *AddCustomLoginPolicyRequest) (*AddCustomLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomLoginPolicy(context.Context, *UpdateCustomLoginPolicyRequest) (*UpdateCustomLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetLoginPolicyToDefault(context.Context, *ResetLoginPolicyToDefaultRequest) (*ResetLoginPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetLoginPolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) ListLoginPolicyIDPs(context.Context, *ListLoginPolicyIDPsRequest) (*ListLoginPolicyIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicyIDPs not implemented")
}
func (UnimplementedManagementServiceServer) AddIDPToLoginPolicy(context.Context, *AddIDPToLoginPolicyRequest) (*AddIDPToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIDPToLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) RemoveIDPFromLoginPolicy(context.Context, *RemoveIDPFromLoginPolicyRequest) (*RemoveIDPFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIDPFromLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ListLoginPolicySecondFactors(context.Context, *ListLoginPolicySecondFactorsRequest) (*ListLoginPolicySecondFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicySecondFactors not implemented")
}
func (UnimplementedManagementServiceServer) AddSecondFactorToLoginPolicy(context.Context, *AddSecondFactorToLoginPolicyRequest) (*AddSecondFactorToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecondFactorToLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) RemoveSecondFactorFromLoginPolicy(context.Context, *RemoveSecondFactorFromLoginPolicyRequest) (*RemoveSecondFactorFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSecondFactorFromLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ListLoginPolicyMultiFactors(context.Context, *ListLoginPolicyMultiFactorsRequest) (*ListLoginPolicyMultiFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicyMultiFactors not implemented")
}
func (UnimplementedManagementServiceServer) AddMultiFactorToLoginPolicy(context.Context, *AddMultiFactorToLoginPolicyRequest) (*AddMultiFactorToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiFactorToLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) RemoveMultiFactorFromLoginPolicy(context.Context, *RemoveMultiFactorFromLoginPolicyRequest) (*RemoveMultiFactorFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMultiFactorFromLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetPasswordComplexityPolicy(context.Context, *GetPasswordComplexityPolicyRequest) (*GetPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordComplexityPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultPasswordComplexityPolicy(context.Context, *GetDefaultPasswordComplexityPolicyRequest) (*GetDefaultPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordComplexityPolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomPasswordComplexityPolicy(context.Context, *AddCustomPasswordComplexityPolicyRequest) (*AddCustomPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomPasswordComplexityPolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomPasswordComplexityPolicy(context.Context, *UpdateCustomPasswordComplexityPolicyRequest) (*UpdateCustomPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomPasswordComplexityPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetPasswordComplexityPolicyToDefault(context.Context, *ResetPasswordComplexityPolicyToDefaultRequest) (*ResetPasswordComplexityPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordComplexityPolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetPasswordAgePolicy(context.Context, *GetPasswordAgePolicyRequest) (*GetPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordAgePolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultPasswordAgePolicy(context.Context, *GetDefaultPasswordAgePolicyRequest) (*GetDefaultPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordAgePolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomPasswordAgePolicy(context.Context, *AddCustomPasswordAgePolicyRequest) (*AddCustomPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomPasswordAgePolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomPasswordAgePolicy(context.Context, *UpdateCustomPasswordAgePolicyRequest) (*UpdateCustomPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomPasswordAgePolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetPasswordAgePolicyToDefault(context.Context, *ResetPasswordAgePolicyToDefaultRequest) (*ResetPasswordAgePolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordAgePolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetLockoutPolicy(context.Context, *GetLockoutPolicyRequest) (*GetLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockoutPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultLockoutPolicy(context.Context, *GetDefaultLockoutPolicyRequest) (*GetDefaultLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLockoutPolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomLockoutPolicy(context.Context, *AddCustomLockoutPolicyRequest) (*AddCustomLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomLockoutPolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomLockoutPolicy(context.Context, *UpdateCustomLockoutPolicyRequest) (*UpdateCustomLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomLockoutPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetLockoutPolicyToDefault(context.Context, *ResetLockoutPolicyToDefaultRequest) (*ResetLockoutPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetLockoutPolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetPrivacyPolicy(context.Context, *GetPrivacyPolicyRequest) (*GetPrivacyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivacyPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultPrivacyPolicy(context.Context, *GetDefaultPrivacyPolicyRequest) (*GetDefaultPrivacyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPrivacyPolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomPrivacyPolicy(context.Context, *AddCustomPrivacyPolicyRequest) (*AddCustomPrivacyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomPrivacyPolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomPrivacyPolicy(context.Context, *UpdateCustomPrivacyPolicyRequest) (*UpdateCustomPrivacyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomPrivacyPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetPrivacyPolicyToDefault(context.Context, *ResetPrivacyPolicyToDefaultRequest) (*ResetPrivacyPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPrivacyPolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetNotificationPolicy(context.Context, *GetNotificationPolicyRequest) (*GetNotificationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultNotificationPolicy(context.Context, *GetDefaultNotificationPolicyRequest) (*GetDefaultNotificationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultNotificationPolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomNotificationPolicy(context.Context, *AddCustomNotificationPolicyRequest) (*AddCustomNotificationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomNotificationPolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomNotificationPolicy(context.Context, *UpdateCustomNotificationPolicyRequest) (*UpdateCustomNotificationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomNotificationPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetNotificationPolicyToDefault(context.Context, *ResetNotificationPolicyToDefaultRequest) (*ResetNotificationPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetNotificationPolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetLabelPolicy(context.Context, *GetLabelPolicyRequest) (*GetLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetPreviewLabelPolicy(context.Context, *GetPreviewLabelPolicyRequest) (*GetPreviewLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviewLabelPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultLabelPolicy(context.Context, *GetDefaultLabelPolicyRequest) (*GetDefaultLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLabelPolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomLabelPolicy(context.Context, *AddCustomLabelPolicyRequest) (*AddCustomLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomLabelPolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomLabelPolicy(context.Context, *UpdateCustomLabelPolicyRequest) (*UpdateCustomLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomLabelPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ActivateCustomLabelPolicy(context.Context, *ActivateCustomLabelPolicyRequest) (*ActivateCustomLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateCustomLabelPolicy not implemented")
}
func (UnimplementedManagementServiceServer) RemoveCustomLabelPolicyLogo(context.Context, *RemoveCustomLabelPolicyLogoRequest) (*RemoveCustomLabelPolicyLogoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomLabelPolicyLogo not implemented")
}
func (UnimplementedManagementServiceServer) RemoveCustomLabelPolicyLogoDark(context.Context, *RemoveCustomLabelPolicyLogoDarkRequest) (*RemoveCustomLabelPolicyLogoDarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomLabelPolicyLogoDark not implemented")
}
func (UnimplementedManagementServiceServer) RemoveCustomLabelPolicyIcon(context.Context, *RemoveCustomLabelPolicyIconRequest) (*RemoveCustomLabelPolicyIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomLabelPolicyIcon not implemented")
}
func (UnimplementedManagementServiceServer) RemoveCustomLabelPolicyIconDark(context.Context, *RemoveCustomLabelPolicyIconDarkRequest) (*RemoveCustomLabelPolicyIconDarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomLabelPolicyIconDark not implemented")
}
func (UnimplementedManagementServiceServer) RemoveCustomLabelPolicyFont(context.Context, *RemoveCustomLabelPolicyFontRequest) (*RemoveCustomLabelPolicyFontResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomLabelPolicyFont not implemented")
}
func (UnimplementedManagementServiceServer) ResetLabelPolicyToDefault(context.Context, *ResetLabelPolicyToDefaultRequest) (*ResetLabelPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetLabelPolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetCustomInitMessageText(context.Context, *GetCustomInitMessageTextRequest) (*GetCustomInitMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomInitMessageText not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultInitMessageText(context.Context, *GetDefaultInitMessageTextRequest) (*GetDefaultInitMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultInitMessageText not implemented")
}
func (UnimplementedManagementServiceServer) SetCustomInitMessageText(context.Context, *SetCustomInitMessageTextRequest) (*SetCustomInitMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomInitMessageText not implemented")
}
func (UnimplementedManagementServiceServer) ResetCustomInitMessageTextToDefault(context.Context, *ResetCustomInitMessageTextToDefaultRequest) (*ResetCustomInitMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomInitMessageTextToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetCustomPasswordResetMessageText(context.Context, *GetCustomPasswordResetMessageTextRequest) (*GetCustomPasswordResetMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomPasswordResetMessageText not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultPasswordResetMessageText(context.Context, *GetDefaultPasswordResetMessageTextRequest) (*GetDefaultPasswordResetMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordResetMessageText not implemented")
}
func (UnimplementedManagementServiceServer) SetCustomPasswordResetMessageText(context.Context, *SetCustomPasswordResetMessageTextRequest) (*SetCustomPasswordResetMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomPasswordResetMessageText not implemented")
}
func (UnimplementedManagementServiceServer) ResetCustomPasswordResetMessageTextToDefault(context.Context, *ResetCustomPasswordResetMessageTextToDefaultRequest) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomPasswordResetMessageTextToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetCustomVerifyEmailMessageText(context.Context, *GetCustomVerifyEmailMessageTextRequest) (*GetCustomVerifyEmailMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVerifyEmailMessageText not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultVerifyEmailMessageText(context.Context, *GetDefaultVerifyEmailMessageTextRequest) (*GetDefaultVerifyEmailMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVerifyEmailMessageText not implemented")
}
func (UnimplementedManagementServiceServer) SetCustomVerifyEmailMessageText(context.Context, *SetCustomVerifyEmailMessageTextRequest) (*SetCustomVerifyEmailMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomVerifyEmailMessageText not implemented")
}
func (UnimplementedManagementServiceServer) ResetCustomVerifyEmailMessageTextToDefault(context.Context, *ResetCustomVerifyEmailMessageTextToDefaultRequest) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomVerifyEmailMessageTextToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetCustomVerifyPhoneMessageText(context.Context, *GetCustomVerifyPhoneMessageTextRequest) (*GetCustomVerifyPhoneMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVerifyPhoneMessageText not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultVerifyPhoneMessageText(context.Context, *GetDefaultVerifyPhoneMessageTextRequest) (*GetDefaultVerifyPhoneMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVerifyPhoneMessageText not implemented")
}
func (UnimplementedManagementServiceServer) SetCustomVerifyPhoneMessageText(context.Context, *SetCustomVerifyPhoneMessageTextRequest) (*SetCustomVerifyPhoneMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomVerifyPhoneMessageText not implemented")
}
func (UnimplementedManagementServiceServer) ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *ResetCustomVerifyPhoneMessageTextToDefaultRequest) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomVerifyPhoneMessageTextToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetCustomVerifySMSOTPMessageText(context.Context, *GetCustomVerifySMSOTPMessageTextRequest) (*GetCustomVerifySMSOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVerifySMSOTPMessageText not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultVerifySMSOTPMessageText(context.Context, *GetDefaultVerifySMSOTPMessageTextRequest) (*GetDefaultVerifySMSOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVerifySMSOTPMessageText not implemented")
}
func (UnimplementedManagementServiceServer) SetCustomVerifySMSOTPMessageText(context.Context, *SetCustomVerifySMSOTPMessageTextRequest) (*SetCustomVerifySMSOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomVerifySMSOTPMessageText not implemented")
}
func (UnimplementedManagementServiceServer) ResetCustomVerifySMSOTPMessageTextToDefault(context.Context, *ResetCustomVerifySMSOTPMessageTextToDefaultRequest) (*ResetCustomVerifySMSOTPMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomVerifySMSOTPMessageTextToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetCustomVerifyEmailOTPMessageText(context.Context, *GetCustomVerifyEmailOTPMessageTextRequest) (*GetCustomVerifyEmailOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVerifyEmailOTPMessageText not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultVerifyEmailOTPMessageText(context.Context, *GetDefaultVerifyEmailOTPMessageTextRequest) (*GetDefaultVerifyEmailOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVerifyEmailOTPMessageText not implemented")
}
func (UnimplementedManagementServiceServer) SetCustomVerifyEmailOTPMessageText(context.Context, *SetCustomVerifyEmailOTPMessageTextRequest) (*SetCustomVerifyEmailOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomVerifyEmailOTPMessageText not implemented")
}
func (UnimplementedManagementServiceServer) ResetCustomVerifyEmailOTPMessageTextToDefault(context.Context, *ResetCustomVerifyEmailOTPMessageTextToDefaultRequest) (*ResetCustomVerifyEmailOTPMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomVerifyEmailOTPMessageTextToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetCustomDomainClaimedMessageText(context.Context, *GetCustomDomainClaimedMessageTextRequest) (*GetCustomDomainClaimedMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomDomainClaimedMessageText not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultDomainClaimedMessageText(context.Context, *GetDefaultDomainClaimedMessageTextRequest) (*GetDefaultDomainClaimedMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultDomainClaimedMessageText not implemented")
}
func (UnimplementedManagementServiceServer) SetCustomDomainClaimedMessageCustomText(context.Context, *SetCustomDomainClaimedMessageTextRequest) (*SetCustomDomainClaimedMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomDomainClaimedMessageCustomText not implemented")
}
func (UnimplementedManagementServiceServer) ResetCustomDomainClaimedMessageTextToDefault(context.Context, *ResetCustomDomainClaimedMessageTextToDefaultRequest) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomDomainClaimedMessageTextToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetCustomPasswordlessRegistrationMessageText(context.Context, *GetCustomPasswordlessRegistrationMessageTextRequest) (*GetCustomPasswordlessRegistrationMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomPasswordlessRegistrationMessageText not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultPasswordlessRegistrationMessageText(context.Context, *GetDefaultPasswordlessRegistrationMessageTextRequest) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordlessRegistrationMessageText not implemented")
}
func (UnimplementedManagementServiceServer) SetCustomPasswordlessRegistrationMessageCustomText(context.Context, *SetCustomPasswordlessRegistrationMessageTextRequest) (*SetCustomPasswordlessRegistrationMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomPasswordlessRegistrationMessageCustomText not implemented")
}
func (UnimplementedManagementServiceServer) ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomPasswordlessRegistrationMessageTextToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetCustomPasswordChangeMessageText(context.Context, *GetCustomPasswordChangeMessageTextRequest) (*GetCustomPasswordChangeMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomPasswordChangeMessageText not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultPasswordChangeMessageText(context.Context, *GetDefaultPasswordChangeMessageTextRequest) (*GetDefaultPasswordChangeMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordChangeMessageText not implemented")
}
func (UnimplementedManagementServiceServer) SetCustomPasswordChangeMessageCustomText(context.Context, *SetCustomPasswordChangeMessageTextRequest) (*SetCustomPasswordChangeMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomPasswordChangeMessageCustomText not implemented")
}
func (UnimplementedManagementServiceServer) ResetCustomPasswordChangeMessageTextToDefault(context.Context, *ResetCustomPasswordChangeMessageTextToDefaultRequest) (*ResetCustomPasswordChangeMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomPasswordChangeMessageTextToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetCustomLoginTexts(context.Context, *GetCustomLoginTextsRequest) (*GetCustomLoginTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomLoginTexts not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultLoginTexts(context.Context, *GetDefaultLoginTextsRequest) (*GetDefaultLoginTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLoginTexts not implemented")
}
func (UnimplementedManagementServiceServer) SetCustomLoginText(context.Context, *SetCustomLoginTextsRequest) (*SetCustomLoginTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomLoginText not implemented")
}
func (UnimplementedManagementServiceServer) ResetCustomLoginTextToDefault(context.Context, *ResetCustomLoginTextsToDefaultRequest) (*ResetCustomLoginTextsToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomLoginTextToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetOrgIDPByID(context.Context, *GetOrgIDPByIDRequest) (*GetOrgIDPByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgIDPByID not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgIDPs(context.Context, *ListOrgIDPsRequest) (*ListOrgIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgIDPs not implemented")
}
func (UnimplementedManagementServiceServer) AddOrgOIDCIDP(context.Context, *AddOrgOIDCIDPRequest) (*AddOrgOIDCIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgOIDCIDP not implemented")
}
func (UnimplementedManagementServiceServer) AddOrgJWTIDP(context.Context, *AddOrgJWTIDPRequest) (*AddOrgJWTIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgJWTIDP not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateOrgIDP(context.Context, *DeactivateOrgIDPRequest) (*DeactivateOrgIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateOrgIDP not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateOrgIDP(context.Context, *ReactivateOrgIDPRequest) (*ReactivateOrgIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateOrgIDP not implemented")
}
func (UnimplementedManagementServiceServer) RemoveOrgIDP(context.Context, *RemoveOrgIDPRequest) (*RemoveOrgIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgIDP not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOrgIDP(context.Context, *UpdateOrgIDPRequest) (*UpdateOrgIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgIDP not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOrgIDPOIDCConfig(context.Context, *UpdateOrgIDPOIDCConfigRequest) (*UpdateOrgIDPOIDCConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgIDPOIDCConfig not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOrgIDPJWTConfig(context.Context, *UpdateOrgIDPJWTConfigRequest) (*UpdateOrgIDPJWTConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgIDPJWTConfig not implemented")
}
func (UnimplementedManagementServiceServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedManagementServiceServer) GetProviderByID(context.Context, *GetProviderByIDRequest) (*GetProviderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderByID not implemented")
}
func (UnimplementedManagementServiceServer) AddGenericOAuthProvider(context.Context, *AddGenericOAuthProviderRequest) (*AddGenericOAuthProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenericOAuthProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateGenericOAuthProvider(context.Context, *UpdateGenericOAuthProviderRequest) (*UpdateGenericOAuthProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenericOAuthProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddGenericOIDCProvider(context.Context, *AddGenericOIDCProviderRequest) (*AddGenericOIDCProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenericOIDCProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateGenericOIDCProvider(context.Context, *UpdateGenericOIDCProviderRequest) (*UpdateGenericOIDCProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenericOIDCProvider not implemented")
}
func (UnimplementedManagementServiceServer) MigrateGenericOIDCProvider(context.Context, *MigrateGenericOIDCProviderRequest) (*MigrateGenericOIDCProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateGenericOIDCProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddJWTProvider(context.Context, *AddJWTProviderRequest) (*AddJWTProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJWTProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateJWTProvider(context.Context, *UpdateJWTProviderRequest) (*UpdateJWTProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJWTProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddAzureADProvider(context.Context, *AddAzureADProviderRequest) (*AddAzureADProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAzureADProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateAzureADProvider(context.Context, *UpdateAzureADProviderRequest) (*UpdateAzureADProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAzureADProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddGitHubProvider(context.Context, *AddGitHubProviderRequest) (*AddGitHubProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGitHubProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateGitHubProvider(context.Context, *UpdateGitHubProviderRequest) (*UpdateGitHubProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitHubProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddGitHubEnterpriseServerProvider(context.Context, *AddGitHubEnterpriseServerProviderRequest) (*AddGitHubEnterpriseServerProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGitHubEnterpriseServerProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateGitHubEnterpriseServerProvider(context.Context, *UpdateGitHubEnterpriseServerProviderRequest) (*UpdateGitHubEnterpriseServerProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitHubEnterpriseServerProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddGitLabProvider(context.Context, *AddGitLabProviderRequest) (*AddGitLabProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGitLabProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateGitLabProvider(context.Context, *UpdateGitLabProviderRequest) (*UpdateGitLabProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitLabProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddGitLabSelfHostedProvider(context.Context, *AddGitLabSelfHostedProviderRequest) (*AddGitLabSelfHostedProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGitLabSelfHostedProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateGitLabSelfHostedProvider(context.Context, *UpdateGitLabSelfHostedProviderRequest) (*UpdateGitLabSelfHostedProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitLabSelfHostedProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddGoogleProvider(context.Context, *AddGoogleProviderRequest) (*AddGoogleProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoogleProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateGoogleProvider(context.Context, *UpdateGoogleProviderRequest) (*UpdateGoogleProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoogleProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddLDAPProvider(context.Context, *AddLDAPProviderRequest) (*AddLDAPProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLDAPProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateLDAPProvider(context.Context, *UpdateLDAPProviderRequest) (*UpdateLDAPProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLDAPProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddAppleProvider(context.Context, *AddAppleProviderRequest) (*AddAppleProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppleProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateAppleProvider(context.Context, *UpdateAppleProviderRequest) (*UpdateAppleProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppleProvider not implemented")
}
func (UnimplementedManagementServiceServer) AddSAMLProvider(context.Context, *AddSAMLProviderRequest) (*AddSAMLProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSAMLProvider not implemented")
}
func (UnimplementedManagementServiceServer) UpdateSAMLProvider(context.Context, *UpdateSAMLProviderRequest) (*UpdateSAMLProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSAMLProvider not implemented")
}
func (UnimplementedManagementServiceServer) RegenerateSAMLProviderCertificate(context.Context, *RegenerateSAMLProviderCertificateRequest) (*RegenerateSAMLProviderCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateSAMLProviderCertificate not implemented")
}
func (UnimplementedManagementServiceServer) DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedManagementServiceServer) ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActions not implemented")
}
func (UnimplementedManagementServiceServer) GetAction(context.Context, *GetActionRequest) (*GetActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAction not implemented")
}
func (UnimplementedManagementServiceServer) CreateAction(context.Context, *CreateActionRequest) (*CreateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAction not implemented")
}
func (UnimplementedManagementServiceServer) UpdateAction(context.Context, *UpdateActionRequest) (*UpdateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAction not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateAction(context.Context, *DeactivateActionRequest) (*DeactivateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateAction not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateAction(context.Context, *ReactivateActionRequest) (*ReactivateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateAction not implemented")
}
func (UnimplementedManagementServiceServer) DeleteAction(context.Context, *DeleteActionRequest) (*DeleteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAction not implemented")
}
func (UnimplementedManagementServiceServer) ListFlowTypes(context.Context, *ListFlowTypesRequest) (*ListFlowTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlowTypes not implemented")
}
func (UnimplementedManagementServiceServer) ListFlowTriggerTypes(context.Context, *ListFlowTriggerTypesRequest) (*ListFlowTriggerTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlowTriggerTypes not implemented")
}
func (UnimplementedManagementServiceServer) GetFlow(context.Context, *GetFlowRequest) (*GetFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlow not implemented")
}
func (UnimplementedManagementServiceServer) ClearFlow(context.Context, *ClearFlowRequest) (*ClearFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearFlow not implemented")
}
func (UnimplementedManagementServiceServer) SetTriggerActions(context.Context, *SetTriggerActionsRequest) (*SetTriggerActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTriggerActions not implemented")
}
func (UnimplementedManagementServiceServer) mustEmbedUnimplementedManagementServiceServer() {}

// UnsafeManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServiceServer will
// result in compilation errors.
type UnsafeManagementServiceServer interface {
	mustEmbedUnimplementedManagementServiceServer()
}

func RegisterManagementServiceServer(s grpc.ServiceRegistrar, srv ManagementServiceServer) {
	s.RegisterService(&ManagementService_ServiceDesc, srv)
}

func _ManagementService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetOIDCInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOIDCInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetOIDCInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetOIDCInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetOIDCInformation(ctx, req.(*GetOIDCInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetIAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetIAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetIAM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetIAM(ctx, req.(*GetIAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetSupportedLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetSupportedLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetSupportedLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetSupportedLanguages(ctx, req.(*GetSupportedLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUserByLoginNameGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByLoginNameGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUserByLoginNameGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetUserByLoginNameGlobal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUserByLoginNameGlobal(ctx, req.(*GetUserByLoginNameGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListUserChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListUserChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListUserChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListUserChanges(ctx, req.(*ListUserChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_IsUserUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).IsUserUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/IsUserUnique",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).IsUserUnique(ctx, req.(*IsUserUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddHumanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHumanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddHumanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddHumanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddHumanUser(ctx, req.(*AddHumanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ImportHumanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportHumanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ImportHumanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ImportHumanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ImportHumanUser(ctx, req.(*ImportHumanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddMachineUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMachineUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddMachineUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddMachineUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddMachineUser(ctx, req.(*AddMachineUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateUser(ctx, req.(*DeactivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateUser(ctx, req.(*ReactivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_LockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).LockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/LockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).LockUser(ctx, req.(*LockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UnlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UnlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UnlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UnlockUser(ctx, req.(*UnlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateUserName(ctx, req.(*UpdateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetUserMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetUserMetadata(ctx, req.(*SetUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_BulkSetUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkSetUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).BulkSetUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/BulkSetUserMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).BulkSetUserMetadata(ctx, req.(*BulkSetUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListUserMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListUserMetadata(ctx, req.(*ListUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetUserMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUserMetadata(ctx, req.(*GetUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveUserMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveUserMetadata(ctx, req.(*RemoveUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_BulkRemoveUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRemoveUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).BulkRemoveUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/BulkRemoveUserMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).BulkRemoveUserMetadata(ctx, req.(*BulkRemoveUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetHumanProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumanProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetHumanProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetHumanProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetHumanProfile(ctx, req.(*GetHumanProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateHumanProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHumanProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateHumanProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateHumanProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateHumanProfile(ctx, req.(*UpdateHumanProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetHumanEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumanEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetHumanEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetHumanEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetHumanEmail(ctx, req.(*GetHumanEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateHumanEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHumanEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateHumanEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateHumanEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateHumanEmail(ctx, req.(*UpdateHumanEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResendHumanInitialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendHumanInitializationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResendHumanInitialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResendHumanInitialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResendHumanInitialization(ctx, req.(*ResendHumanInitializationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResendHumanEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendHumanEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResendHumanEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResendHumanEmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResendHumanEmailVerification(ctx, req.(*ResendHumanEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetHumanPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumanPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetHumanPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetHumanPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetHumanPhone(ctx, req.(*GetHumanPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateHumanPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHumanPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateHumanPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateHumanPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateHumanPhone(ctx, req.(*UpdateHumanPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanPhone(ctx, req.(*RemoveHumanPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResendHumanPhoneVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendHumanPhoneVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResendHumanPhoneVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResendHumanPhoneVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResendHumanPhoneVerification(ctx, req.(*ResendHumanPhoneVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanAvatar(ctx, req.(*RemoveHumanAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetHumanInitialPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHumanInitialPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetHumanInitialPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetHumanInitialPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetHumanInitialPassword(ctx, req.(*SetHumanInitialPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetHumanPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHumanPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetHumanPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetHumanPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetHumanPassword(ctx, req.(*SetHumanPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SendHumanResetPasswordNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendHumanResetPasswordNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SendHumanResetPasswordNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SendHumanResetPasswordNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SendHumanResetPasswordNotification(ctx, req.(*SendHumanResetPasswordNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListHumanAuthFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHumanAuthFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListHumanAuthFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListHumanAuthFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListHumanAuthFactors(ctx, req.(*ListHumanAuthFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanAuthFactorOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanAuthFactorOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorOTP(ctx, req.(*RemoveHumanAuthFactorOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanAuthFactorU2F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanAuthFactorU2FRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorU2F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorU2F",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorU2F(ctx, req.(*RemoveHumanAuthFactorU2FRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanAuthFactorOTPSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanAuthFactorOTPSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorOTPSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTPSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorOTPSMS(ctx, req.(*RemoveHumanAuthFactorOTPSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanAuthFactorOTPEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanAuthFactorOTPEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorOTPEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTPEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorOTPEmail(ctx, req.(*RemoveHumanAuthFactorOTPEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListHumanPasswordless_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHumanPasswordlessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListHumanPasswordless(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListHumanPasswordless",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListHumanPasswordless(ctx, req.(*ListHumanPasswordlessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddPasswordlessRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPasswordlessRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddPasswordlessRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddPasswordlessRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddPasswordlessRegistration(ctx, req.(*AddPasswordlessRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SendPasswordlessRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordlessRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SendPasswordlessRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SendPasswordlessRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SendPasswordlessRegistration(ctx, req.(*SendPasswordlessRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanPasswordless_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanPasswordlessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanPasswordless(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanPasswordless",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanPasswordless(ctx, req.(*RemoveHumanPasswordlessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateMachine(ctx, req.(*UpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GenerateMachineSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMachineSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GenerateMachineSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GenerateMachineSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GenerateMachineSecret(ctx, req.(*GenerateMachineSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveMachineSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMachineSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveMachineSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveMachineSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveMachineSecret(ctx, req.(*RemoveMachineSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetMachineKeyByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineKeyByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetMachineKeyByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetMachineKeyByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetMachineKeyByIDs(ctx, req.(*GetMachineKeyByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListMachineKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListMachineKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListMachineKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListMachineKeys(ctx, req.(*ListMachineKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddMachineKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMachineKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddMachineKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddMachineKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddMachineKey(ctx, req.(*AddMachineKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveMachineKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMachineKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveMachineKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveMachineKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveMachineKey(ctx, req.(*RemoveMachineKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetPersonalAccessTokenByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalAccessTokenByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetPersonalAccessTokenByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetPersonalAccessTokenByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetPersonalAccessTokenByIDs(ctx, req.(*GetPersonalAccessTokenByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListPersonalAccessTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonalAccessTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListPersonalAccessTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListPersonalAccessTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListPersonalAccessTokens(ctx, req.(*ListPersonalAccessTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddPersonalAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPersonalAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddPersonalAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddPersonalAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddPersonalAccessToken(ctx, req.(*AddPersonalAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemovePersonalAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePersonalAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemovePersonalAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemovePersonalAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemovePersonalAccessToken(ctx, req.(*RemovePersonalAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListHumanLinkedIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHumanLinkedIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListHumanLinkedIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListHumanLinkedIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListHumanLinkedIDPs(ctx, req.(*ListHumanLinkedIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanLinkedIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanLinkedIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanLinkedIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanLinkedIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanLinkedIDP(ctx, req.(*RemoveHumanLinkedIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListUserMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListUserMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListUserMemberships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListUserMemberships(ctx, req.(*ListUserMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetMyOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetMyOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetMyOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetMyOrg(ctx, req.(*GetMyOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetOrgByDomainGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByDomainGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetOrgByDomainGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetOrgByDomainGlobal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetOrgByDomainGlobal(ctx, req.(*GetOrgByDomainGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgChanges(ctx, req.(*ListOrgChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOrg(ctx, req.(*AddOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOrg(ctx, req.(*UpdateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateOrg(ctx, req.(*DeactivateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateOrg(ctx, req.(*ReactivateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveOrg(ctx, req.(*RemoveOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetOrgMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrgMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetOrgMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetOrgMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetOrgMetadata(ctx, req.(*SetOrgMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_BulkSetOrgMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkSetOrgMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).BulkSetOrgMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/BulkSetOrgMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).BulkSetOrgMetadata(ctx, req.(*BulkSetOrgMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgMetadata(ctx, req.(*ListOrgMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetOrgMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetOrgMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetOrgMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetOrgMetadata(ctx, req.(*GetOrgMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveOrgMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveOrgMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveOrgMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveOrgMetadata(ctx, req.(*RemoveOrgMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_BulkRemoveOrgMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRemoveOrgMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).BulkRemoveOrgMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/BulkRemoveOrgMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).BulkRemoveOrgMetadata(ctx, req.(*BulkRemoveOrgMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgDomains(ctx, req.(*ListOrgDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOrgDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOrgDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOrgDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOrgDomain(ctx, req.(*AddOrgDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveOrgDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveOrgDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveOrgDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveOrgDomain(ctx, req.(*RemoveOrgDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GenerateOrgDomainValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOrgDomainValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GenerateOrgDomainValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GenerateOrgDomainValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GenerateOrgDomainValidation(ctx, req.(*GenerateOrgDomainValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ValidateOrgDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOrgDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ValidateOrgDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ValidateOrgDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ValidateOrgDomain(ctx, req.(*ValidateOrgDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetPrimaryOrgDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrimaryOrgDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetPrimaryOrgDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetPrimaryOrgDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetPrimaryOrgDomain(ctx, req.(*SetPrimaryOrgDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgMemberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgMemberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgMemberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgMemberRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgMemberRoles(ctx, req.(*ListOrgMemberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgMembers(ctx, req.(*ListOrgMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOrgMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOrgMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOrgMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOrgMember(ctx, req.(*AddOrgMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOrgMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOrgMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateOrgMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOrgMember(ctx, req.(*UpdateOrgMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveOrgMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveOrgMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveOrgMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveOrgMember(ctx, req.(*RemoveOrgMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetProjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetProjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetProjectByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetProjectByID(ctx, req.(*GetProjectByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetGrantedProjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrantedProjectByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetGrantedProjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetGrantedProjectByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetGrantedProjectByID(ctx, req.(*GetGrantedProjectByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListGrantedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGrantedProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListGrantedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListGrantedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListGrantedProjects(ctx, req.(*ListGrantedProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListGrantedProjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGrantedProjectRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListGrantedProjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListGrantedProjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListGrantedProjectRoles(ctx, req.(*ListGrantedProjectRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectChanges(ctx, req.(*ListProjectChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddProject(ctx, req.(*AddProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateProject(ctx, req.(*DeactivateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateProject(ctx, req.(*ReactivateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveProject(ctx, req.(*RemoveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectRoles(ctx, req.(*ListProjectRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddProjectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddProjectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddProjectRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddProjectRole(ctx, req.(*AddProjectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_BulkAddProjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddProjectRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).BulkAddProjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/BulkAddProjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).BulkAddProjectRoles(ctx, req.(*BulkAddProjectRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateProjectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateProjectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateProjectRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateProjectRole(ctx, req.(*UpdateProjectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveProjectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveProjectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveProjectRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveProjectRole(ctx, req.(*RemoveProjectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectMemberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectMemberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectMemberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectMemberRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectMemberRoles(ctx, req.(*ListProjectMemberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectMembers(ctx, req.(*ListProjectMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddProjectMember(ctx, req.(*AddProjectMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateProjectMember(ctx, req.(*UpdateProjectMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveProjectMember(ctx, req.(*RemoveProjectMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetAppByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetAppByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetAppByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetAppByID(ctx, req.(*GetAppByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListAppChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListAppChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListAppChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListAppChanges(ctx, req.(*ListAppChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOIDCApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOIDCAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOIDCApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOIDCApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOIDCApp(ctx, req.(*AddOIDCAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddSAMLApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSAMLAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddSAMLApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddSAMLApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddSAMLApp(ctx, req.(*AddSAMLAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddAPIApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAPIAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddAPIApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddAPIApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddAPIApp(ctx, req.(*AddAPIAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOIDCAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOIDCAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOIDCAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateOIDCAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOIDCAppConfig(ctx, req.(*UpdateOIDCAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateSAMLAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSAMLAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateSAMLAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateSAMLAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateSAMLAppConfig(ctx, req.(*UpdateSAMLAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateAPIAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateAPIAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateAPIAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateAPIAppConfig(ctx, req.(*UpdateAPIAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateApp(ctx, req.(*DeactivateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateApp(ctx, req.(*ReactivateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveApp(ctx, req.(*RemoveAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RegenerateOIDCClientSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateOIDCClientSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RegenerateOIDCClientSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RegenerateOIDCClientSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RegenerateOIDCClientSecret(ctx, req.(*RegenerateOIDCClientSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RegenerateAPIClientSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateAPIClientSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RegenerateAPIClientSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RegenerateAPIClientSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RegenerateAPIClientSecret(ctx, req.(*RegenerateAPIClientSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetAppKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetAppKey(ctx, req.(*GetAppKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListAppKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListAppKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListAppKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListAppKeys(ctx, req.(*ListAppKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddAppKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddAppKey(ctx, req.(*AddAppKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveAppKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveAppKey(ctx, req.(*RemoveAppKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectGrantChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGrantChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectGrantChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectGrantChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectGrantChanges(ctx, req.(*ListProjectGrantChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetProjectGrantByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectGrantByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetProjectGrantByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetProjectGrantByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetProjectGrantByID(ctx, req.(*GetProjectGrantByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectGrants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectGrants(ctx, req.(*ListProjectGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListAllProjectGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllProjectGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListAllProjectGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListAllProjectGrants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListAllProjectGrants(ctx, req.(*ListAllProjectGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddProjectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddProjectGrant(ctx, req.(*AddProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateProjectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateProjectGrant(ctx, req.(*UpdateProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateProjectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateProjectGrant(ctx, req.(*DeactivateProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateProjectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateProjectGrant(ctx, req.(*ReactivateProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveProjectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveProjectGrant(ctx, req.(*RemoveProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectGrantMemberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGrantMemberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectGrantMemberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectGrantMemberRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectGrantMemberRoles(ctx, req.(*ListProjectGrantMemberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectGrantMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGrantMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectGrantMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectGrantMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectGrantMembers(ctx, req.(*ListProjectGrantMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddProjectGrantMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectGrantMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddProjectGrantMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddProjectGrantMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddProjectGrantMember(ctx, req.(*AddProjectGrantMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateProjectGrantMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectGrantMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateProjectGrantMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateProjectGrantMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateProjectGrantMember(ctx, req.(*UpdateProjectGrantMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveProjectGrantMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectGrantMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveProjectGrantMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveProjectGrantMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveProjectGrantMember(ctx, req.(*RemoveProjectGrantMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUserGrantByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGrantByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUserGrantByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetUserGrantByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUserGrantByID(ctx, req.(*GetUserGrantByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListUserGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListUserGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListUserGrants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListUserGrants(ctx, req.(*ListUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddUserGrant(ctx, req.(*AddUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateUserGrant(ctx, req.(*UpdateUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateUserGrant(ctx, req.(*DeactivateUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateUserGrant(ctx, req.(*ReactivateUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveUserGrant(ctx, req.(*RemoveUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_BulkRemoveUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRemoveUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).BulkRemoveUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/BulkRemoveUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).BulkRemoveUserGrant(ctx, req.(*BulkRemoveUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetOrgIAMPolicy(ctx, req.(*GetOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDomainPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDomainPolicy(ctx, req.(*GetDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetLoginPolicy(ctx, req.(*GetLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultLoginPolicy(ctx, req.(*GetDefaultLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomLoginPolicy(ctx, req.(*AddCustomLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomLoginPolicy(ctx, req.(*UpdateCustomLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetLoginPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetLoginPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetLoginPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetLoginPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetLoginPolicyToDefault(ctx, req.(*ResetLoginPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListLoginPolicyIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicyIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListLoginPolicyIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListLoginPolicyIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListLoginPolicyIDPs(ctx, req.(*ListLoginPolicyIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddIDPToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIDPToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddIDPToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddIDPToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddIDPToLoginPolicy(ctx, req.(*AddIDPToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveIDPFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIDPFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveIDPFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveIDPFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveIDPFromLoginPolicy(ctx, req.(*RemoveIDPFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListLoginPolicySecondFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicySecondFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListLoginPolicySecondFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListLoginPolicySecondFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListLoginPolicySecondFactors(ctx, req.(*ListLoginPolicySecondFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddSecondFactorToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecondFactorToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddSecondFactorToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddSecondFactorToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddSecondFactorToLoginPolicy(ctx, req.(*AddSecondFactorToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveSecondFactorFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSecondFactorFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveSecondFactorFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveSecondFactorFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveSecondFactorFromLoginPolicy(ctx, req.(*RemoveSecondFactorFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListLoginPolicyMultiFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicyMultiFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListLoginPolicyMultiFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListLoginPolicyMultiFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListLoginPolicyMultiFactors(ctx, req.(*ListLoginPolicyMultiFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddMultiFactorToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMultiFactorToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddMultiFactorToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddMultiFactorToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddMultiFactorToLoginPolicy(ctx, req.(*AddMultiFactorToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveMultiFactorFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMultiFactorFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveMultiFactorFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveMultiFactorFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveMultiFactorFromLoginPolicy(ctx, req.(*RemoveMultiFactorFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetPasswordComplexityPolicy(ctx, req.(*GetPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultPasswordComplexityPolicy(ctx, req.(*GetDefaultPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomPasswordComplexityPolicy(ctx, req.(*AddCustomPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomPasswordComplexityPolicy(ctx, req.(*UpdateCustomPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetPasswordComplexityPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordComplexityPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetPasswordComplexityPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetPasswordComplexityPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetPasswordComplexityPolicyToDefault(ctx, req.(*ResetPasswordComplexityPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetPasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetPasswordAgePolicy(ctx, req.(*GetPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultPasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultPasswordAgePolicy(ctx, req.(*GetDefaultPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomPasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomPasswordAgePolicy(ctx, req.(*AddCustomPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomPasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomPasswordAgePolicy(ctx, req.(*UpdateCustomPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetPasswordAgePolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordAgePolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetPasswordAgePolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetPasswordAgePolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetPasswordAgePolicyToDefault(ctx, req.(*ResetPasswordAgePolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetLockoutPolicy(ctx, req.(*GetLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultLockoutPolicy(ctx, req.(*GetDefaultLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomLockoutPolicy(ctx, req.(*AddCustomLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomLockoutPolicy(ctx, req.(*UpdateCustomLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetLockoutPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetLockoutPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetLockoutPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetLockoutPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetLockoutPolicyToDefault(ctx, req.(*ResetLockoutPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetPrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivacyPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetPrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetPrivacyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetPrivacyPolicy(ctx, req.(*GetPrivacyPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultPrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPrivacyPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultPrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultPrivacyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultPrivacyPolicy(ctx, req.(*GetDefaultPrivacyPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomPrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomPrivacyPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomPrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomPrivacyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomPrivacyPolicy(ctx, req.(*AddCustomPrivacyPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomPrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomPrivacyPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomPrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomPrivacyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomPrivacyPolicy(ctx, req.(*UpdateCustomPrivacyPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetPrivacyPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPrivacyPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetPrivacyPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetPrivacyPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetPrivacyPolicyToDefault(ctx, req.(*ResetPrivacyPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetNotificationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetNotificationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetNotificationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetNotificationPolicy(ctx, req.(*GetNotificationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultNotificationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultNotificationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultNotificationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultNotificationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultNotificationPolicy(ctx, req.(*GetDefaultNotificationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomNotificationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomNotificationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomNotificationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomNotificationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomNotificationPolicy(ctx, req.(*AddCustomNotificationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomNotificationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomNotificationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomNotificationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomNotificationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomNotificationPolicy(ctx, req.(*UpdateCustomNotificationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetNotificationPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetNotificationPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetNotificationPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetNotificationPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetNotificationPolicyToDefault(ctx, req.(*ResetNotificationPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetLabelPolicy(ctx, req.(*GetLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetPreviewLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviewLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetPreviewLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetPreviewLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetPreviewLabelPolicy(ctx, req.(*GetPreviewLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultLabelPolicy(ctx, req.(*GetDefaultLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomLabelPolicy(ctx, req.(*AddCustomLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomLabelPolicy(ctx, req.(*UpdateCustomLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ActivateCustomLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateCustomLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ActivateCustomLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ActivateCustomLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ActivateCustomLabelPolicy(ctx, req.(*ActivateCustomLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveCustomLabelPolicyLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustomLabelPolicyLogoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveCustomLabelPolicyLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveCustomLabelPolicyLogo(ctx, req.(*RemoveCustomLabelPolicyLogoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveCustomLabelPolicyLogoDark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustomLabelPolicyLogoDarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveCustomLabelPolicyLogoDark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyLogoDark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveCustomLabelPolicyLogoDark(ctx, req.(*RemoveCustomLabelPolicyLogoDarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveCustomLabelPolicyIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustomLabelPolicyIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveCustomLabelPolicyIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveCustomLabelPolicyIcon(ctx, req.(*RemoveCustomLabelPolicyIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveCustomLabelPolicyIconDark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustomLabelPolicyIconDarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveCustomLabelPolicyIconDark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyIconDark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveCustomLabelPolicyIconDark(ctx, req.(*RemoveCustomLabelPolicyIconDarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveCustomLabelPolicyFont_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustomLabelPolicyFontRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveCustomLabelPolicyFont(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyFont",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveCustomLabelPolicyFont(ctx, req.(*RemoveCustomLabelPolicyFontRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetLabelPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetLabelPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetLabelPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetLabelPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetLabelPolicyToDefault(ctx, req.(*ResetLabelPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCustomInitMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomInitMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCustomInitMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetCustomInitMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCustomInitMessageText(ctx, req.(*GetCustomInitMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultInitMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultInitMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultInitMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultInitMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultInitMessageText(ctx, req.(*GetDefaultInitMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetCustomInitMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomInitMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetCustomInitMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetCustomInitMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetCustomInitMessageText(ctx, req.(*SetCustomInitMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetCustomInitMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomInitMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetCustomInitMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetCustomInitMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetCustomInitMessageTextToDefault(ctx, req.(*ResetCustomInitMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCustomPasswordResetMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomPasswordResetMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCustomPasswordResetMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetCustomPasswordResetMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCustomPasswordResetMessageText(ctx, req.(*GetCustomPasswordResetMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultPasswordResetMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordResetMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultPasswordResetMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultPasswordResetMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultPasswordResetMessageText(ctx, req.(*GetDefaultPasswordResetMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetCustomPasswordResetMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomPasswordResetMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetCustomPasswordResetMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetCustomPasswordResetMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetCustomPasswordResetMessageText(ctx, req.(*SetCustomPasswordResetMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetCustomPasswordResetMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomPasswordResetMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetCustomPasswordResetMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetCustomPasswordResetMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetCustomPasswordResetMessageTextToDefault(ctx, req.(*ResetCustomPasswordResetMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCustomVerifyEmailMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomVerifyEmailMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCustomVerifyEmailMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetCustomVerifyEmailMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCustomVerifyEmailMessageText(ctx, req.(*GetCustomVerifyEmailMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultVerifyEmailMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultVerifyEmailMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultVerifyEmailMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultVerifyEmailMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultVerifyEmailMessageText(ctx, req.(*GetDefaultVerifyEmailMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetCustomVerifyEmailMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomVerifyEmailMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetCustomVerifyEmailMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetCustomVerifyEmailMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetCustomVerifyEmailMessageText(ctx, req.(*SetCustomVerifyEmailMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetCustomVerifyEmailMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomVerifyEmailMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetCustomVerifyEmailMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetCustomVerifyEmailMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetCustomVerifyEmailMessageTextToDefault(ctx, req.(*ResetCustomVerifyEmailMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCustomVerifyPhoneMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomVerifyPhoneMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCustomVerifyPhoneMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetCustomVerifyPhoneMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCustomVerifyPhoneMessageText(ctx, req.(*GetCustomVerifyPhoneMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultVerifyPhoneMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultVerifyPhoneMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultVerifyPhoneMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultVerifyPhoneMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultVerifyPhoneMessageText(ctx, req.(*GetDefaultVerifyPhoneMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetCustomVerifyPhoneMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomVerifyPhoneMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetCustomVerifyPhoneMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetCustomVerifyPhoneMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetCustomVerifyPhoneMessageText(ctx, req.(*SetCustomVerifyPhoneMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetCustomVerifyPhoneMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomVerifyPhoneMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetCustomVerifyPhoneMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetCustomVerifyPhoneMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetCustomVerifyPhoneMessageTextToDefault(ctx, req.(*ResetCustomVerifyPhoneMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCustomVerifySMSOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomVerifySMSOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCustomVerifySMSOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetCustomVerifySMSOTPMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCustomVerifySMSOTPMessageText(ctx, req.(*GetCustomVerifySMSOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultVerifySMSOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultVerifySMSOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultVerifySMSOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultVerifySMSOTPMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultVerifySMSOTPMessageText(ctx, req.(*GetDefaultVerifySMSOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetCustomVerifySMSOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomVerifySMSOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetCustomVerifySMSOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetCustomVerifySMSOTPMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetCustomVerifySMSOTPMessageText(ctx, req.(*SetCustomVerifySMSOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetCustomVerifySMSOTPMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomVerifySMSOTPMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetCustomVerifySMSOTPMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetCustomVerifySMSOTPMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetCustomVerifySMSOTPMessageTextToDefault(ctx, req.(*ResetCustomVerifySMSOTPMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCustomVerifyEmailOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomVerifyEmailOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCustomVerifyEmailOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetCustomVerifyEmailOTPMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCustomVerifyEmailOTPMessageText(ctx, req.(*GetCustomVerifyEmailOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultVerifyEmailOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultVerifyEmailOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultVerifyEmailOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultVerifyEmailOTPMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultVerifyEmailOTPMessageText(ctx, req.(*GetDefaultVerifyEmailOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetCustomVerifyEmailOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomVerifyEmailOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetCustomVerifyEmailOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetCustomVerifyEmailOTPMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetCustomVerifyEmailOTPMessageText(ctx, req.(*SetCustomVerifyEmailOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetCustomVerifyEmailOTPMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomVerifyEmailOTPMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetCustomVerifyEmailOTPMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetCustomVerifyEmailOTPMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetCustomVerifyEmailOTPMessageTextToDefault(ctx, req.(*ResetCustomVerifyEmailOTPMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCustomDomainClaimedMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomDomainClaimedMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCustomDomainClaimedMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetCustomDomainClaimedMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCustomDomainClaimedMessageText(ctx, req.(*GetCustomDomainClaimedMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultDomainClaimedMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultDomainClaimedMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultDomainClaimedMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultDomainClaimedMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultDomainClaimedMessageText(ctx, req.(*GetDefaultDomainClaimedMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetCustomDomainClaimedMessageCustomText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomDomainClaimedMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetCustomDomainClaimedMessageCustomText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetCustomDomainClaimedMessageCustomText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetCustomDomainClaimedMessageCustomText(ctx, req.(*SetCustomDomainClaimedMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetCustomDomainClaimedMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomDomainClaimedMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetCustomDomainClaimedMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetCustomDomainClaimedMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetCustomDomainClaimedMessageTextToDefault(ctx, req.(*ResetCustomDomainClaimedMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCustomPasswordlessRegistrationMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomPasswordlessRegistrationMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCustomPasswordlessRegistrationMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetCustomPasswordlessRegistrationMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCustomPasswordlessRegistrationMessageText(ctx, req.(*GetCustomPasswordlessRegistrationMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultPasswordlessRegistrationMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordlessRegistrationMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultPasswordlessRegistrationMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultPasswordlessRegistrationMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultPasswordlessRegistrationMessageText(ctx, req.(*GetDefaultPasswordlessRegistrationMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetCustomPasswordlessRegistrationMessageCustomText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomPasswordlessRegistrationMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetCustomPasswordlessRegistrationMessageCustomText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetCustomPasswordlessRegistrationMessageCustomText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetCustomPasswordlessRegistrationMessageCustomText(ctx, req.(*SetCustomPasswordlessRegistrationMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetCustomPasswordlessRegistrationMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetCustomPasswordlessRegistrationMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx, req.(*ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCustomPasswordChangeMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomPasswordChangeMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCustomPasswordChangeMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetCustomPasswordChangeMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCustomPasswordChangeMessageText(ctx, req.(*GetCustomPasswordChangeMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultPasswordChangeMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordChangeMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultPasswordChangeMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultPasswordChangeMessageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultPasswordChangeMessageText(ctx, req.(*GetDefaultPasswordChangeMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetCustomPasswordChangeMessageCustomText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomPasswordChangeMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetCustomPasswordChangeMessageCustomText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetCustomPasswordChangeMessageCustomText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetCustomPasswordChangeMessageCustomText(ctx, req.(*SetCustomPasswordChangeMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetCustomPasswordChangeMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomPasswordChangeMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetCustomPasswordChangeMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetCustomPasswordChangeMessageTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetCustomPasswordChangeMessageTextToDefault(ctx, req.(*ResetCustomPasswordChangeMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCustomLoginTexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomLoginTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCustomLoginTexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetCustomLoginTexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCustomLoginTexts(ctx, req.(*GetCustomLoginTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultLoginTexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLoginTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultLoginTexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultLoginTexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultLoginTexts(ctx, req.(*GetDefaultLoginTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetCustomLoginText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomLoginTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetCustomLoginText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetCustomLoginText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetCustomLoginText(ctx, req.(*SetCustomLoginTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetCustomLoginTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomLoginTextsToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetCustomLoginTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetCustomLoginTextToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetCustomLoginTextToDefault(ctx, req.(*ResetCustomLoginTextsToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetOrgIDPByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgIDPByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetOrgIDPByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetOrgIDPByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetOrgIDPByID(ctx, req.(*GetOrgIDPByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgIDPs(ctx, req.(*ListOrgIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOrgOIDCIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgOIDCIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOrgOIDCIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOrgOIDCIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOrgOIDCIDP(ctx, req.(*AddOrgOIDCIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOrgJWTIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgJWTIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOrgJWTIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOrgJWTIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOrgJWTIDP(ctx, req.(*AddOrgJWTIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateOrgIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateOrgIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateOrgIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateOrgIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateOrgIDP(ctx, req.(*DeactivateOrgIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateOrgIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateOrgIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateOrgIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateOrgIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateOrgIDP(ctx, req.(*ReactivateOrgIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveOrgIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveOrgIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveOrgIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveOrgIDP(ctx, req.(*RemoveOrgIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOrgIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOrgIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateOrgIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOrgIDP(ctx, req.(*UpdateOrgIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOrgIDPOIDCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgIDPOIDCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOrgIDPOIDCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateOrgIDPOIDCConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOrgIDPOIDCConfig(ctx, req.(*UpdateOrgIDPOIDCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOrgIDPJWTConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgIDPJWTConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOrgIDPJWTConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateOrgIDPJWTConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOrgIDPJWTConfig(ctx, req.(*UpdateOrgIDPJWTConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetProviderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetProviderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetProviderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetProviderByID(ctx, req.(*GetProviderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddGenericOAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenericOAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddGenericOAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddGenericOAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddGenericOAuthProvider(ctx, req.(*AddGenericOAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateGenericOAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenericOAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateGenericOAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateGenericOAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateGenericOAuthProvider(ctx, req.(*UpdateGenericOAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddGenericOIDCProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenericOIDCProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddGenericOIDCProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddGenericOIDCProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddGenericOIDCProvider(ctx, req.(*AddGenericOIDCProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateGenericOIDCProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenericOIDCProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateGenericOIDCProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateGenericOIDCProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateGenericOIDCProvider(ctx, req.(*UpdateGenericOIDCProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_MigrateGenericOIDCProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateGenericOIDCProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).MigrateGenericOIDCProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/MigrateGenericOIDCProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).MigrateGenericOIDCProvider(ctx, req.(*MigrateGenericOIDCProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddJWTProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJWTProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddJWTProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddJWTProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddJWTProvider(ctx, req.(*AddJWTProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateJWTProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJWTProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateJWTProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateJWTProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateJWTProvider(ctx, req.(*UpdateJWTProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddAzureADProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAzureADProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddAzureADProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddAzureADProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddAzureADProvider(ctx, req.(*AddAzureADProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateAzureADProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAzureADProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateAzureADProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateAzureADProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateAzureADProvider(ctx, req.(*UpdateAzureADProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddGitHubProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGitHubProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddGitHubProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddGitHubProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddGitHubProvider(ctx, req.(*AddGitHubProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateGitHubProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGitHubProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateGitHubProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateGitHubProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateGitHubProvider(ctx, req.(*UpdateGitHubProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddGitHubEnterpriseServerProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGitHubEnterpriseServerProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddGitHubEnterpriseServerProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddGitHubEnterpriseServerProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddGitHubEnterpriseServerProvider(ctx, req.(*AddGitHubEnterpriseServerProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateGitHubEnterpriseServerProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGitHubEnterpriseServerProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateGitHubEnterpriseServerProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateGitHubEnterpriseServerProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateGitHubEnterpriseServerProvider(ctx, req.(*UpdateGitHubEnterpriseServerProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddGitLabProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGitLabProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddGitLabProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddGitLabProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddGitLabProvider(ctx, req.(*AddGitLabProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateGitLabProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGitLabProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateGitLabProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateGitLabProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateGitLabProvider(ctx, req.(*UpdateGitLabProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddGitLabSelfHostedProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGitLabSelfHostedProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddGitLabSelfHostedProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddGitLabSelfHostedProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddGitLabSelfHostedProvider(ctx, req.(*AddGitLabSelfHostedProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateGitLabSelfHostedProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGitLabSelfHostedProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateGitLabSelfHostedProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateGitLabSelfHostedProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateGitLabSelfHostedProvider(ctx, req.(*UpdateGitLabSelfHostedProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddGoogleProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGoogleProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddGoogleProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddGoogleProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddGoogleProvider(ctx, req.(*AddGoogleProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateGoogleProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoogleProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateGoogleProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateGoogleProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateGoogleProvider(ctx, req.(*UpdateGoogleProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddLDAPProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLDAPProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddLDAPProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddLDAPProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddLDAPProvider(ctx, req.(*AddLDAPProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateLDAPProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLDAPProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateLDAPProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateLDAPProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateLDAPProvider(ctx, req.(*UpdateLDAPProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddAppleProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppleProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddAppleProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddAppleProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddAppleProvider(ctx, req.(*AddAppleProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateAppleProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppleProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateAppleProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateAppleProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateAppleProvider(ctx, req.(*UpdateAppleProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddSAMLProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSAMLProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddSAMLProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddSAMLProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddSAMLProvider(ctx, req.(*AddSAMLProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateSAMLProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSAMLProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateSAMLProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateSAMLProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateSAMLProvider(ctx, req.(*UpdateSAMLProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RegenerateSAMLProviderCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateSAMLProviderCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RegenerateSAMLProviderCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RegenerateSAMLProviderCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RegenerateSAMLProviderCertificate(ctx, req.(*RegenerateSAMLProviderCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeleteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeleteProvider(ctx, req.(*DeleteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListActions(ctx, req.(*ListActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetAction(ctx, req.(*GetActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/CreateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).CreateAction(ctx, req.(*CreateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateAction(ctx, req.(*UpdateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateAction(ctx, req.(*DeactivateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateAction(ctx, req.(*ReactivateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeleteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeleteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeleteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeleteAction(ctx, req.(*DeleteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListFlowTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlowTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListFlowTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListFlowTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListFlowTypes(ctx, req.(*ListFlowTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListFlowTriggerTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlowTriggerTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListFlowTriggerTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListFlowTriggerTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListFlowTriggerTypes(ctx, req.(*ListFlowTriggerTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetFlow(ctx, req.(*GetFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ClearFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ClearFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ClearFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ClearFlow(ctx, req.(*ClearFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetTriggerActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTriggerActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetTriggerActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetTriggerActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetTriggerActions(ctx, req.(*SetTriggerActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementService_ServiceDesc is the grpc.ServiceDesc for ManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.management.v1.ManagementService",
	HandlerType: (*ManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _ManagementService_Healthz_Handler,
		},
		{
			MethodName: "GetOIDCInformation",
			Handler:    _ManagementService_GetOIDCInformation_Handler,
		},
		{
			MethodName: "GetIAM",
			Handler:    _ManagementService_GetIAM_Handler,
		},
		{
			MethodName: "GetSupportedLanguages",
			Handler:    _ManagementService_GetSupportedLanguages_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _ManagementService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByLoginNameGlobal",
			Handler:    _ManagementService_GetUserByLoginNameGlobal_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _ManagementService_ListUsers_Handler,
		},
		{
			MethodName: "ListUserChanges",
			Handler:    _ManagementService_ListUserChanges_Handler,
		},
		{
			MethodName: "IsUserUnique",
			Handler:    _ManagementService_IsUserUnique_Handler,
		},
		{
			MethodName: "AddHumanUser",
			Handler:    _ManagementService_AddHumanUser_Handler,
		},
		{
			MethodName: "ImportHumanUser",
			Handler:    _ManagementService_ImportHumanUser_Handler,
		},
		{
			MethodName: "AddMachineUser",
			Handler:    _ManagementService_AddMachineUser_Handler,
		},
		{
			MethodName: "DeactivateUser",
			Handler:    _ManagementService_DeactivateUser_Handler,
		},
		{
			MethodName: "ReactivateUser",
			Handler:    _ManagementService_ReactivateUser_Handler,
		},
		{
			MethodName: "LockUser",
			Handler:    _ManagementService_LockUser_Handler,
		},
		{
			MethodName: "UnlockUser",
			Handler:    _ManagementService_UnlockUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _ManagementService_RemoveUser_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _ManagementService_UpdateUserName_Handler,
		},
		{
			MethodName: "SetUserMetadata",
			Handler:    _ManagementService_SetUserMetadata_Handler,
		},
		{
			MethodName: "BulkSetUserMetadata",
			Handler:    _ManagementService_BulkSetUserMetadata_Handler,
		},
		{
			MethodName: "ListUserMetadata",
			Handler:    _ManagementService_ListUserMetadata_Handler,
		},
		{
			MethodName: "GetUserMetadata",
			Handler:    _ManagementService_GetUserMetadata_Handler,
		},
		{
			MethodName: "RemoveUserMetadata",
			Handler:    _ManagementService_RemoveUserMetadata_Handler,
		},
		{
			MethodName: "BulkRemoveUserMetadata",
			Handler:    _ManagementService_BulkRemoveUserMetadata_Handler,
		},
		{
			MethodName: "GetHumanProfile",
			Handler:    _ManagementService_GetHumanProfile_Handler,
		},
		{
			MethodName: "UpdateHumanProfile",
			Handler:    _ManagementService_UpdateHumanProfile_Handler,
		},
		{
			MethodName: "GetHumanEmail",
			Handler:    _ManagementService_GetHumanEmail_Handler,
		},
		{
			MethodName: "UpdateHumanEmail",
			Handler:    _ManagementService_UpdateHumanEmail_Handler,
		},
		{
			MethodName: "ResendHumanInitialization",
			Handler:    _ManagementService_ResendHumanInitialization_Handler,
		},
		{
			MethodName: "ResendHumanEmailVerification",
			Handler:    _ManagementService_ResendHumanEmailVerification_Handler,
		},
		{
			MethodName: "GetHumanPhone",
			Handler:    _ManagementService_GetHumanPhone_Handler,
		},
		{
			MethodName: "UpdateHumanPhone",
			Handler:    _ManagementService_UpdateHumanPhone_Handler,
		},
		{
			MethodName: "RemoveHumanPhone",
			Handler:    _ManagementService_RemoveHumanPhone_Handler,
		},
		{
			MethodName: "ResendHumanPhoneVerification",
			Handler:    _ManagementService_ResendHumanPhoneVerification_Handler,
		},
		{
			MethodName: "RemoveHumanAvatar",
			Handler:    _ManagementService_RemoveHumanAvatar_Handler,
		},
		{
			MethodName: "SetHumanInitialPassword",
			Handler:    _ManagementService_SetHumanInitialPassword_Handler,
		},
		{
			MethodName: "SetHumanPassword",
			Handler:    _ManagementService_SetHumanPassword_Handler,
		},
		{
			MethodName: "SendHumanResetPasswordNotification",
			Handler:    _ManagementService_SendHumanResetPasswordNotification_Handler,
		},
		{
			MethodName: "ListHumanAuthFactors",
			Handler:    _ManagementService_ListHumanAuthFactors_Handler,
		},
		{
			MethodName: "RemoveHumanAuthFactorOTP",
			Handler:    _ManagementService_RemoveHumanAuthFactorOTP_Handler,
		},
		{
			MethodName: "RemoveHumanAuthFactorU2F",
			Handler:    _ManagementService_RemoveHumanAuthFactorU2F_Handler,
		},
		{
			MethodName: "RemoveHumanAuthFactorOTPSMS",
			Handler:    _ManagementService_RemoveHumanAuthFactorOTPSMS_Handler,
		},
		{
			MethodName: "RemoveHumanAuthFactorOTPEmail",
			Handler:    _ManagementService_RemoveHumanAuthFactorOTPEmail_Handler,
		},
		{
			MethodName: "ListHumanPasswordless",
			Handler:    _ManagementService_ListHumanPasswordless_Handler,
		},
		{
			MethodName: "AddPasswordlessRegistration",
			Handler:    _ManagementService_AddPasswordlessRegistration_Handler,
		},
		{
			MethodName: "SendPasswordlessRegistration",
			Handler:    _ManagementService_SendPasswordlessRegistration_Handler,
		},
		{
			MethodName: "RemoveHumanPasswordless",
			Handler:    _ManagementService_RemoveHumanPasswordless_Handler,
		},
		{
			MethodName: "UpdateMachine",
			Handler:    _ManagementService_UpdateMachine_Handler,
		},
		{
			MethodName: "GenerateMachineSecret",
			Handler:    _ManagementService_GenerateMachineSecret_Handler,
		},
		{
			MethodName: "RemoveMachineSecret",
			Handler:    _ManagementService_RemoveMachineSecret_Handler,
		},
		{
			MethodName: "GetMachineKeyByIDs",
			Handler:    _ManagementService_GetMachineKeyByIDs_Handler,
		},
		{
			MethodName: "ListMachineKeys",
			Handler:    _ManagementService_ListMachineKeys_Handler,
		},
		{
			MethodName: "AddMachineKey",
			Handler:    _ManagementService_AddMachineKey_Handler,
		},
		{
			MethodName: "RemoveMachineKey",
			Handler:    _ManagementService_RemoveMachineKey_Handler,
		},
		{
			MethodName: "GetPersonalAccessTokenByIDs",
			Handler:    _ManagementService_GetPersonalAccessTokenByIDs_Handler,
		},
		{
			MethodName: "ListPersonalAccessTokens",
			Handler:    _ManagementService_ListPersonalAccessTokens_Handler,
		},
		{
			MethodName: "AddPersonalAccessToken",
			Handler:    _ManagementService_AddPersonalAccessToken_Handler,
		},
		{
			MethodName: "RemovePersonalAccessToken",
			Handler:    _ManagementService_RemovePersonalAccessToken_Handler,
		},
		{
			MethodName: "ListHumanLinkedIDPs",
			Handler:    _ManagementService_ListHumanLinkedIDPs_Handler,
		},
		{
			MethodName: "RemoveHumanLinkedIDP",
			Handler:    _ManagementService_RemoveHumanLinkedIDP_Handler,
		},
		{
			MethodName: "ListUserMemberships",
			Handler:    _ManagementService_ListUserMemberships_Handler,
		},
		{
			MethodName: "GetMyOrg",
			Handler:    _ManagementService_GetMyOrg_Handler,
		},
		{
			MethodName: "GetOrgByDomainGlobal",
			Handler:    _ManagementService_GetOrgByDomainGlobal_Handler,
		},
		{
			MethodName: "ListOrgChanges",
			Handler:    _ManagementService_ListOrgChanges_Handler,
		},
		{
			MethodName: "AddOrg",
			Handler:    _ManagementService_AddOrg_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _ManagementService_UpdateOrg_Handler,
		},
		{
			MethodName: "DeactivateOrg",
			Handler:    _ManagementService_DeactivateOrg_Handler,
		},
		{
			MethodName: "ReactivateOrg",
			Handler:    _ManagementService_ReactivateOrg_Handler,
		},
		{
			MethodName: "RemoveOrg",
			Handler:    _ManagementService_RemoveOrg_Handler,
		},
		{
			MethodName: "SetOrgMetadata",
			Handler:    _ManagementService_SetOrgMetadata_Handler,
		},
		{
			MethodName: "BulkSetOrgMetadata",
			Handler:    _ManagementService_BulkSetOrgMetadata_Handler,
		},
		{
			MethodName: "ListOrgMetadata",
			Handler:    _ManagementService_ListOrgMetadata_Handler,
		},
		{
			MethodName: "GetOrgMetadata",
			Handler:    _ManagementService_GetOrgMetadata_Handler,
		},
		{
			MethodName: "RemoveOrgMetadata",
			Handler:    _ManagementService_RemoveOrgMetadata_Handler,
		},
		{
			MethodName: "BulkRemoveOrgMetadata",
			Handler:    _ManagementService_BulkRemoveOrgMetadata_Handler,
		},
		{
			MethodName: "ListOrgDomains",
			Handler:    _ManagementService_ListOrgDomains_Handler,
		},
		{
			MethodName: "AddOrgDomain",
			Handler:    _ManagementService_AddOrgDomain_Handler,
		},
		{
			MethodName: "RemoveOrgDomain",
			Handler:    _ManagementService_RemoveOrgDomain_Handler,
		},
		{
			MethodName: "GenerateOrgDomainValidation",
			Handler:    _ManagementService_GenerateOrgDomainValidation_Handler,
		},
		{
			MethodName: "ValidateOrgDomain",
			Handler:    _ManagementService_ValidateOrgDomain_Handler,
		},
		{
			MethodName: "SetPrimaryOrgDomain",
			Handler:    _ManagementService_SetPrimaryOrgDomain_Handler,
		},
		{
			MethodName: "ListOrgMemberRoles",
			Handler:    _ManagementService_ListOrgMemberRoles_Handler,
		},
		{
			MethodName: "ListOrgMembers",
			Handler:    _ManagementService_ListOrgMembers_Handler,
		},
		{
			MethodName: "AddOrgMember",
			Handler:    _ManagementService_AddOrgMember_Handler,
		},
		{
			MethodName: "UpdateOrgMember",
			Handler:    _ManagementService_UpdateOrgMember_Handler,
		},
		{
			MethodName: "RemoveOrgMember",
			Handler:    _ManagementService_RemoveOrgMember_Handler,
		},
		{
			MethodName: "GetProjectByID",
			Handler:    _ManagementService_GetProjectByID_Handler,
		},
		{
			MethodName: "GetGrantedProjectByID",
			Handler:    _ManagementService_GetGrantedProjectByID_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ManagementService_ListProjects_Handler,
		},
		{
			MethodName: "ListGrantedProjects",
			Handler:    _ManagementService_ListGrantedProjects_Handler,
		},
		{
			MethodName: "ListGrantedProjectRoles",
			Handler:    _ManagementService_ListGrantedProjectRoles_Handler,
		},
		{
			MethodName: "ListProjectChanges",
			Handler:    _ManagementService_ListProjectChanges_Handler,
		},
		{
			MethodName: "AddProject",
			Handler:    _ManagementService_AddProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ManagementService_UpdateProject_Handler,
		},
		{
			MethodName: "DeactivateProject",
			Handler:    _ManagementService_DeactivateProject_Handler,
		},
		{
			MethodName: "ReactivateProject",
			Handler:    _ManagementService_ReactivateProject_Handler,
		},
		{
			MethodName: "RemoveProject",
			Handler:    _ManagementService_RemoveProject_Handler,
		},
		{
			MethodName: "ListProjectRoles",
			Handler:    _ManagementService_ListProjectRoles_Handler,
		},
		{
			MethodName: "AddProjectRole",
			Handler:    _ManagementService_AddProjectRole_Handler,
		},
		{
			MethodName: "BulkAddProjectRoles",
			Handler:    _ManagementService_BulkAddProjectRoles_Handler,
		},
		{
			MethodName: "UpdateProjectRole",
			Handler:    _ManagementService_UpdateProjectRole_Handler,
		},
		{
			MethodName: "RemoveProjectRole",
			Handler:    _ManagementService_RemoveProjectRole_Handler,
		},
		{
			MethodName: "ListProjectMemberRoles",
			Handler:    _ManagementService_ListProjectMemberRoles_Handler,
		},
		{
			MethodName: "ListProjectMembers",
			Handler:    _ManagementService_ListProjectMembers_Handler,
		},
		{
			MethodName: "AddProjectMember",
			Handler:    _ManagementService_AddProjectMember_Handler,
		},
		{
			MethodName: "UpdateProjectMember",
			Handler:    _ManagementService_UpdateProjectMember_Handler,
		},
		{
			MethodName: "RemoveProjectMember",
			Handler:    _ManagementService_RemoveProjectMember_Handler,
		},
		{
			MethodName: "GetAppByID",
			Handler:    _ManagementService_GetAppByID_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _ManagementService_ListApps_Handler,
		},
		{
			MethodName: "ListAppChanges",
			Handler:    _ManagementService_ListAppChanges_Handler,
		},
		{
			MethodName: "AddOIDCApp",
			Handler:    _ManagementService_AddOIDCApp_Handler,
		},
		{
			MethodName: "AddSAMLApp",
			Handler:    _ManagementService_AddSAMLApp_Handler,
		},
		{
			MethodName: "AddAPIApp",
			Handler:    _ManagementService_AddAPIApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _ManagementService_UpdateApp_Handler,
		},
		{
			MethodName: "UpdateOIDCAppConfig",
			Handler:    _ManagementService_UpdateOIDCAppConfig_Handler,
		},
		{
			MethodName: "UpdateSAMLAppConfig",
			Handler:    _ManagementService_UpdateSAMLAppConfig_Handler,
		},
		{
			MethodName: "UpdateAPIAppConfig",
			Handler:    _ManagementService_UpdateAPIAppConfig_Handler,
		},
		{
			MethodName: "DeactivateApp",
			Handler:    _ManagementService_DeactivateApp_Handler,
		},
		{
			MethodName: "ReactivateApp",
			Handler:    _ManagementService_ReactivateApp_Handler,
		},
		{
			MethodName: "RemoveApp",
			Handler:    _ManagementService_RemoveApp_Handler,
		},
		{
			MethodName: "RegenerateOIDCClientSecret",
			Handler:    _ManagementService_RegenerateOIDCClientSecret_Handler,
		},
		{
			MethodName: "RegenerateAPIClientSecret",
			Handler:    _ManagementService_RegenerateAPIClientSecret_Handler,
		},
		{
			MethodName: "GetAppKey",
			Handler:    _ManagementService_GetAppKey_Handler,
		},
		{
			MethodName: "ListAppKeys",
			Handler:    _ManagementService_ListAppKeys_Handler,
		},
		{
			MethodName: "AddAppKey",
			Handler:    _ManagementService_AddAppKey_Handler,
		},
		{
			MethodName: "RemoveAppKey",
			Handler:    _ManagementService_RemoveAppKey_Handler,
		},
		{
			MethodName: "ListProjectGrantChanges",
			Handler:    _ManagementService_ListProjectGrantChanges_Handler,
		},
		{
			MethodName: "GetProjectGrantByID",
			Handler:    _ManagementService_GetProjectGrantByID_Handler,
		},
		{
			MethodName: "ListProjectGrants",
			Handler:    _ManagementService_ListProjectGrants_Handler,
		},
		{
			MethodName: "ListAllProjectGrants",
			Handler:    _ManagementService_ListAllProjectGrants_Handler,
		},
		{
			MethodName: "AddProjectGrant",
			Handler:    _ManagementService_AddProjectGrant_Handler,
		},
		{
			MethodName: "UpdateProjectGrant",
			Handler:    _ManagementService_UpdateProjectGrant_Handler,
		},
		{
			MethodName: "DeactivateProjectGrant",
			Handler:    _ManagementService_DeactivateProjectGrant_Handler,
		},
		{
			MethodName: "ReactivateProjectGrant",
			Handler:    _ManagementService_ReactivateProjectGrant_Handler,
		},
		{
			MethodName: "RemoveProjectGrant",
			Handler:    _ManagementService_RemoveProjectGrant_Handler,
		},
		{
			MethodName: "ListProjectGrantMemberRoles",
			Handler:    _ManagementService_ListProjectGrantMemberRoles_Handler,
		},
		{
			MethodName: "ListProjectGrantMembers",
			Handler:    _ManagementService_ListProjectGrantMembers_Handler,
		},
		{
			MethodName: "AddProjectGrantMember",
			Handler:    _ManagementService_AddProjectGrantMember_Handler,
		},
		{
			MethodName: "UpdateProjectGrantMember",
			Handler:    _ManagementService_UpdateProjectGrantMember_Handler,
		},
		{
			MethodName: "RemoveProjectGrantMember",
			Handler:    _ManagementService_RemoveProjectGrantMember_Handler,
		},
		{
			MethodName: "GetUserGrantByID",
			Handler:    _ManagementService_GetUserGrantByID_Handler,
		},
		{
			MethodName: "ListUserGrants",
			Handler:    _ManagementService_ListUserGrants_Handler,
		},
		{
			MethodName: "AddUserGrant",
			Handler:    _ManagementService_AddUserGrant_Handler,
		},
		{
			MethodName: "UpdateUserGrant",
			Handler:    _ManagementService_UpdateUserGrant_Handler,
		},
		{
			MethodName: "DeactivateUserGrant",
			Handler:    _ManagementService_DeactivateUserGrant_Handler,
		},
		{
			MethodName: "ReactivateUserGrant",
			Handler:    _ManagementService_ReactivateUserGrant_Handler,
		},
		{
			MethodName: "RemoveUserGrant",
			Handler:    _ManagementService_RemoveUserGrant_Handler,
		},
		{
			MethodName: "BulkRemoveUserGrant",
			Handler:    _ManagementService_BulkRemoveUserGrant_Handler,
		},
		{
			MethodName: "GetOrgIAMPolicy",
			Handler:    _ManagementService_GetOrgIAMPolicy_Handler,
		},
		{
			MethodName: "GetDomainPolicy",
			Handler:    _ManagementService_GetDomainPolicy_Handler,
		},
		{
			MethodName: "GetLoginPolicy",
			Handler:    _ManagementService_GetLoginPolicy_Handler,
		},
		{
			MethodName: "GetDefaultLoginPolicy",
			Handler:    _ManagementService_GetDefaultLoginPolicy_Handler,
		},
		{
			MethodName: "AddCustomLoginPolicy",
			Handler:    _ManagementService_AddCustomLoginPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomLoginPolicy",
			Handler:    _ManagementService_UpdateCustomLoginPolicy_Handler,
		},
		{
			MethodName: "ResetLoginPolicyToDefault",
			Handler:    _ManagementService_ResetLoginPolicyToDefault_Handler,
		},
		{
			MethodName: "ListLoginPolicyIDPs",
			Handler:    _ManagementService_ListLoginPolicyIDPs_Handler,
		},
		{
			MethodName: "AddIDPToLoginPolicy",
			Handler:    _ManagementService_AddIDPToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveIDPFromLoginPolicy",
			Handler:    _ManagementService_RemoveIDPFromLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicySecondFactors",
			Handler:    _ManagementService_ListLoginPolicySecondFactors_Handler,
		},
		{
			MethodName: "AddSecondFactorToLoginPolicy",
			Handler:    _ManagementService_AddSecondFactorToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveSecondFactorFromLoginPolicy",
			Handler:    _ManagementService_RemoveSecondFactorFromLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicyMultiFactors",
			Handler:    _ManagementService_ListLoginPolicyMultiFactors_Handler,
		},
		{
			MethodName: "AddMultiFactorToLoginPolicy",
			Handler:    _ManagementService_AddMultiFactorToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveMultiFactorFromLoginPolicy",
			Handler:    _ManagementService_RemoveMultiFactorFromLoginPolicy_Handler,
		},
		{
			MethodName: "GetPasswordComplexityPolicy",
			Handler:    _ManagementService_GetPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "GetDefaultPasswordComplexityPolicy",
			Handler:    _ManagementService_GetDefaultPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "AddCustomPasswordComplexityPolicy",
			Handler:    _ManagementService_AddCustomPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomPasswordComplexityPolicy",
			Handler:    _ManagementService_UpdateCustomPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "ResetPasswordComplexityPolicyToDefault",
			Handler:    _ManagementService_ResetPasswordComplexityPolicyToDefault_Handler,
		},
		{
			MethodName: "GetPasswordAgePolicy",
			Handler:    _ManagementService_GetPasswordAgePolicy_Handler,
		},
		{
			MethodName: "GetDefaultPasswordAgePolicy",
			Handler:    _ManagementService_GetDefaultPasswordAgePolicy_Handler,
		},
		{
			MethodName: "AddCustomPasswordAgePolicy",
			Handler:    _ManagementService_AddCustomPasswordAgePolicy_Handler,
		},
		{
			MethodName: "UpdateCustomPasswordAgePolicy",
			Handler:    _ManagementService_UpdateCustomPasswordAgePolicy_Handler,
		},
		{
			MethodName: "ResetPasswordAgePolicyToDefault",
			Handler:    _ManagementService_ResetPasswordAgePolicyToDefault_Handler,
		},
		{
			MethodName: "GetLockoutPolicy",
			Handler:    _ManagementService_GetLockoutPolicy_Handler,
		},
		{
			MethodName: "GetDefaultLockoutPolicy",
			Handler:    _ManagementService_GetDefaultLockoutPolicy_Handler,
		},
		{
			MethodName: "AddCustomLockoutPolicy",
			Handler:    _ManagementService_AddCustomLockoutPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomLockoutPolicy",
			Handler:    _ManagementService_UpdateCustomLockoutPolicy_Handler,
		},
		{
			MethodName: "ResetLockoutPolicyToDefault",
			Handler:    _ManagementService_ResetLockoutPolicyToDefault_Handler,
		},
		{
			MethodName: "GetPrivacyPolicy",
			Handler:    _ManagementService_GetPrivacyPolicy_Handler,
		},
		{
			MethodName: "GetDefaultPrivacyPolicy",
			Handler:    _ManagementService_GetDefaultPrivacyPolicy_Handler,
		},
		{
			MethodName: "AddCustomPrivacyPolicy",
			Handler:    _ManagementService_AddCustomPrivacyPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomPrivacyPolicy",
			Handler:    _ManagementService_UpdateCustomPrivacyPolicy_Handler,
		},
		{
			MethodName: "ResetPrivacyPolicyToDefault",
			Handler:    _ManagementService_ResetPrivacyPolicyToDefault_Handler,
		},
		{
			MethodName: "GetNotificationPolicy",
			Handler:    _ManagementService_GetNotificationPolicy_Handler,
		},
		{
			MethodName: "GetDefaultNotificationPolicy",
			Handler:    _ManagementService_GetDefaultNotificationPolicy_Handler,
		},
		{
			MethodName: "AddCustomNotificationPolicy",
			Handler:    _ManagementService_AddCustomNotificationPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomNotificationPolicy",
			Handler:    _ManagementService_UpdateCustomNotificationPolicy_Handler,
		},
		{
			MethodName: "ResetNotificationPolicyToDefault",
			Handler:    _ManagementService_ResetNotificationPolicyToDefault_Handler,
		},
		{
			MethodName: "GetLabelPolicy",
			Handler:    _ManagementService_GetLabelPolicy_Handler,
		},
		{
			MethodName: "GetPreviewLabelPolicy",
			Handler:    _ManagementService_GetPreviewLabelPolicy_Handler,
		},
		{
			MethodName: "GetDefaultLabelPolicy",
			Handler:    _ManagementService_GetDefaultLabelPolicy_Handler,
		},
		{
			MethodName: "AddCustomLabelPolicy",
			Handler:    _ManagementService_AddCustomLabelPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomLabelPolicy",
			Handler:    _ManagementService_UpdateCustomLabelPolicy_Handler,
		},
		{
			MethodName: "ActivateCustomLabelPolicy",
			Handler:    _ManagementService_ActivateCustomLabelPolicy_Handler,
		},
		{
			MethodName: "RemoveCustomLabelPolicyLogo",
			Handler:    _ManagementService_RemoveCustomLabelPolicyLogo_Handler,
		},
		{
			MethodName: "RemoveCustomLabelPolicyLogoDark",
			Handler:    _ManagementService_RemoveCustomLabelPolicyLogoDark_Handler,
		},
		{
			MethodName: "RemoveCustomLabelPolicyIcon",
			Handler:    _ManagementService_RemoveCustomLabelPolicyIcon_Handler,
		},
		{
			MethodName: "RemoveCustomLabelPolicyIconDark",
			Handler:    _ManagementService_RemoveCustomLabelPolicyIconDark_Handler,
		},
		{
			MethodName: "RemoveCustomLabelPolicyFont",
			Handler:    _ManagementService_RemoveCustomLabelPolicyFont_Handler,
		},
		{
			MethodName: "ResetLabelPolicyToDefault",
			Handler:    _ManagementService_ResetLabelPolicyToDefault_Handler,
		},
		{
			MethodName: "GetCustomInitMessageText",
			Handler:    _ManagementService_GetCustomInitMessageText_Handler,
		},
		{
			MethodName: "GetDefaultInitMessageText",
			Handler:    _ManagementService_GetDefaultInitMessageText_Handler,
		},
		{
			MethodName: "SetCustomInitMessageText",
			Handler:    _ManagementService_SetCustomInitMessageText_Handler,
		},
		{
			MethodName: "ResetCustomInitMessageTextToDefault",
			Handler:    _ManagementService_ResetCustomInitMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetCustomPasswordResetMessageText",
			Handler:    _ManagementService_GetCustomPasswordResetMessageText_Handler,
		},
		{
			MethodName: "GetDefaultPasswordResetMessageText",
			Handler:    _ManagementService_GetDefaultPasswordResetMessageText_Handler,
		},
		{
			MethodName: "SetCustomPasswordResetMessageText",
			Handler:    _ManagementService_SetCustomPasswordResetMessageText_Handler,
		},
		{
			MethodName: "ResetCustomPasswordResetMessageTextToDefault",
			Handler:    _ManagementService_ResetCustomPasswordResetMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetCustomVerifyEmailMessageText",
			Handler:    _ManagementService_GetCustomVerifyEmailMessageText_Handler,
		},
		{
			MethodName: "GetDefaultVerifyEmailMessageText",
			Handler:    _ManagementService_GetDefaultVerifyEmailMessageText_Handler,
		},
		{
			MethodName: "SetCustomVerifyEmailMessageText",
			Handler:    _ManagementService_SetCustomVerifyEmailMessageText_Handler,
		},
		{
			MethodName: "ResetCustomVerifyEmailMessageTextToDefault",
			Handler:    _ManagementService_ResetCustomVerifyEmailMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetCustomVerifyPhoneMessageText",
			Handler:    _ManagementService_GetCustomVerifyPhoneMessageText_Handler,
		},
		{
			MethodName: "GetDefaultVerifyPhoneMessageText",
			Handler:    _ManagementService_GetDefaultVerifyPhoneMessageText_Handler,
		},
		{
			MethodName: "SetCustomVerifyPhoneMessageText",
			Handler:    _ManagementService_SetCustomVerifyPhoneMessageText_Handler,
		},
		{
			MethodName: "ResetCustomVerifyPhoneMessageTextToDefault",
			Handler:    _ManagementService_ResetCustomVerifyPhoneMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetCustomVerifySMSOTPMessageText",
			Handler:    _ManagementService_GetCustomVerifySMSOTPMessageText_Handler,
		},
		{
			MethodName: "GetDefaultVerifySMSOTPMessageText",
			Handler:    _ManagementService_GetDefaultVerifySMSOTPMessageText_Handler,
		},
		{
			MethodName: "SetCustomVerifySMSOTPMessageText",
			Handler:    _ManagementService_SetCustomVerifySMSOTPMessageText_Handler,
		},
		{
			MethodName: "ResetCustomVerifySMSOTPMessageTextToDefault",
			Handler:    _ManagementService_ResetCustomVerifySMSOTPMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetCustomVerifyEmailOTPMessageText",
			Handler:    _ManagementService_GetCustomVerifyEmailOTPMessageText_Handler,
		},
		{
			MethodName: "GetDefaultVerifyEmailOTPMessageText",
			Handler:    _ManagementService_GetDefaultVerifyEmailOTPMessageText_Handler,
		},
		{
			MethodName: "SetCustomVerifyEmailOTPMessageText",
			Handler:    _ManagementService_SetCustomVerifyEmailOTPMessageText_Handler,
		},
		{
			MethodName: "ResetCustomVerifyEmailOTPMessageTextToDefault",
			Handler:    _ManagementService_ResetCustomVerifyEmailOTPMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetCustomDomainClaimedMessageText",
			Handler:    _ManagementService_GetCustomDomainClaimedMessageText_Handler,
		},
		{
			MethodName: "GetDefaultDomainClaimedMessageText",
			Handler:    _ManagementService_GetDefaultDomainClaimedMessageText_Handler,
		},
		{
			MethodName: "SetCustomDomainClaimedMessageCustomText",
			Handler:    _ManagementService_SetCustomDomainClaimedMessageCustomText_Handler,
		},
		{
			MethodName: "ResetCustomDomainClaimedMessageTextToDefault",
			Handler:    _ManagementService_ResetCustomDomainClaimedMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetCustomPasswordlessRegistrationMessageText",
			Handler:    _ManagementService_GetCustomPasswordlessRegistrationMessageText_Handler,
		},
		{
			MethodName: "GetDefaultPasswordlessRegistrationMessageText",
			Handler:    _ManagementService_GetDefaultPasswordlessRegistrationMessageText_Handler,
		},
		{
			MethodName: "SetCustomPasswordlessRegistrationMessageCustomText",
			Handler:    _ManagementService_SetCustomPasswordlessRegistrationMessageCustomText_Handler,
		},
		{
			MethodName: "ResetCustomPasswordlessRegistrationMessageTextToDefault",
			Handler:    _ManagementService_ResetCustomPasswordlessRegistrationMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetCustomPasswordChangeMessageText",
			Handler:    _ManagementService_GetCustomPasswordChangeMessageText_Handler,
		},
		{
			MethodName: "GetDefaultPasswordChangeMessageText",
			Handler:    _ManagementService_GetDefaultPasswordChangeMessageText_Handler,
		},
		{
			MethodName: "SetCustomPasswordChangeMessageCustomText",
			Handler:    _ManagementService_SetCustomPasswordChangeMessageCustomText_Handler,
		},
		{
			MethodName: "ResetCustomPasswordChangeMessageTextToDefault",
			Handler:    _ManagementService_ResetCustomPasswordChangeMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetCustomLoginTexts",
			Handler:    _ManagementService_GetCustomLoginTexts_Handler,
		},
		{
			MethodName: "GetDefaultLoginTexts",
			Handler:    _ManagementService_GetDefaultLoginTexts_Handler,
		},
		{
			MethodName: "SetCustomLoginText",
			Handler:    _ManagementService_SetCustomLoginText_Handler,
		},
		{
			MethodName: "ResetCustomLoginTextToDefault",
			Handler:    _ManagementService_ResetCustomLoginTextToDefault_Handler,
		},
		{
			MethodName: "GetOrgIDPByID",
			Handler:    _ManagementService_GetOrgIDPByID_Handler,
		},
		{
			MethodName: "ListOrgIDPs",
			Handler:    _ManagementService_ListOrgIDPs_Handler,
		},
		{
			MethodName: "AddOrgOIDCIDP",
			Handler:    _ManagementService_AddOrgOIDCIDP_Handler,
		},
		{
			MethodName: "AddOrgJWTIDP",
			Handler:    _ManagementService_AddOrgJWTIDP_Handler,
		},
		{
			MethodName: "DeactivateOrgIDP",
			Handler:    _ManagementService_DeactivateOrgIDP_Handler,
		},
		{
			MethodName: "ReactivateOrgIDP",
			Handler:    _ManagementService_ReactivateOrgIDP_Handler,
		},
		{
			MethodName: "RemoveOrgIDP",
			Handler:    _ManagementService_RemoveOrgIDP_Handler,
		},
		{
			MethodName: "UpdateOrgIDP",
			Handler:    _ManagementService_UpdateOrgIDP_Handler,
		},
		{
			MethodName: "UpdateOrgIDPOIDCConfig",
			Handler:    _ManagementService_UpdateOrgIDPOIDCConfig_Handler,
		},
		{
			MethodName: "UpdateOrgIDPJWTConfig",
			Handler:    _ManagementService_UpdateOrgIDPJWTConfig_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _ManagementService_ListProviders_Handler,
		},
		{
			MethodName: "GetProviderByID",
			Handler:    _ManagementService_GetProviderByID_Handler,
		},
		{
			MethodName: "AddGenericOAuthProvider",
			Handler:    _ManagementService_AddGenericOAuthProvider_Handler,
		},
		{
			MethodName: "UpdateGenericOAuthProvider",
			Handler:    _ManagementService_UpdateGenericOAuthProvider_Handler,
		},
		{
			MethodName: "AddGenericOIDCProvider",
			Handler:    _ManagementService_AddGenericOIDCProvider_Handler,
		},
		{
			MethodName: "UpdateGenericOIDCProvider",
			Handler:    _ManagementService_UpdateGenericOIDCProvider_Handler,
		},
		{
			MethodName: "MigrateGenericOIDCProvider",
			Handler:    _ManagementService_MigrateGenericOIDCProvider_Handler,
		},
		{
			MethodName: "AddJWTProvider",
			Handler:    _ManagementService_AddJWTProvider_Handler,
		},
		{
			MethodName: "UpdateJWTProvider",
			Handler:    _ManagementService_UpdateJWTProvider_Handler,
		},
		{
			MethodName: "AddAzureADProvider",
			Handler:    _ManagementService_AddAzureADProvider_Handler,
		},
		{
			MethodName: "UpdateAzureADProvider",
			Handler:    _ManagementService_UpdateAzureADProvider_Handler,
		},
		{
			MethodName: "AddGitHubProvider",
			Handler:    _ManagementService_AddGitHubProvider_Handler,
		},
		{
			MethodName: "UpdateGitHubProvider",
			Handler:    _ManagementService_UpdateGitHubProvider_Handler,
		},
		{
			MethodName: "AddGitHubEnterpriseServerProvider",
			Handler:    _ManagementService_AddGitHubEnterpriseServerProvider_Handler,
		},
		{
			MethodName: "UpdateGitHubEnterpriseServerProvider",
			Handler:    _ManagementService_UpdateGitHubEnterpriseServerProvider_Handler,
		},
		{
			MethodName: "AddGitLabProvider",
			Handler:    _ManagementService_AddGitLabProvider_Handler,
		},
		{
			MethodName: "UpdateGitLabProvider",
			Handler:    _ManagementService_UpdateGitLabProvider_Handler,
		},
		{
			MethodName: "AddGitLabSelfHostedProvider",
			Handler:    _ManagementService_AddGitLabSelfHostedProvider_Handler,
		},
		{
			MethodName: "UpdateGitLabSelfHostedProvider",
			Handler:    _ManagementService_UpdateGitLabSelfHostedProvider_Handler,
		},
		{
			MethodName: "AddGoogleProvider",
			Handler:    _ManagementService_AddGoogleProvider_Handler,
		},
		{
			MethodName: "UpdateGoogleProvider",
			Handler:    _ManagementService_UpdateGoogleProvider_Handler,
		},
		{
			MethodName: "AddLDAPProvider",
			Handler:    _ManagementService_AddLDAPProvider_Handler,
		},
		{
			MethodName: "UpdateLDAPProvider",
			Handler:    _ManagementService_UpdateLDAPProvider_Handler,
		},
		{
			MethodName: "AddAppleProvider",
			Handler:    _ManagementService_AddAppleProvider_Handler,
		},
		{
			MethodName: "UpdateAppleProvider",
			Handler:    _ManagementService_UpdateAppleProvider_Handler,
		},
		{
			MethodName: "AddSAMLProvider",
			Handler:    _ManagementService_AddSAMLProvider_Handler,
		},
		{
			MethodName: "UpdateSAMLProvider",
			Handler:    _ManagementService_UpdateSAMLProvider_Handler,
		},
		{
			MethodName: "RegenerateSAMLProviderCertificate",
			Handler:    _ManagementService_RegenerateSAMLProviderCertificate_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _ManagementService_DeleteProvider_Handler,
		},
		{
			MethodName: "ListActions",
			Handler:    _ManagementService_ListActions_Handler,
		},
		{
			MethodName: "GetAction",
			Handler:    _ManagementService_GetAction_Handler,
		},
		{
			MethodName: "CreateAction",
			Handler:    _ManagementService_CreateAction_Handler,
		},
		{
			MethodName: "UpdateAction",
			Handler:    _ManagementService_UpdateAction_Handler,
		},
		{
			MethodName: "DeactivateAction",
			Handler:    _ManagementService_DeactivateAction_Handler,
		},
		{
			MethodName: "ReactivateAction",
			Handler:    _ManagementService_ReactivateAction_Handler,
		},
		{
			MethodName: "DeleteAction",
			Handler:    _ManagementService_DeleteAction_Handler,
		},
		{
			MethodName: "ListFlowTypes",
			Handler:    _ManagementService_ListFlowTypes_Handler,
		},
		{
			MethodName: "ListFlowTriggerTypes",
			Handler:    _ManagementService_ListFlowTriggerTypes_Handler,
		},
		{
			MethodName: "GetFlow",
			Handler:    _ManagementService_GetFlow_Handler,
		},
		{
			MethodName: "ClearFlow",
			Handler:    _ManagementService_ClearFlow_Handler,
		},
		{
			MethodName: "SetTriggerActions",
			Handler:    _ManagementService_SetTriggerActions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/management.proto",
}
