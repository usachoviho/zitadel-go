// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementServiceClient is the client API for ManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementServiceClient interface {
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	GetOIDCInformation(ctx context.Context, in *GetOIDCInformationRequest, opts ...grpc.CallOption) (*GetOIDCInformationResponse, error)
	// Returns some needed settings of the IAM (Global Organisation ID, Zitadel Project ID)
	GetIAM(ctx context.Context, in *GetIAMRequest, opts ...grpc.CallOption) (*GetIAMResponse, error)
	// Returns the requested full blown user (human or machine)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	// Searches a user over all organisations
	// the login name has to match exactly
	GetUserByLoginNameGlobal(ctx context.Context, in *GetUserByLoginNameGlobalRequest, opts ...grpc.CallOption) (*GetUserByLoginNameGlobalResponse, error)
	// Return the users matching the query
	// Limit should always be set, there is a default limit set by the service
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Returns the history of the user (each event)
	// Limit should always be set, there is a default limit set by the service
	ListUserChanges(ctx context.Context, in *ListUserChangesRequest, opts ...grpc.CallOption) (*ListUserChangesResponse, error)
	// Returns if a user with the searched email or username is unique
	IsUserUnique(ctx context.Context, in *IsUserUniqueRequest, opts ...grpc.CallOption) (*IsUserUniqueResponse, error)
	// Create a user of the type human
	// A email will be sent to the user if email is not verified or no password is set
	// If a password is given, the user has to change on the next login
	AddHumanUser(ctx context.Context, in *AddHumanUserRequest, opts ...grpc.CallOption) (*AddHumanUserResponse, error)
	// Create a user of the type human
	// A email will be sent to the user if email is not verified or no password is set
	// If a password is given, the user doesn't have to change on the next login
	ImportHumanUser(ctx context.Context, in *ImportHumanUserRequest, opts ...grpc.CallOption) (*ImportHumanUserResponse, error)
	// Create a user of the type machine
	AddMachineUser(ctx context.Context, in *AddMachineUserRequest, opts ...grpc.CallOption) (*AddMachineUserResponse, error)
	// Changes the user state to deactivated
	// The user will not be able to login
	// returns an error if user state is already deactivated
	DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error)
	// Changes the user state to active
	// returns an error if user state is not deactivated
	ReactivateUser(ctx context.Context, in *ReactivateUserRequest, opts ...grpc.CallOption) (*ReactivateUserResponse, error)
	// Changes the user state to deactivated
	// The user will not be able to login
	// returns an error if user state is already locked
	LockUser(ctx context.Context, in *LockUserRequest, opts ...grpc.CallOption) (*LockUserResponse, error)
	// Changes the user state to active
	// returns an error if user state is not locked
	UnlockUser(ctx context.Context, in *UnlockUserRequest, opts ...grpc.CallOption) (*UnlockUserResponse, error)
	// Changes the user state to deleted
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	// Changes the username
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error)
	// Returns the profile of the human
	GetHumanProfile(ctx context.Context, in *GetHumanProfileRequest, opts ...grpc.CallOption) (*GetHumanProfileResponse, error)
	// Changes the profile of the human
	UpdateHumanProfile(ctx context.Context, in *UpdateHumanProfileRequest, opts ...grpc.CallOption) (*UpdateHumanProfileResponse, error)
	// GetHumanEmail returns the email and verified state of the human
	GetHumanEmail(ctx context.Context, in *GetHumanEmailRequest, opts ...grpc.CallOption) (*GetHumanEmailResponse, error)
	// Changes the email of the human
	// If state is not verified, the user will get a verification email
	UpdateHumanEmail(ctx context.Context, in *UpdateHumanEmailRequest, opts ...grpc.CallOption) (*UpdateHumanEmailResponse, error)
	// Resends an email to the given email address to finish the initialization process of the user
	// Changes the email address of the user if it is provided
	ResendHumanInitialization(ctx context.Context, in *ResendHumanInitializationRequest, opts ...grpc.CallOption) (*ResendHumanInitializationResponse, error)
	// Resends an email to the given email address to finish the email verification process of the user
	ResendHumanEmailVerification(ctx context.Context, in *ResendHumanEmailVerificationRequest, opts ...grpc.CallOption) (*ResendHumanEmailVerificationResponse, error)
	// Returns the phone and verified state of the human phone
	GetHumanPhone(ctx context.Context, in *GetHumanPhoneRequest, opts ...grpc.CallOption) (*GetHumanPhoneResponse, error)
	// Changes the phone number
	// If verified is not set, the user will get an sms to verify the number
	UpdateHumanPhone(ctx context.Context, in *UpdateHumanPhoneRequest, opts ...grpc.CallOption) (*UpdateHumanPhoneResponse, error)
	// Removes the phone number of the human
	RemoveHumanPhone(ctx context.Context, in *RemoveHumanPhoneRequest, opts ...grpc.CallOption) (*RemoveHumanPhoneResponse, error)
	// An sms will be sent to the given phone number to finish the phone verification process of the user
	ResendHumanPhoneVerification(ctx context.Context, in *ResendHumanPhoneVerificationRequest, opts ...grpc.CallOption) (*ResendHumanPhoneVerificationResponse, error)
	// A Manager is only allowed to set an initial password, on the next login the user has to change his password
	SetHumanInitialPassword(ctx context.Context, in *SetHumanInitialPasswordRequest, opts ...grpc.CallOption) (*SetHumanInitialPasswordResponse, error)
	// An email will be sent to the given address to reset the password of the user
	SendHumanResetPasswordNotification(ctx context.Context, in *SendHumanResetPasswordNotificationRequest, opts ...grpc.CallOption) (*SendHumanResetPasswordNotificationResponse, error)
	// Returns a list of all factors (second and multi) which are configured on the user
	ListHumanAuthFactors(ctx context.Context, in *ListHumanAuthFactorsRequest, opts ...grpc.CallOption) (*ListHumanAuthFactorsResponse, error)
	// The otp second factor will be removed from the user
	// Because only one otp can be configured per user, the configured one will be removed
	RemoveHumanAuthFactorOTP(ctx context.Context, in *RemoveHumanAuthFactorOTPRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorOTPResponse, error)
	// The u2f (universial second factor) will be removed from the user
	RemoveHumanAuthFactorU2F(ctx context.Context, in *RemoveHumanAuthFactorU2FRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorU2FResponse, error)
	// Returns all configured passwordless authentications
	ListHumanPasswordless(ctx context.Context, in *ListHumanPasswordlessRequest, opts ...grpc.CallOption) (*ListHumanPasswordlessResponse, error)
	// Removed a configured passwordless authentication
	RemoveHumanPasswordless(ctx context.Context, in *RemoveHumanPasswordlessRequest, opts ...grpc.CallOption) (*RemoveHumanPasswordlessResponse, error)
	// Changes a machine user
	UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*UpdateMachineResponse, error)
	// Returns a machine key of a (machine) user
	GetMachineKeyByIDs(ctx context.Context, in *GetMachineKeyByIDsRequest, opts ...grpc.CallOption) (*GetMachineKeyByIDsResponse, error)
	// Returns all machine keys of a (machine) user which match the query
	// Limit should always be set, there is a default limit set by the service
	ListMachineKeys(ctx context.Context, in *ListMachineKeysRequest, opts ...grpc.CallOption) (*ListMachineKeysResponse, error)
	// Generates a new machine key, details should be stored after return
	AddMachineKey(ctx context.Context, in *AddMachineKeyRequest, opts ...grpc.CallOption) (*AddMachineKeyResponse, error)
	// Removed a machine key
	RemoveMachineKey(ctx context.Context, in *RemoveMachineKeyRequest, opts ...grpc.CallOption) (*RemoveMachineKeyResponse, error)
	// Lists all identity providers (social logins) which a human has configured (e.g Google, Microsoft, AD, etc..)
	// Limit should always be set, there is a default limit set by the service
	ListHumanLinkedIDPs(ctx context.Context, in *ListHumanLinkedIDPsRequest, opts ...grpc.CallOption) (*ListHumanLinkedIDPsResponse, error)
	// Removed a configured identity provider (social login) of a human
	RemoveHumanLinkedIDP(ctx context.Context, in *RemoveHumanLinkedIDPRequest, opts ...grpc.CallOption) (*RemoveHumanLinkedIDPResponse, error)
	// Show all the permissions a user has iin ZITADEL (ZITADEL Manager)
	// Limit should always be set, there is a default limit set by the service
	ListUserMemberships(ctx context.Context, in *ListUserMembershipsRequest, opts ...grpc.CallOption) (*ListUserMembershipsResponse, error)
	// Returns the org given in the header
	GetMyOrg(ctx context.Context, in *GetMyOrgRequest, opts ...grpc.CallOption) (*GetMyOrgResponse, error)
	// Search a org over all organisations
	// Domain must match exactly
	GetOrgByDomainGlobal(ctx context.Context, in *GetOrgByDomainGlobalRequest, opts ...grpc.CallOption) (*GetOrgByDomainGlobalResponse, error)
	// Returns the history of my organisation (each event)
	// Limit should always be set, there is a default limit set by the service
	ListOrgChanges(ctx context.Context, in *ListOrgChangesRequest, opts ...grpc.CallOption) (*ListOrgChangesResponse, error)
	// Creates a new organisation
	AddOrg(ctx context.Context, in *AddOrgRequest, opts ...grpc.CallOption) (*AddOrgResponse, error)
	// Sets the state of my organisation to deactivated
	// Users of this organisation will not be able login
	DeactivateOrg(ctx context.Context, in *DeactivateOrgRequest, opts ...grpc.CallOption) (*DeactivateOrgResponse, error)
	// Sets the state of my organisation to active
	ReactivateOrg(ctx context.Context, in *ReactivateOrgRequest, opts ...grpc.CallOption) (*ReactivateOrgResponse, error)
	// Returns all registered domains of my organisation
	// Limit should always be set, there is a default limit set by the service
	ListOrgDomains(ctx context.Context, in *ListOrgDomainsRequest, opts ...grpc.CallOption) (*ListOrgDomainsResponse, error)
	// Adds a new domain to my organisation
	AddOrgDomain(ctx context.Context, in *AddOrgDomainRequest, opts ...grpc.CallOption) (*AddOrgDomainResponse, error)
	// Removed the domain from my organisation
	RemoveOrgDomain(ctx context.Context, in *RemoveOrgDomainRequest, opts ...grpc.CallOption) (*RemoveOrgDomainResponse, error)
	// Generates a new file to validate you domain
	GenerateOrgDomainValidation(ctx context.Context, in *GenerateOrgDomainValidationRequest, opts ...grpc.CallOption) (*GenerateOrgDomainValidationResponse, error)
	// Validates your domain with the choosen method
	// Validated domains must be unique
	ValidateOrgDomain(ctx context.Context, in *ValidateOrgDomainRequest, opts ...grpc.CallOption) (*ValidateOrgDomainResponse, error)
	// Sets the domain as primary
	// Primary domain is shown as suffix on the preferred username on the users of the organisation
	SetPrimaryOrgDomain(ctx context.Context, in *SetPrimaryOrgDomainRequest, opts ...grpc.CallOption) (*SetPrimaryOrgDomainResponse, error)
	// Returns all ZITADEL roles which are for organisation managers
	ListOrgMemberRoles(ctx context.Context, in *ListOrgMemberRolesRequest, opts ...grpc.CallOption) (*ListOrgMemberRolesResponse, error)
	// Returns all ZITADEL managers of this organisation (Project and Project Grant managers not included)
	// Limit should always be set, there is a default limit set by the service
	ListOrgMembers(ctx context.Context, in *ListOrgMembersRequest, opts ...grpc.CallOption) (*ListOrgMembersResponse, error)
	// Adds a new organisation manager, which is allowed to administrate ZITADEL
	AddOrgMember(ctx context.Context, in *AddOrgMemberRequest, opts ...grpc.CallOption) (*AddOrgMemberResponse, error)
	// Changes the organisation manager
	UpdateOrgMember(ctx context.Context, in *UpdateOrgMemberRequest, opts ...grpc.CallOption) (*UpdateOrgMemberResponse, error)
	// Removes an organisation manager
	RemoveOrgMember(ctx context.Context, in *RemoveOrgMemberRequest, opts ...grpc.CallOption) (*RemoveOrgMemberResponse, error)
	// Returns a project from my organisation (no granted projects)
	GetProjectByID(ctx context.Context, in *GetProjectByIDRequest, opts ...grpc.CallOption) (*GetProjectByIDResponse, error)
	// returns a project my organisation got granted from another organisation
	GetGrantedProjectByID(ctx context.Context, in *GetGrantedProjectByIDRequest, opts ...grpc.CallOption) (*GetGrantedProjectByIDResponse, error)
	// Returns all projects my organisation is the owner (no granted projects)
	// Limit should always be set, there is a default limit set by the service
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// returns all projects my organisation got granted from another organisation
	// Limit should always be set, there is a default limit set by the service
	ListGrantedProjects(ctx context.Context, in *ListGrantedProjectsRequest, opts ...grpc.CallOption) (*ListGrantedProjectsResponse, error)
	// returns all roles of a project grant
	// Limit should always be set, there is a default limit set by the service
	ListGrantedProjectRoles(ctx context.Context, in *ListGrantedProjectRolesRequest, opts ...grpc.CallOption) (*ListGrantedProjectRolesResponse, error)
	// Returns the history of the project (each event)
	// Limit should always be set, there is a default limit set by the service
	ListProjectChanges(ctx context.Context, in *ListProjectChangesRequest, opts ...grpc.CallOption) (*ListProjectChangesResponse, error)
	// Adds an new project to the organisation
	AddProject(ctx context.Context, in *AddProjectRequest, opts ...grpc.CallOption) (*AddProjectResponse, error)
	// Changes a project
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// Sets the state of a project to deactivated
	// Returns an error if project is already deactivated
	DeactivateProject(ctx context.Context, in *DeactivateProjectRequest, opts ...grpc.CallOption) (*DeactivateProjectResponse, error)
	// Sets the state of a project to active
	// Returns an error if project is not deactivated
	ReactivateProject(ctx context.Context, in *ReactivateProjectRequest, opts ...grpc.CallOption) (*ReactivateProjectResponse, error)
	// Removes a project
	// All project grants, applications and user grants for this project will be removed
	RemoveProject(ctx context.Context, in *RemoveProjectRequest, opts ...grpc.CallOption) (*RemoveProjectResponse, error)
	// Returns all roles of a project matching the search query
	// If no limit is requested, default limit will be set, if the limit is higher then the default an error will be returned
	ListProjectRoles(ctx context.Context, in *ListProjectRolesRequest, opts ...grpc.CallOption) (*ListProjectRolesResponse, error)
	// Adds a role to a project, key must be unique in the project
	AddProjectRole(ctx context.Context, in *AddProjectRoleRequest, opts ...grpc.CallOption) (*AddProjectRoleResponse, error)
	// add a list of project roles in one request
	BulkAddProjectRoles(ctx context.Context, in *BulkAddProjectRolesRequest, opts ...grpc.CallOption) (*BulkAddProjectRolesResponse, error)
	// Changes a project role, key is not editable
	// If a key should change, remove the role and create a new
	UpdateProjectRole(ctx context.Context, in *UpdateProjectRoleRequest, opts ...grpc.CallOption) (*UpdateProjectRoleResponse, error)
	// Removes role from UserGrants, ProjectGrants and from Project
	RemoveProjectRole(ctx context.Context, in *RemoveProjectRoleRequest, opts ...grpc.CallOption) (*RemoveProjectRoleResponse, error)
	// Returns all ZITADEL roles which are for project managers
	ListProjectMemberRoles(ctx context.Context, in *ListProjectMemberRolesRequest, opts ...grpc.CallOption) (*ListProjectMemberRolesResponse, error)
	// Returns all ZITADEL managers of a projects
	// Limit should always be set, there is a default limit set by the service
	ListProjectMembers(ctx context.Context, in *ListProjectMembersRequest, opts ...grpc.CallOption) (*ListProjectMembersResponse, error)
	// Adds a new project manager, which is allowed to administrate in ZITADEL
	AddProjectMember(ctx context.Context, in *AddProjectMemberRequest, opts ...grpc.CallOption) (*AddProjectMemberResponse, error)
	// Change project manager, which is allowed to administrate in ZITADEL
	UpdateProjectMember(ctx context.Context, in *UpdateProjectMemberRequest, opts ...grpc.CallOption) (*UpdateProjectMemberResponse, error)
	// Remove project manager, which is allowed to administrate in ZITADEL
	RemoveProjectMember(ctx context.Context, in *RemoveProjectMemberRequest, opts ...grpc.CallOption) (*RemoveProjectMemberResponse, error)
	// Returns an application (oidc or api)
	GetAppByID(ctx context.Context, in *GetAppByIDRequest, opts ...grpc.CallOption) (*GetAppByIDResponse, error)
	// Returns all applications of a project matching the query
	// Limit should always be set, there is a default limit set by the service
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// Returns the history of the application (each event)
	// Limit should always be set, there is a default limit set by the service
	ListAppChanges(ctx context.Context, in *ListAppChangesRequest, opts ...grpc.CallOption) (*ListAppChangesResponse, error)
	// Adds a new oidc client
	// Returns a client id
	// Returns a new generated secret if needed (Depending on the configuration)
	AddOIDCApp(ctx context.Context, in *AddOIDCAppRequest, opts ...grpc.CallOption) (*AddOIDCAppResponse, error)
	// Adds a new api application
	// Returns a client id
	// Returns a new generated secret if needed (Depending on the configuration)
	AddAPIApp(ctx context.Context, in *AddAPIAppRequest, opts ...grpc.CallOption) (*AddAPIAppResponse, error)
	// Changes application
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	// Changes the configuration of the oidc client
	UpdateOIDCAppConfig(ctx context.Context, in *UpdateOIDCAppConfigRequest, opts ...grpc.CallOption) (*UpdateOIDCAppConfigResponse, error)
	// Changes the configuration of the api application
	UpdateAPIAppConfig(ctx context.Context, in *UpdateAPIAppConfigRequest, opts ...grpc.CallOption) (*UpdateAPIAppConfigResponse, error)
	// Set the state to deactivated
	// Its not possible to request tokens for deactivated apps
	// Returns an error if already deactivated
	DeactivateApp(ctx context.Context, in *DeactivateAppRequest, opts ...grpc.CallOption) (*DeactivateAppResponse, error)
	// Set the state to active
	// Returns an error if not deactivated
	ReactivateApp(ctx context.Context, in *ReactivateAppRequest, opts ...grpc.CallOption) (*ReactivateAppResponse, error)
	// Removed the application
	RemoveApp(ctx context.Context, in *RemoveAppRequest, opts ...grpc.CallOption) (*RemoveAppResponse, error)
	// Generates a new client secret for the oidc client, make sure to save the response
	RegenerateOIDCClientSecret(ctx context.Context, in *RegenerateOIDCClientSecretRequest, opts ...grpc.CallOption) (*RegenerateOIDCClientSecretResponse, error)
	// Generates a new client secret for the api application, make sure to save the response
	RegenerateAPIClientSecret(ctx context.Context, in *RegenerateAPIClientSecretRequest, opts ...grpc.CallOption) (*RegenerateAPIClientSecretResponse, error)
	// Returns an application key
	GetAppKey(ctx context.Context, in *GetAppKeyRequest, opts ...grpc.CallOption) (*GetAppKeyResponse, error)
	// Returns all application keys matching the result
	// Limit should always be set, there is a default limit set by the service
	ListAppKeys(ctx context.Context, in *ListAppKeysRequest, opts ...grpc.CallOption) (*ListAppKeysResponse, error)
	// Creates a new app key
	// Will return key details in result, make sure to save it
	AddAppKey(ctx context.Context, in *AddAppKeyRequest, opts ...grpc.CallOption) (*AddAppKeyResponse, error)
	// Removes an app key
	RemoveAppKey(ctx context.Context, in *RemoveAppKeyRequest, opts ...grpc.CallOption) (*RemoveAppKeyResponse, error)
	// Returns a project grant (ProjectGrant = Grant another organisation for my project)
	GetProjectGrantByID(ctx context.Context, in *GetProjectGrantByIDRequest, opts ...grpc.CallOption) (*GetProjectGrantByIDResponse, error)
	// Returns all project grants matching the query, (ProjectGrant = Grant another organisation for my project)
	// Limit should always be set, there is a default limit set by the service
	ListProjectGrants(ctx context.Context, in *ListProjectGrantsRequest, opts ...grpc.CallOption) (*ListProjectGrantsResponse, error)
	// Add a new project grant (ProjectGrant = Grant another organisation for my project)
	// Project Grant will be listed in granted project of the other organisation
	AddProjectGrant(ctx context.Context, in *AddProjectGrantRequest, opts ...grpc.CallOption) (*AddProjectGrantResponse, error)
	// Change project grant (ProjectGrant = Grant another organisation for my project)
	// Project Grant will be listed in granted project of the other organisation
	UpdateProjectGrant(ctx context.Context, in *UpdateProjectGrantRequest, opts ...grpc.CallOption) (*UpdateProjectGrantResponse, error)
	// Set state of project grant to deactivated (ProjectGrant = Grant another organisation for my project)
	// Returns error if project not active
	DeactivateProjectGrant(ctx context.Context, in *DeactivateProjectGrantRequest, opts ...grpc.CallOption) (*DeactivateProjectGrantResponse, error)
	// Set state of project grant to active (ProjectGrant = Grant another organisation for my project)
	// Returns error if project not deactivated
	ReactivateProjectGrant(ctx context.Context, in *ReactivateProjectGrantRequest, opts ...grpc.CallOption) (*ReactivateProjectGrantResponse, error)
	// Removes project grant and all user grants for this project grant
	RemoveProjectGrant(ctx context.Context, in *RemoveProjectGrantRequest, opts ...grpc.CallOption) (*RemoveProjectGrantResponse, error)
	// Returns all ZITADEL roles which are for project grant managers
	ListProjectGrantMemberRoles(ctx context.Context, in *ListProjectGrantMemberRolesRequest, opts ...grpc.CallOption) (*ListProjectGrantMemberRolesResponse, error)
	// Returns all ZITADEL managers of this project grant
	// Limit should always be set, there is a default limit set by the service
	ListProjectGrantMembers(ctx context.Context, in *ListProjectGrantMembersRequest, opts ...grpc.CallOption) (*ListProjectGrantMembersResponse, error)
	// Adds a new project grant manager, which is allowed to administrate in ZITADEL
	AddProjectGrantMember(ctx context.Context, in *AddProjectGrantMemberRequest, opts ...grpc.CallOption) (*AddProjectGrantMemberResponse, error)
	// Changes project grant manager, which is allowed to administrate in ZITADEL
	UpdateProjectGrantMember(ctx context.Context, in *UpdateProjectGrantMemberRequest, opts ...grpc.CallOption) (*UpdateProjectGrantMemberResponse, error)
	// Removed project grant manager
	RemoveProjectGrantMember(ctx context.Context, in *RemoveProjectGrantMemberRequest, opts ...grpc.CallOption) (*RemoveProjectGrantMemberResponse, error)
	// Returns a user grant (authorization of a user for a project)
	GetUserGrantByID(ctx context.Context, in *GetUserGrantByIDRequest, opts ...grpc.CallOption) (*GetUserGrantByIDResponse, error)
	// Returns al user grant matching the query (authorizations of user for projects)
	// Limit should always be set, there is a default limit set by the service
	ListUserGrants(ctx context.Context, in *ListUserGrantRequest, opts ...grpc.CallOption) (*ListUserGrantResponse, error)
	// Creates a new user grant (authorization of a user for a project with specified roles)
	AddUserGrant(ctx context.Context, in *AddUserGrantRequest, opts ...grpc.CallOption) (*AddUserGrantResponse, error)
	// Changes a user grant (authorization of a user for a project with specified roles)
	UpdateUserGrant(ctx context.Context, in *UpdateUserGrantRequest, opts ...grpc.CallOption) (*UpdateUserGrantResponse, error)
	// Sets the state of a user grant to deactivated
	// User will not be able to use the granted project anymore
	// Returns an error if user grant is already deactivated
	DeactivateUserGrant(ctx context.Context, in *DeactivateUserGrantRequest, opts ...grpc.CallOption) (*DeactivateUserGrantResponse, error)
	// Sets the state of a user grant to active
	// Returns an error if user grant is not deactivated
	ReactivateUserGrant(ctx context.Context, in *ReactivateUserGrantRequest, opts ...grpc.CallOption) (*ReactivateUserGrantResponse, error)
	// Removes a user grant
	RemoveUserGrant(ctx context.Context, in *RemoveUserGrantRequest, opts ...grpc.CallOption) (*RemoveUserGrantResponse, error)
	// remove a list of user grants in one request
	BulkRemoveUserGrant(ctx context.Context, in *BulkRemoveUserGrantRequest, opts ...grpc.CallOption) (*BulkRemoveUserGrantResponse, error)
	GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...grpc.CallOption) (*GetFeaturesResponse, error)
	// Returns the org iam policy (this policy is managed by the iam administrator)
	GetOrgIAMPolicy(ctx context.Context, in *GetOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetOrgIAMPolicyResponse, error)
	// Returns the login policy of the organisation
	// With this policy the login gui can be configured
	GetLoginPolicy(ctx context.Context, in *GetLoginPolicyRequest, opts ...grpc.CallOption) (*GetLoginPolicyResponse, error)
	// Returns the default login policy configured in the IAM
	GetDefaultLoginPolicy(ctx context.Context, in *GetDefaultLoginPolicyRequest, opts ...grpc.CallOption) (*GetDefaultLoginPolicyResponse, error)
	// Add a custom login policy for the organisation
	// With this policy the login gui can be configured
	AddCustomLoginPolicy(ctx context.Context, in *AddCustomLoginPolicyRequest, opts ...grpc.CallOption) (*AddCustomLoginPolicyResponse, error)
	// Change the custom login policy for the organisation
	// With this policy the login gui can be configured
	UpdateCustomLoginPolicy(ctx context.Context, in *UpdateCustomLoginPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomLoginPolicyResponse, error)
	// Removes the custom login policy of the organisation
	// The default policy of the IAM will trigger after
	ResetLoginPolicyToDefault(ctx context.Context, in *ResetLoginPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetLoginPolicyToDefaultResponse, error)
	// Lists all possible identity providers configured on the organisation
	// Limit should always be set, there is a default limit set by the service
	ListLoginPolicyIDPs(ctx context.Context, in *ListLoginPolicyIDPsRequest, opts ...grpc.CallOption) (*ListLoginPolicyIDPsResponse, error)
	// Add a (preconfigured) identity provider to the custom login policy
	AddIDPToLoginPolicy(ctx context.Context, in *AddIDPToLoginPolicyRequest, opts ...grpc.CallOption) (*AddIDPToLoginPolicyResponse, error)
	// Remove a identity provider from the custom login policy
	RemoveIDPFromLoginPolicy(ctx context.Context, in *RemoveIDPFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveIDPFromLoginPolicyResponse, error)
	// Returns all configured second factors of the custom login policy
	ListLoginPolicySecondFactors(ctx context.Context, in *ListLoginPolicySecondFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicySecondFactorsResponse, error)
	// Adds a new second factor to the custom login policy
	AddSecondFactorToLoginPolicy(ctx context.Context, in *AddSecondFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddSecondFactorToLoginPolicyResponse, error)
	// Remove a second factor from the custom login policy
	RemoveSecondFactorFromLoginPolicy(ctx context.Context, in *RemoveSecondFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveSecondFactorFromLoginPolicyResponse, error)
	// Returns all configured multi factors of the custom login policy
	ListLoginPolicyMultiFactors(ctx context.Context, in *ListLoginPolicyMultiFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicyMultiFactorsResponse, error)
	// Adds a new multi factor to the custom login policy
	AddMultiFactorToLoginPolicy(ctx context.Context, in *AddMultiFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddMultiFactorToLoginPolicyResponse, error)
	// Remove a multi factor from the custom login policy
	RemoveMultiFactorFromLoginPolicy(ctx context.Context, in *RemoveMultiFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveMultiFactorFromLoginPolicyResponse, error)
	// Returns the password complexity policy of the organisation
	// With this policy the password strength can be configured
	GetPasswordComplexityPolicy(ctx context.Context, in *GetPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetPasswordComplexityPolicyResponse, error)
	// Returns the default password complexity policy of the IAM
	// With this policy the password strength can be configured
	GetDefaultPasswordComplexityPolicy(ctx context.Context, in *GetDefaultPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetDefaultPasswordComplexityPolicyResponse, error)
	// Add a custom password complexity policy for the organisation
	// With this policy the password strength can be configured
	AddCustomPasswordComplexityPolicy(ctx context.Context, in *AddCustomPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*AddCustomPasswordComplexityPolicyResponse, error)
	// Update the custom password complexity policy for the organisation
	// With this policy the password strength can be configured
	UpdateCustomPasswordComplexityPolicy(ctx context.Context, in *UpdateCustomPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPasswordComplexityPolicyResponse, error)
	// Removes the custom password complexity policy of the organisation
	// The default policy of the IAM will trigger after
	ResetPasswordComplexityPolicyToDefault(ctx context.Context, in *ResetPasswordComplexityPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPasswordComplexityPolicyToDefaultResponse, error)
	// The password age policy is not used at the moment
	GetPasswordAgePolicy(ctx context.Context, in *GetPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetPasswordAgePolicyResponse, error)
	// The password age policy is not used at the moment
	GetDefaultPasswordAgePolicy(ctx context.Context, in *GetDefaultPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetDefaultPasswordAgePolicyResponse, error)
	// The password age policy is not used at the moment
	AddCustomPasswordAgePolicy(ctx context.Context, in *AddCustomPasswordAgePolicyRequest, opts ...grpc.CallOption) (*AddCustomPasswordAgePolicyResponse, error)
	// The password age policy is not used at the moment
	UpdateCustomPasswordAgePolicy(ctx context.Context, in *UpdateCustomPasswordAgePolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPasswordAgePolicyResponse, error)
	// The password age policy is not used at the moment
	ResetPasswordAgePolicyToDefault(ctx context.Context, in *ResetPasswordAgePolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPasswordAgePolicyToDefaultResponse, error)
	// The password lockout policy is not used at the moment
	GetPasswordLockoutPolicy(ctx context.Context, in *GetPasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*GetPasswordLockoutPolicyResponse, error)
	// The password lockout policy is not used at the moment
	GetDefaultPasswordLockoutPolicy(ctx context.Context, in *GetDefaultPasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*GetDefaultPasswordLockoutPolicyResponse, error)
	// The password lockout policy is not used at the moment
	AddCustomPasswordLockoutPolicy(ctx context.Context, in *AddCustomPasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*AddCustomPasswordLockoutPolicyResponse, error)
	// The password lockout policy is not used at the moment
	UpdateCustomPasswordLockoutPolicy(ctx context.Context, in *UpdateCustomPasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPasswordLockoutPolicyResponse, error)
	// The password lockout policy is not used at the moment
	ResetPasswordLockoutPolicyToDefault(ctx context.Context, in *ResetPasswordLockoutPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPasswordLockoutPolicyToDefaultResponse, error)
	// Returns the label policy of the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	GetLabelPolicy(ctx context.Context, in *GetLabelPolicyRequest, opts ...grpc.CallOption) (*GetLabelPolicyResponse, error)
	// Returns the default label policy of the IAM
	// With this policy the private labeling can be configured (colors, etc.)
	GetDefaultLabelPolicy(ctx context.Context, in *GetDefaultLabelPolicyRequest, opts ...grpc.CallOption) (*GetDefaultLabelPolicyResponse, error)
	// Add a custom label policy for the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	AddCustomLabelPolicy(ctx context.Context, in *AddCustomLabelPolicyRequest, opts ...grpc.CallOption) (*AddCustomLabelPolicyResponse, error)
	// Changes the custom label policy for the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	UpdateCustomLabelPolicy(ctx context.Context, in *UpdateCustomLabelPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomLabelPolicyResponse, error)
	// Removes the custom label policy of the organisation
	// The default policy of the IAM will trigger after
	ResetLabelPolicyToDefault(ctx context.Context, in *ResetLabelPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetLabelPolicyToDefaultResponse, error)
	// Returns a identity provider configuration of the organisation
	GetOrgIDPByID(ctx context.Context, in *GetOrgIDPByIDRequest, opts ...grpc.CallOption) (*GetOrgIDPByIDResponse, error)
	// Returns all identity provider configuration in the organisation, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListOrgIDPs(ctx context.Context, in *ListOrgIDPsRequest, opts ...grpc.CallOption) (*ListOrgIDPsResponse, error)
	// Add a new identity provider configuration in the organisation
	// Provider must be OIDC compliant
	AddOrgOIDCIDP(ctx context.Context, in *AddOrgOIDCIDPRequest, opts ...grpc.CallOption) (*AddOrgOIDCIDPResponse, error)
	// Deactivate identity provider configuration
	// Users will not be able to use this provider for login (e.g Google, Microsoft, AD, etc)
	// Returns error if already deactivated
	DeactivateOrgIDP(ctx context.Context, in *DeactivateOrgIDPRequest, opts ...grpc.CallOption) (*DeactivateOrgIDPResponse, error)
	// Activate identity provider configuration
	// Returns error if not deactivated
	ReactivateOrgIDP(ctx context.Context, in *ReactivateOrgIDPRequest, opts ...grpc.CallOption) (*ReactivateOrgIDPResponse, error)
	// Removes identity provider configuration
	// Will remove all linked providers of this configuration on the users
	RemoveOrgIDP(ctx context.Context, in *RemoveOrgIDPRequest, opts ...grpc.CallOption) (*RemoveOrgIDPResponse, error)
	// Change identity provider configuration of the organisation
	UpdateOrgIDP(ctx context.Context, in *UpdateOrgIDPRequest, opts ...grpc.CallOption) (*UpdateOrgIDPResponse, error)
	// Change OIDC identity provider configuration of the organisation
	UpdateOrgIDPOIDCConfig(ctx context.Context, in *UpdateOrgIDPOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateOrgIDPOIDCConfigResponse, error)
}

type managementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementServiceClient(cc grpc.ClientConnInterface) ManagementServiceClient {
	return &managementServiceClient{cc}
}

func (c *managementServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetOIDCInformation(ctx context.Context, in *GetOIDCInformationRequest, opts ...grpc.CallOption) (*GetOIDCInformationResponse, error) {
	out := new(GetOIDCInformationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetOIDCInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetIAM(ctx context.Context, in *GetIAMRequest, opts ...grpc.CallOption) (*GetIAMResponse, error) {
	out := new(GetIAMResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetIAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUserByLoginNameGlobal(ctx context.Context, in *GetUserByLoginNameGlobalRequest, opts ...grpc.CallOption) (*GetUserByLoginNameGlobalResponse, error) {
	out := new(GetUserByLoginNameGlobalResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetUserByLoginNameGlobal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListUserChanges(ctx context.Context, in *ListUserChangesRequest, opts ...grpc.CallOption) (*ListUserChangesResponse, error) {
	out := new(ListUserChangesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListUserChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) IsUserUnique(ctx context.Context, in *IsUserUniqueRequest, opts ...grpc.CallOption) (*IsUserUniqueResponse, error) {
	out := new(IsUserUniqueResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/IsUserUnique", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddHumanUser(ctx context.Context, in *AddHumanUserRequest, opts ...grpc.CallOption) (*AddHumanUserResponse, error) {
	out := new(AddHumanUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddHumanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ImportHumanUser(ctx context.Context, in *ImportHumanUserRequest, opts ...grpc.CallOption) (*ImportHumanUserResponse, error) {
	out := new(ImportHumanUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ImportHumanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddMachineUser(ctx context.Context, in *AddMachineUserRequest, opts ...grpc.CallOption) (*AddMachineUserResponse, error) {
	out := new(AddMachineUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddMachineUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error) {
	out := new(DeactivateUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateUser(ctx context.Context, in *ReactivateUserRequest, opts ...grpc.CallOption) (*ReactivateUserResponse, error) {
	out := new(ReactivateUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) LockUser(ctx context.Context, in *LockUserRequest, opts ...grpc.CallOption) (*LockUserResponse, error) {
	out := new(LockUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/LockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UnlockUser(ctx context.Context, in *UnlockUserRequest, opts ...grpc.CallOption) (*UnlockUserResponse, error) {
	out := new(UnlockUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UnlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error) {
	out := new(UpdateUserNameResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetHumanProfile(ctx context.Context, in *GetHumanProfileRequest, opts ...grpc.CallOption) (*GetHumanProfileResponse, error) {
	out := new(GetHumanProfileResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetHumanProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateHumanProfile(ctx context.Context, in *UpdateHumanProfileRequest, opts ...grpc.CallOption) (*UpdateHumanProfileResponse, error) {
	out := new(UpdateHumanProfileResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateHumanProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetHumanEmail(ctx context.Context, in *GetHumanEmailRequest, opts ...grpc.CallOption) (*GetHumanEmailResponse, error) {
	out := new(GetHumanEmailResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetHumanEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateHumanEmail(ctx context.Context, in *UpdateHumanEmailRequest, opts ...grpc.CallOption) (*UpdateHumanEmailResponse, error) {
	out := new(UpdateHumanEmailResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateHumanEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResendHumanInitialization(ctx context.Context, in *ResendHumanInitializationRequest, opts ...grpc.CallOption) (*ResendHumanInitializationResponse, error) {
	out := new(ResendHumanInitializationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResendHumanInitialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResendHumanEmailVerification(ctx context.Context, in *ResendHumanEmailVerificationRequest, opts ...grpc.CallOption) (*ResendHumanEmailVerificationResponse, error) {
	out := new(ResendHumanEmailVerificationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResendHumanEmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetHumanPhone(ctx context.Context, in *GetHumanPhoneRequest, opts ...grpc.CallOption) (*GetHumanPhoneResponse, error) {
	out := new(GetHumanPhoneResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetHumanPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateHumanPhone(ctx context.Context, in *UpdateHumanPhoneRequest, opts ...grpc.CallOption) (*UpdateHumanPhoneResponse, error) {
	out := new(UpdateHumanPhoneResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateHumanPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanPhone(ctx context.Context, in *RemoveHumanPhoneRequest, opts ...grpc.CallOption) (*RemoveHumanPhoneResponse, error) {
	out := new(RemoveHumanPhoneResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResendHumanPhoneVerification(ctx context.Context, in *ResendHumanPhoneVerificationRequest, opts ...grpc.CallOption) (*ResendHumanPhoneVerificationResponse, error) {
	out := new(ResendHumanPhoneVerificationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResendHumanPhoneVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetHumanInitialPassword(ctx context.Context, in *SetHumanInitialPasswordRequest, opts ...grpc.CallOption) (*SetHumanInitialPasswordResponse, error) {
	out := new(SetHumanInitialPasswordResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetHumanInitialPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SendHumanResetPasswordNotification(ctx context.Context, in *SendHumanResetPasswordNotificationRequest, opts ...grpc.CallOption) (*SendHumanResetPasswordNotificationResponse, error) {
	out := new(SendHumanResetPasswordNotificationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SendHumanResetPasswordNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListHumanAuthFactors(ctx context.Context, in *ListHumanAuthFactorsRequest, opts ...grpc.CallOption) (*ListHumanAuthFactorsResponse, error) {
	out := new(ListHumanAuthFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListHumanAuthFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanAuthFactorOTP(ctx context.Context, in *RemoveHumanAuthFactorOTPRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorOTPResponse, error) {
	out := new(RemoveHumanAuthFactorOTPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanAuthFactorU2F(ctx context.Context, in *RemoveHumanAuthFactorU2FRequest, opts ...grpc.CallOption) (*RemoveHumanAuthFactorU2FResponse, error) {
	out := new(RemoveHumanAuthFactorU2FResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorU2F", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListHumanPasswordless(ctx context.Context, in *ListHumanPasswordlessRequest, opts ...grpc.CallOption) (*ListHumanPasswordlessResponse, error) {
	out := new(ListHumanPasswordlessResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListHumanPasswordless", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanPasswordless(ctx context.Context, in *RemoveHumanPasswordlessRequest, opts ...grpc.CallOption) (*RemoveHumanPasswordlessResponse, error) {
	out := new(RemoveHumanPasswordlessResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanPasswordless", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*UpdateMachineResponse, error) {
	out := new(UpdateMachineResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetMachineKeyByIDs(ctx context.Context, in *GetMachineKeyByIDsRequest, opts ...grpc.CallOption) (*GetMachineKeyByIDsResponse, error) {
	out := new(GetMachineKeyByIDsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetMachineKeyByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListMachineKeys(ctx context.Context, in *ListMachineKeysRequest, opts ...grpc.CallOption) (*ListMachineKeysResponse, error) {
	out := new(ListMachineKeysResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListMachineKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddMachineKey(ctx context.Context, in *AddMachineKeyRequest, opts ...grpc.CallOption) (*AddMachineKeyResponse, error) {
	out := new(AddMachineKeyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddMachineKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveMachineKey(ctx context.Context, in *RemoveMachineKeyRequest, opts ...grpc.CallOption) (*RemoveMachineKeyResponse, error) {
	out := new(RemoveMachineKeyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveMachineKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListHumanLinkedIDPs(ctx context.Context, in *ListHumanLinkedIDPsRequest, opts ...grpc.CallOption) (*ListHumanLinkedIDPsResponse, error) {
	out := new(ListHumanLinkedIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListHumanLinkedIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveHumanLinkedIDP(ctx context.Context, in *RemoveHumanLinkedIDPRequest, opts ...grpc.CallOption) (*RemoveHumanLinkedIDPResponse, error) {
	out := new(RemoveHumanLinkedIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveHumanLinkedIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListUserMemberships(ctx context.Context, in *ListUserMembershipsRequest, opts ...grpc.CallOption) (*ListUserMembershipsResponse, error) {
	out := new(ListUserMembershipsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListUserMemberships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetMyOrg(ctx context.Context, in *GetMyOrgRequest, opts ...grpc.CallOption) (*GetMyOrgResponse, error) {
	out := new(GetMyOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetMyOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetOrgByDomainGlobal(ctx context.Context, in *GetOrgByDomainGlobalRequest, opts ...grpc.CallOption) (*GetOrgByDomainGlobalResponse, error) {
	out := new(GetOrgByDomainGlobalResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetOrgByDomainGlobal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgChanges(ctx context.Context, in *ListOrgChangesRequest, opts ...grpc.CallOption) (*ListOrgChangesResponse, error) {
	out := new(ListOrgChangesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOrg(ctx context.Context, in *AddOrgRequest, opts ...grpc.CallOption) (*AddOrgResponse, error) {
	out := new(AddOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateOrg(ctx context.Context, in *DeactivateOrgRequest, opts ...grpc.CallOption) (*DeactivateOrgResponse, error) {
	out := new(DeactivateOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateOrg(ctx context.Context, in *ReactivateOrgRequest, opts ...grpc.CallOption) (*ReactivateOrgResponse, error) {
	out := new(ReactivateOrgResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgDomains(ctx context.Context, in *ListOrgDomainsRequest, opts ...grpc.CallOption) (*ListOrgDomainsResponse, error) {
	out := new(ListOrgDomainsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOrgDomain(ctx context.Context, in *AddOrgDomainRequest, opts ...grpc.CallOption) (*AddOrgDomainResponse, error) {
	out := new(AddOrgDomainResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOrgDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveOrgDomain(ctx context.Context, in *RemoveOrgDomainRequest, opts ...grpc.CallOption) (*RemoveOrgDomainResponse, error) {
	out := new(RemoveOrgDomainResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveOrgDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GenerateOrgDomainValidation(ctx context.Context, in *GenerateOrgDomainValidationRequest, opts ...grpc.CallOption) (*GenerateOrgDomainValidationResponse, error) {
	out := new(GenerateOrgDomainValidationResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GenerateOrgDomainValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ValidateOrgDomain(ctx context.Context, in *ValidateOrgDomainRequest, opts ...grpc.CallOption) (*ValidateOrgDomainResponse, error) {
	out := new(ValidateOrgDomainResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ValidateOrgDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetPrimaryOrgDomain(ctx context.Context, in *SetPrimaryOrgDomainRequest, opts ...grpc.CallOption) (*SetPrimaryOrgDomainResponse, error) {
	out := new(SetPrimaryOrgDomainResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/SetPrimaryOrgDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgMemberRoles(ctx context.Context, in *ListOrgMemberRolesRequest, opts ...grpc.CallOption) (*ListOrgMemberRolesResponse, error) {
	out := new(ListOrgMemberRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgMemberRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgMembers(ctx context.Context, in *ListOrgMembersRequest, opts ...grpc.CallOption) (*ListOrgMembersResponse, error) {
	out := new(ListOrgMembersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOrgMember(ctx context.Context, in *AddOrgMemberRequest, opts ...grpc.CallOption) (*AddOrgMemberResponse, error) {
	out := new(AddOrgMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOrgMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOrgMember(ctx context.Context, in *UpdateOrgMemberRequest, opts ...grpc.CallOption) (*UpdateOrgMemberResponse, error) {
	out := new(UpdateOrgMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateOrgMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveOrgMember(ctx context.Context, in *RemoveOrgMemberRequest, opts ...grpc.CallOption) (*RemoveOrgMemberResponse, error) {
	out := new(RemoveOrgMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveOrgMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetProjectByID(ctx context.Context, in *GetProjectByIDRequest, opts ...grpc.CallOption) (*GetProjectByIDResponse, error) {
	out := new(GetProjectByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetProjectByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetGrantedProjectByID(ctx context.Context, in *GetGrantedProjectByIDRequest, opts ...grpc.CallOption) (*GetGrantedProjectByIDResponse, error) {
	out := new(GetGrantedProjectByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetGrantedProjectByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListGrantedProjects(ctx context.Context, in *ListGrantedProjectsRequest, opts ...grpc.CallOption) (*ListGrantedProjectsResponse, error) {
	out := new(ListGrantedProjectsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListGrantedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListGrantedProjectRoles(ctx context.Context, in *ListGrantedProjectRolesRequest, opts ...grpc.CallOption) (*ListGrantedProjectRolesResponse, error) {
	out := new(ListGrantedProjectRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListGrantedProjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectChanges(ctx context.Context, in *ListProjectChangesRequest, opts ...grpc.CallOption) (*ListProjectChangesResponse, error) {
	out := new(ListProjectChangesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddProject(ctx context.Context, in *AddProjectRequest, opts ...grpc.CallOption) (*AddProjectResponse, error) {
	out := new(AddProjectResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateProject(ctx context.Context, in *DeactivateProjectRequest, opts ...grpc.CallOption) (*DeactivateProjectResponse, error) {
	out := new(DeactivateProjectResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateProject(ctx context.Context, in *ReactivateProjectRequest, opts ...grpc.CallOption) (*ReactivateProjectResponse, error) {
	out := new(ReactivateProjectResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveProject(ctx context.Context, in *RemoveProjectRequest, opts ...grpc.CallOption) (*RemoveProjectResponse, error) {
	out := new(RemoveProjectResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectRoles(ctx context.Context, in *ListProjectRolesRequest, opts ...grpc.CallOption) (*ListProjectRolesResponse, error) {
	out := new(ListProjectRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddProjectRole(ctx context.Context, in *AddProjectRoleRequest, opts ...grpc.CallOption) (*AddProjectRoleResponse, error) {
	out := new(AddProjectRoleResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddProjectRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) BulkAddProjectRoles(ctx context.Context, in *BulkAddProjectRolesRequest, opts ...grpc.CallOption) (*BulkAddProjectRolesResponse, error) {
	out := new(BulkAddProjectRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/BulkAddProjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateProjectRole(ctx context.Context, in *UpdateProjectRoleRequest, opts ...grpc.CallOption) (*UpdateProjectRoleResponse, error) {
	out := new(UpdateProjectRoleResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateProjectRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveProjectRole(ctx context.Context, in *RemoveProjectRoleRequest, opts ...grpc.CallOption) (*RemoveProjectRoleResponse, error) {
	out := new(RemoveProjectRoleResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveProjectRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectMemberRoles(ctx context.Context, in *ListProjectMemberRolesRequest, opts ...grpc.CallOption) (*ListProjectMemberRolesResponse, error) {
	out := new(ListProjectMemberRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectMemberRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectMembers(ctx context.Context, in *ListProjectMembersRequest, opts ...grpc.CallOption) (*ListProjectMembersResponse, error) {
	out := new(ListProjectMembersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddProjectMember(ctx context.Context, in *AddProjectMemberRequest, opts ...grpc.CallOption) (*AddProjectMemberResponse, error) {
	out := new(AddProjectMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateProjectMember(ctx context.Context, in *UpdateProjectMemberRequest, opts ...grpc.CallOption) (*UpdateProjectMemberResponse, error) {
	out := new(UpdateProjectMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveProjectMember(ctx context.Context, in *RemoveProjectMemberRequest, opts ...grpc.CallOption) (*RemoveProjectMemberResponse, error) {
	out := new(RemoveProjectMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetAppByID(ctx context.Context, in *GetAppByIDRequest, opts ...grpc.CallOption) (*GetAppByIDResponse, error) {
	out := new(GetAppByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetAppByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListAppChanges(ctx context.Context, in *ListAppChangesRequest, opts ...grpc.CallOption) (*ListAppChangesResponse, error) {
	out := new(ListAppChangesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListAppChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOIDCApp(ctx context.Context, in *AddOIDCAppRequest, opts ...grpc.CallOption) (*AddOIDCAppResponse, error) {
	out := new(AddOIDCAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOIDCApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddAPIApp(ctx context.Context, in *AddAPIAppRequest, opts ...grpc.CallOption) (*AddAPIAppResponse, error) {
	out := new(AddAPIAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddAPIApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOIDCAppConfig(ctx context.Context, in *UpdateOIDCAppConfigRequest, opts ...grpc.CallOption) (*UpdateOIDCAppConfigResponse, error) {
	out := new(UpdateOIDCAppConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateOIDCAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateAPIAppConfig(ctx context.Context, in *UpdateAPIAppConfigRequest, opts ...grpc.CallOption) (*UpdateAPIAppConfigResponse, error) {
	out := new(UpdateAPIAppConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateAPIAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateApp(ctx context.Context, in *DeactivateAppRequest, opts ...grpc.CallOption) (*DeactivateAppResponse, error) {
	out := new(DeactivateAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateApp(ctx context.Context, in *ReactivateAppRequest, opts ...grpc.CallOption) (*ReactivateAppResponse, error) {
	out := new(ReactivateAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveApp(ctx context.Context, in *RemoveAppRequest, opts ...grpc.CallOption) (*RemoveAppResponse, error) {
	out := new(RemoveAppResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RegenerateOIDCClientSecret(ctx context.Context, in *RegenerateOIDCClientSecretRequest, opts ...grpc.CallOption) (*RegenerateOIDCClientSecretResponse, error) {
	out := new(RegenerateOIDCClientSecretResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RegenerateOIDCClientSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RegenerateAPIClientSecret(ctx context.Context, in *RegenerateAPIClientSecretRequest, opts ...grpc.CallOption) (*RegenerateAPIClientSecretResponse, error) {
	out := new(RegenerateAPIClientSecretResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RegenerateAPIClientSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetAppKey(ctx context.Context, in *GetAppKeyRequest, opts ...grpc.CallOption) (*GetAppKeyResponse, error) {
	out := new(GetAppKeyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetAppKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListAppKeys(ctx context.Context, in *ListAppKeysRequest, opts ...grpc.CallOption) (*ListAppKeysResponse, error) {
	out := new(ListAppKeysResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListAppKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddAppKey(ctx context.Context, in *AddAppKeyRequest, opts ...grpc.CallOption) (*AddAppKeyResponse, error) {
	out := new(AddAppKeyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddAppKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveAppKey(ctx context.Context, in *RemoveAppKeyRequest, opts ...grpc.CallOption) (*RemoveAppKeyResponse, error) {
	out := new(RemoveAppKeyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveAppKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetProjectGrantByID(ctx context.Context, in *GetProjectGrantByIDRequest, opts ...grpc.CallOption) (*GetProjectGrantByIDResponse, error) {
	out := new(GetProjectGrantByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetProjectGrantByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectGrants(ctx context.Context, in *ListProjectGrantsRequest, opts ...grpc.CallOption) (*ListProjectGrantsResponse, error) {
	out := new(ListProjectGrantsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectGrants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddProjectGrant(ctx context.Context, in *AddProjectGrantRequest, opts ...grpc.CallOption) (*AddProjectGrantResponse, error) {
	out := new(AddProjectGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddProjectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateProjectGrant(ctx context.Context, in *UpdateProjectGrantRequest, opts ...grpc.CallOption) (*UpdateProjectGrantResponse, error) {
	out := new(UpdateProjectGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateProjectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateProjectGrant(ctx context.Context, in *DeactivateProjectGrantRequest, opts ...grpc.CallOption) (*DeactivateProjectGrantResponse, error) {
	out := new(DeactivateProjectGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateProjectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateProjectGrant(ctx context.Context, in *ReactivateProjectGrantRequest, opts ...grpc.CallOption) (*ReactivateProjectGrantResponse, error) {
	out := new(ReactivateProjectGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateProjectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveProjectGrant(ctx context.Context, in *RemoveProjectGrantRequest, opts ...grpc.CallOption) (*RemoveProjectGrantResponse, error) {
	out := new(RemoveProjectGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveProjectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectGrantMemberRoles(ctx context.Context, in *ListProjectGrantMemberRolesRequest, opts ...grpc.CallOption) (*ListProjectGrantMemberRolesResponse, error) {
	out := new(ListProjectGrantMemberRolesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectGrantMemberRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListProjectGrantMembers(ctx context.Context, in *ListProjectGrantMembersRequest, opts ...grpc.CallOption) (*ListProjectGrantMembersResponse, error) {
	out := new(ListProjectGrantMembersResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListProjectGrantMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddProjectGrantMember(ctx context.Context, in *AddProjectGrantMemberRequest, opts ...grpc.CallOption) (*AddProjectGrantMemberResponse, error) {
	out := new(AddProjectGrantMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddProjectGrantMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateProjectGrantMember(ctx context.Context, in *UpdateProjectGrantMemberRequest, opts ...grpc.CallOption) (*UpdateProjectGrantMemberResponse, error) {
	out := new(UpdateProjectGrantMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateProjectGrantMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveProjectGrantMember(ctx context.Context, in *RemoveProjectGrantMemberRequest, opts ...grpc.CallOption) (*RemoveProjectGrantMemberResponse, error) {
	out := new(RemoveProjectGrantMemberResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveProjectGrantMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetUserGrantByID(ctx context.Context, in *GetUserGrantByIDRequest, opts ...grpc.CallOption) (*GetUserGrantByIDResponse, error) {
	out := new(GetUserGrantByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetUserGrantByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListUserGrants(ctx context.Context, in *ListUserGrantRequest, opts ...grpc.CallOption) (*ListUserGrantResponse, error) {
	out := new(ListUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListUserGrants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddUserGrant(ctx context.Context, in *AddUserGrantRequest, opts ...grpc.CallOption) (*AddUserGrantResponse, error) {
	out := new(AddUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateUserGrant(ctx context.Context, in *UpdateUserGrantRequest, opts ...grpc.CallOption) (*UpdateUserGrantResponse, error) {
	out := new(UpdateUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateUserGrant(ctx context.Context, in *DeactivateUserGrantRequest, opts ...grpc.CallOption) (*DeactivateUserGrantResponse, error) {
	out := new(DeactivateUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateUserGrant(ctx context.Context, in *ReactivateUserGrantRequest, opts ...grpc.CallOption) (*ReactivateUserGrantResponse, error) {
	out := new(ReactivateUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveUserGrant(ctx context.Context, in *RemoveUserGrantRequest, opts ...grpc.CallOption) (*RemoveUserGrantResponse, error) {
	out := new(RemoveUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) BulkRemoveUserGrant(ctx context.Context, in *BulkRemoveUserGrantRequest, opts ...grpc.CallOption) (*BulkRemoveUserGrantResponse, error) {
	out := new(BulkRemoveUserGrantResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/BulkRemoveUserGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...grpc.CallOption) (*GetFeaturesResponse, error) {
	out := new(GetFeaturesResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetOrgIAMPolicy(ctx context.Context, in *GetOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetOrgIAMPolicyResponse, error) {
	out := new(GetOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetOrgIAMPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetLoginPolicy(ctx context.Context, in *GetLoginPolicyRequest, opts ...grpc.CallOption) (*GetLoginPolicyResponse, error) {
	out := new(GetLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultLoginPolicy(ctx context.Context, in *GetDefaultLoginPolicyRequest, opts ...grpc.CallOption) (*GetDefaultLoginPolicyResponse, error) {
	out := new(GetDefaultLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomLoginPolicy(ctx context.Context, in *AddCustomLoginPolicyRequest, opts ...grpc.CallOption) (*AddCustomLoginPolicyResponse, error) {
	out := new(AddCustomLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomLoginPolicy(ctx context.Context, in *UpdateCustomLoginPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomLoginPolicyResponse, error) {
	out := new(UpdateCustomLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetLoginPolicyToDefault(ctx context.Context, in *ResetLoginPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetLoginPolicyToDefaultResponse, error) {
	out := new(ResetLoginPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetLoginPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListLoginPolicyIDPs(ctx context.Context, in *ListLoginPolicyIDPsRequest, opts ...grpc.CallOption) (*ListLoginPolicyIDPsResponse, error) {
	out := new(ListLoginPolicyIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListLoginPolicyIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddIDPToLoginPolicy(ctx context.Context, in *AddIDPToLoginPolicyRequest, opts ...grpc.CallOption) (*AddIDPToLoginPolicyResponse, error) {
	out := new(AddIDPToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddIDPToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveIDPFromLoginPolicy(ctx context.Context, in *RemoveIDPFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveIDPFromLoginPolicyResponse, error) {
	out := new(RemoveIDPFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveIDPFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListLoginPolicySecondFactors(ctx context.Context, in *ListLoginPolicySecondFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicySecondFactorsResponse, error) {
	out := new(ListLoginPolicySecondFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListLoginPolicySecondFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddSecondFactorToLoginPolicy(ctx context.Context, in *AddSecondFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddSecondFactorToLoginPolicyResponse, error) {
	out := new(AddSecondFactorToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddSecondFactorToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveSecondFactorFromLoginPolicy(ctx context.Context, in *RemoveSecondFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveSecondFactorFromLoginPolicyResponse, error) {
	out := new(RemoveSecondFactorFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveSecondFactorFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListLoginPolicyMultiFactors(ctx context.Context, in *ListLoginPolicyMultiFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicyMultiFactorsResponse, error) {
	out := new(ListLoginPolicyMultiFactorsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListLoginPolicyMultiFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddMultiFactorToLoginPolicy(ctx context.Context, in *AddMultiFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddMultiFactorToLoginPolicyResponse, error) {
	out := new(AddMultiFactorToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddMultiFactorToLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveMultiFactorFromLoginPolicy(ctx context.Context, in *RemoveMultiFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveMultiFactorFromLoginPolicyResponse, error) {
	out := new(RemoveMultiFactorFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveMultiFactorFromLoginPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetPasswordComplexityPolicy(ctx context.Context, in *GetPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetPasswordComplexityPolicyResponse, error) {
	out := new(GetPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultPasswordComplexityPolicy(ctx context.Context, in *GetDefaultPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetDefaultPasswordComplexityPolicyResponse, error) {
	out := new(GetDefaultPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomPasswordComplexityPolicy(ctx context.Context, in *AddCustomPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*AddCustomPasswordComplexityPolicyResponse, error) {
	out := new(AddCustomPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomPasswordComplexityPolicy(ctx context.Context, in *UpdateCustomPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPasswordComplexityPolicyResponse, error) {
	out := new(UpdateCustomPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomPasswordComplexityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetPasswordComplexityPolicyToDefault(ctx context.Context, in *ResetPasswordComplexityPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPasswordComplexityPolicyToDefaultResponse, error) {
	out := new(ResetPasswordComplexityPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetPasswordComplexityPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetPasswordAgePolicy(ctx context.Context, in *GetPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetPasswordAgePolicyResponse, error) {
	out := new(GetPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetPasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultPasswordAgePolicy(ctx context.Context, in *GetDefaultPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetDefaultPasswordAgePolicyResponse, error) {
	out := new(GetDefaultPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultPasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomPasswordAgePolicy(ctx context.Context, in *AddCustomPasswordAgePolicyRequest, opts ...grpc.CallOption) (*AddCustomPasswordAgePolicyResponse, error) {
	out := new(AddCustomPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomPasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomPasswordAgePolicy(ctx context.Context, in *UpdateCustomPasswordAgePolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPasswordAgePolicyResponse, error) {
	out := new(UpdateCustomPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomPasswordAgePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetPasswordAgePolicyToDefault(ctx context.Context, in *ResetPasswordAgePolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPasswordAgePolicyToDefaultResponse, error) {
	out := new(ResetPasswordAgePolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetPasswordAgePolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetPasswordLockoutPolicy(ctx context.Context, in *GetPasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*GetPasswordLockoutPolicyResponse, error) {
	out := new(GetPasswordLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetPasswordLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultPasswordLockoutPolicy(ctx context.Context, in *GetDefaultPasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*GetDefaultPasswordLockoutPolicyResponse, error) {
	out := new(GetDefaultPasswordLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultPasswordLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomPasswordLockoutPolicy(ctx context.Context, in *AddCustomPasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*AddCustomPasswordLockoutPolicyResponse, error) {
	out := new(AddCustomPasswordLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomPasswordLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomPasswordLockoutPolicy(ctx context.Context, in *UpdateCustomPasswordLockoutPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomPasswordLockoutPolicyResponse, error) {
	out := new(UpdateCustomPasswordLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomPasswordLockoutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetPasswordLockoutPolicyToDefault(ctx context.Context, in *ResetPasswordLockoutPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetPasswordLockoutPolicyToDefaultResponse, error) {
	out := new(ResetPasswordLockoutPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetPasswordLockoutPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetLabelPolicy(ctx context.Context, in *GetLabelPolicyRequest, opts ...grpc.CallOption) (*GetLabelPolicyResponse, error) {
	out := new(GetLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDefaultLabelPolicy(ctx context.Context, in *GetDefaultLabelPolicyRequest, opts ...grpc.CallOption) (*GetDefaultLabelPolicyResponse, error) {
	out := new(GetDefaultLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetDefaultLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddCustomLabelPolicy(ctx context.Context, in *AddCustomLabelPolicyRequest, opts ...grpc.CallOption) (*AddCustomLabelPolicyResponse, error) {
	out := new(AddCustomLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddCustomLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomLabelPolicy(ctx context.Context, in *UpdateCustomLabelPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomLabelPolicyResponse, error) {
	out := new(UpdateCustomLabelPolicyResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateCustomLabelPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetLabelPolicyToDefault(ctx context.Context, in *ResetLabelPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetLabelPolicyToDefaultResponse, error) {
	out := new(ResetLabelPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ResetLabelPolicyToDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetOrgIDPByID(ctx context.Context, in *GetOrgIDPByIDRequest, opts ...grpc.CallOption) (*GetOrgIDPByIDResponse, error) {
	out := new(GetOrgIDPByIDResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/GetOrgIDPByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListOrgIDPs(ctx context.Context, in *ListOrgIDPsRequest, opts ...grpc.CallOption) (*ListOrgIDPsResponse, error) {
	out := new(ListOrgIDPsResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ListOrgIDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddOrgOIDCIDP(ctx context.Context, in *AddOrgOIDCIDPRequest, opts ...grpc.CallOption) (*AddOrgOIDCIDPResponse, error) {
	out := new(AddOrgOIDCIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/AddOrgOIDCIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeactivateOrgIDP(ctx context.Context, in *DeactivateOrgIDPRequest, opts ...grpc.CallOption) (*DeactivateOrgIDPResponse, error) {
	out := new(DeactivateOrgIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/DeactivateOrgIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReactivateOrgIDP(ctx context.Context, in *ReactivateOrgIDPRequest, opts ...grpc.CallOption) (*ReactivateOrgIDPResponse, error) {
	out := new(ReactivateOrgIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/ReactivateOrgIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveOrgIDP(ctx context.Context, in *RemoveOrgIDPRequest, opts ...grpc.CallOption) (*RemoveOrgIDPResponse, error) {
	out := new(RemoveOrgIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/RemoveOrgIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOrgIDP(ctx context.Context, in *UpdateOrgIDPRequest, opts ...grpc.CallOption) (*UpdateOrgIDPResponse, error) {
	out := new(UpdateOrgIDPResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateOrgIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateOrgIDPOIDCConfig(ctx context.Context, in *UpdateOrgIDPOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateOrgIDPOIDCConfigResponse, error) {
	out := new(UpdateOrgIDPOIDCConfigResponse)
	err := c.cc.Invoke(ctx, "/zitadel.management.v1.ManagementService/UpdateOrgIDPOIDCConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServiceServer is the server API for ManagementService service.
// All implementations must embed UnimplementedManagementServiceServer
// for forward compatibility
type ManagementServiceServer interface {
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	GetOIDCInformation(context.Context, *GetOIDCInformationRequest) (*GetOIDCInformationResponse, error)
	// Returns some needed settings of the IAM (Global Organisation ID, Zitadel Project ID)
	GetIAM(context.Context, *GetIAMRequest) (*GetIAMResponse, error)
	// Returns the requested full blown user (human or machine)
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	// Searches a user over all organisations
	// the login name has to match exactly
	GetUserByLoginNameGlobal(context.Context, *GetUserByLoginNameGlobalRequest) (*GetUserByLoginNameGlobalResponse, error)
	// Return the users matching the query
	// Limit should always be set, there is a default limit set by the service
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Returns the history of the user (each event)
	// Limit should always be set, there is a default limit set by the service
	ListUserChanges(context.Context, *ListUserChangesRequest) (*ListUserChangesResponse, error)
	// Returns if a user with the searched email or username is unique
	IsUserUnique(context.Context, *IsUserUniqueRequest) (*IsUserUniqueResponse, error)
	// Create a user of the type human
	// A email will be sent to the user if email is not verified or no password is set
	// If a password is given, the user has to change on the next login
	AddHumanUser(context.Context, *AddHumanUserRequest) (*AddHumanUserResponse, error)
	// Create a user of the type human
	// A email will be sent to the user if email is not verified or no password is set
	// If a password is given, the user doesn't have to change on the next login
	ImportHumanUser(context.Context, *ImportHumanUserRequest) (*ImportHumanUserResponse, error)
	// Create a user of the type machine
	AddMachineUser(context.Context, *AddMachineUserRequest) (*AddMachineUserResponse, error)
	// Changes the user state to deactivated
	// The user will not be able to login
	// returns an error if user state is already deactivated
	DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error)
	// Changes the user state to active
	// returns an error if user state is not deactivated
	ReactivateUser(context.Context, *ReactivateUserRequest) (*ReactivateUserResponse, error)
	// Changes the user state to deactivated
	// The user will not be able to login
	// returns an error if user state is already locked
	LockUser(context.Context, *LockUserRequest) (*LockUserResponse, error)
	// Changes the user state to active
	// returns an error if user state is not locked
	UnlockUser(context.Context, *UnlockUserRequest) (*UnlockUserResponse, error)
	// Changes the user state to deleted
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	// Changes the username
	UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error)
	// Returns the profile of the human
	GetHumanProfile(context.Context, *GetHumanProfileRequest) (*GetHumanProfileResponse, error)
	// Changes the profile of the human
	UpdateHumanProfile(context.Context, *UpdateHumanProfileRequest) (*UpdateHumanProfileResponse, error)
	// GetHumanEmail returns the email and verified state of the human
	GetHumanEmail(context.Context, *GetHumanEmailRequest) (*GetHumanEmailResponse, error)
	// Changes the email of the human
	// If state is not verified, the user will get a verification email
	UpdateHumanEmail(context.Context, *UpdateHumanEmailRequest) (*UpdateHumanEmailResponse, error)
	// Resends an email to the given email address to finish the initialization process of the user
	// Changes the email address of the user if it is provided
	ResendHumanInitialization(context.Context, *ResendHumanInitializationRequest) (*ResendHumanInitializationResponse, error)
	// Resends an email to the given email address to finish the email verification process of the user
	ResendHumanEmailVerification(context.Context, *ResendHumanEmailVerificationRequest) (*ResendHumanEmailVerificationResponse, error)
	// Returns the phone and verified state of the human phone
	GetHumanPhone(context.Context, *GetHumanPhoneRequest) (*GetHumanPhoneResponse, error)
	// Changes the phone number
	// If verified is not set, the user will get an sms to verify the number
	UpdateHumanPhone(context.Context, *UpdateHumanPhoneRequest) (*UpdateHumanPhoneResponse, error)
	// Removes the phone number of the human
	RemoveHumanPhone(context.Context, *RemoveHumanPhoneRequest) (*RemoveHumanPhoneResponse, error)
	// An sms will be sent to the given phone number to finish the phone verification process of the user
	ResendHumanPhoneVerification(context.Context, *ResendHumanPhoneVerificationRequest) (*ResendHumanPhoneVerificationResponse, error)
	// A Manager is only allowed to set an initial password, on the next login the user has to change his password
	SetHumanInitialPassword(context.Context, *SetHumanInitialPasswordRequest) (*SetHumanInitialPasswordResponse, error)
	// An email will be sent to the given address to reset the password of the user
	SendHumanResetPasswordNotification(context.Context, *SendHumanResetPasswordNotificationRequest) (*SendHumanResetPasswordNotificationResponse, error)
	// Returns a list of all factors (second and multi) which are configured on the user
	ListHumanAuthFactors(context.Context, *ListHumanAuthFactorsRequest) (*ListHumanAuthFactorsResponse, error)
	// The otp second factor will be removed from the user
	// Because only one otp can be configured per user, the configured one will be removed
	RemoveHumanAuthFactorOTP(context.Context, *RemoveHumanAuthFactorOTPRequest) (*RemoveHumanAuthFactorOTPResponse, error)
	// The u2f (universial second factor) will be removed from the user
	RemoveHumanAuthFactorU2F(context.Context, *RemoveHumanAuthFactorU2FRequest) (*RemoveHumanAuthFactorU2FResponse, error)
	// Returns all configured passwordless authentications
	ListHumanPasswordless(context.Context, *ListHumanPasswordlessRequest) (*ListHumanPasswordlessResponse, error)
	// Removed a configured passwordless authentication
	RemoveHumanPasswordless(context.Context, *RemoveHumanPasswordlessRequest) (*RemoveHumanPasswordlessResponse, error)
	// Changes a machine user
	UpdateMachine(context.Context, *UpdateMachineRequest) (*UpdateMachineResponse, error)
	// Returns a machine key of a (machine) user
	GetMachineKeyByIDs(context.Context, *GetMachineKeyByIDsRequest) (*GetMachineKeyByIDsResponse, error)
	// Returns all machine keys of a (machine) user which match the query
	// Limit should always be set, there is a default limit set by the service
	ListMachineKeys(context.Context, *ListMachineKeysRequest) (*ListMachineKeysResponse, error)
	// Generates a new machine key, details should be stored after return
	AddMachineKey(context.Context, *AddMachineKeyRequest) (*AddMachineKeyResponse, error)
	// Removed a machine key
	RemoveMachineKey(context.Context, *RemoveMachineKeyRequest) (*RemoveMachineKeyResponse, error)
	// Lists all identity providers (social logins) which a human has configured (e.g Google, Microsoft, AD, etc..)
	// Limit should always be set, there is a default limit set by the service
	ListHumanLinkedIDPs(context.Context, *ListHumanLinkedIDPsRequest) (*ListHumanLinkedIDPsResponse, error)
	// Removed a configured identity provider (social login) of a human
	RemoveHumanLinkedIDP(context.Context, *RemoveHumanLinkedIDPRequest) (*RemoveHumanLinkedIDPResponse, error)
	// Show all the permissions a user has iin ZITADEL (ZITADEL Manager)
	// Limit should always be set, there is a default limit set by the service
	ListUserMemberships(context.Context, *ListUserMembershipsRequest) (*ListUserMembershipsResponse, error)
	// Returns the org given in the header
	GetMyOrg(context.Context, *GetMyOrgRequest) (*GetMyOrgResponse, error)
	// Search a org over all organisations
	// Domain must match exactly
	GetOrgByDomainGlobal(context.Context, *GetOrgByDomainGlobalRequest) (*GetOrgByDomainGlobalResponse, error)
	// Returns the history of my organisation (each event)
	// Limit should always be set, there is a default limit set by the service
	ListOrgChanges(context.Context, *ListOrgChangesRequest) (*ListOrgChangesResponse, error)
	// Creates a new organisation
	AddOrg(context.Context, *AddOrgRequest) (*AddOrgResponse, error)
	// Sets the state of my organisation to deactivated
	// Users of this organisation will not be able login
	DeactivateOrg(context.Context, *DeactivateOrgRequest) (*DeactivateOrgResponse, error)
	// Sets the state of my organisation to active
	ReactivateOrg(context.Context, *ReactivateOrgRequest) (*ReactivateOrgResponse, error)
	// Returns all registered domains of my organisation
	// Limit should always be set, there is a default limit set by the service
	ListOrgDomains(context.Context, *ListOrgDomainsRequest) (*ListOrgDomainsResponse, error)
	// Adds a new domain to my organisation
	AddOrgDomain(context.Context, *AddOrgDomainRequest) (*AddOrgDomainResponse, error)
	// Removed the domain from my organisation
	RemoveOrgDomain(context.Context, *RemoveOrgDomainRequest) (*RemoveOrgDomainResponse, error)
	// Generates a new file to validate you domain
	GenerateOrgDomainValidation(context.Context, *GenerateOrgDomainValidationRequest) (*GenerateOrgDomainValidationResponse, error)
	// Validates your domain with the choosen method
	// Validated domains must be unique
	ValidateOrgDomain(context.Context, *ValidateOrgDomainRequest) (*ValidateOrgDomainResponse, error)
	// Sets the domain as primary
	// Primary domain is shown as suffix on the preferred username on the users of the organisation
	SetPrimaryOrgDomain(context.Context, *SetPrimaryOrgDomainRequest) (*SetPrimaryOrgDomainResponse, error)
	// Returns all ZITADEL roles which are for organisation managers
	ListOrgMemberRoles(context.Context, *ListOrgMemberRolesRequest) (*ListOrgMemberRolesResponse, error)
	// Returns all ZITADEL managers of this organisation (Project and Project Grant managers not included)
	// Limit should always be set, there is a default limit set by the service
	ListOrgMembers(context.Context, *ListOrgMembersRequest) (*ListOrgMembersResponse, error)
	// Adds a new organisation manager, which is allowed to administrate ZITADEL
	AddOrgMember(context.Context, *AddOrgMemberRequest) (*AddOrgMemberResponse, error)
	// Changes the organisation manager
	UpdateOrgMember(context.Context, *UpdateOrgMemberRequest) (*UpdateOrgMemberResponse, error)
	// Removes an organisation manager
	RemoveOrgMember(context.Context, *RemoveOrgMemberRequest) (*RemoveOrgMemberResponse, error)
	// Returns a project from my organisation (no granted projects)
	GetProjectByID(context.Context, *GetProjectByIDRequest) (*GetProjectByIDResponse, error)
	// returns a project my organisation got granted from another organisation
	GetGrantedProjectByID(context.Context, *GetGrantedProjectByIDRequest) (*GetGrantedProjectByIDResponse, error)
	// Returns all projects my organisation is the owner (no granted projects)
	// Limit should always be set, there is a default limit set by the service
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// returns all projects my organisation got granted from another organisation
	// Limit should always be set, there is a default limit set by the service
	ListGrantedProjects(context.Context, *ListGrantedProjectsRequest) (*ListGrantedProjectsResponse, error)
	// returns all roles of a project grant
	// Limit should always be set, there is a default limit set by the service
	ListGrantedProjectRoles(context.Context, *ListGrantedProjectRolesRequest) (*ListGrantedProjectRolesResponse, error)
	// Returns the history of the project (each event)
	// Limit should always be set, there is a default limit set by the service
	ListProjectChanges(context.Context, *ListProjectChangesRequest) (*ListProjectChangesResponse, error)
	// Adds an new project to the organisation
	AddProject(context.Context, *AddProjectRequest) (*AddProjectResponse, error)
	// Changes a project
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// Sets the state of a project to deactivated
	// Returns an error if project is already deactivated
	DeactivateProject(context.Context, *DeactivateProjectRequest) (*DeactivateProjectResponse, error)
	// Sets the state of a project to active
	// Returns an error if project is not deactivated
	ReactivateProject(context.Context, *ReactivateProjectRequest) (*ReactivateProjectResponse, error)
	// Removes a project
	// All project grants, applications and user grants for this project will be removed
	RemoveProject(context.Context, *RemoveProjectRequest) (*RemoveProjectResponse, error)
	// Returns all roles of a project matching the search query
	// If no limit is requested, default limit will be set, if the limit is higher then the default an error will be returned
	ListProjectRoles(context.Context, *ListProjectRolesRequest) (*ListProjectRolesResponse, error)
	// Adds a role to a project, key must be unique in the project
	AddProjectRole(context.Context, *AddProjectRoleRequest) (*AddProjectRoleResponse, error)
	// add a list of project roles in one request
	BulkAddProjectRoles(context.Context, *BulkAddProjectRolesRequest) (*BulkAddProjectRolesResponse, error)
	// Changes a project role, key is not editable
	// If a key should change, remove the role and create a new
	UpdateProjectRole(context.Context, *UpdateProjectRoleRequest) (*UpdateProjectRoleResponse, error)
	// Removes role from UserGrants, ProjectGrants and from Project
	RemoveProjectRole(context.Context, *RemoveProjectRoleRequest) (*RemoveProjectRoleResponse, error)
	// Returns all ZITADEL roles which are for project managers
	ListProjectMemberRoles(context.Context, *ListProjectMemberRolesRequest) (*ListProjectMemberRolesResponse, error)
	// Returns all ZITADEL managers of a projects
	// Limit should always be set, there is a default limit set by the service
	ListProjectMembers(context.Context, *ListProjectMembersRequest) (*ListProjectMembersResponse, error)
	// Adds a new project manager, which is allowed to administrate in ZITADEL
	AddProjectMember(context.Context, *AddProjectMemberRequest) (*AddProjectMemberResponse, error)
	// Change project manager, which is allowed to administrate in ZITADEL
	UpdateProjectMember(context.Context, *UpdateProjectMemberRequest) (*UpdateProjectMemberResponse, error)
	// Remove project manager, which is allowed to administrate in ZITADEL
	RemoveProjectMember(context.Context, *RemoveProjectMemberRequest) (*RemoveProjectMemberResponse, error)
	// Returns an application (oidc or api)
	GetAppByID(context.Context, *GetAppByIDRequest) (*GetAppByIDResponse, error)
	// Returns all applications of a project matching the query
	// Limit should always be set, there is a default limit set by the service
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// Returns the history of the application (each event)
	// Limit should always be set, there is a default limit set by the service
	ListAppChanges(context.Context, *ListAppChangesRequest) (*ListAppChangesResponse, error)
	// Adds a new oidc client
	// Returns a client id
	// Returns a new generated secret if needed (Depending on the configuration)
	AddOIDCApp(context.Context, *AddOIDCAppRequest) (*AddOIDCAppResponse, error)
	// Adds a new api application
	// Returns a client id
	// Returns a new generated secret if needed (Depending on the configuration)
	AddAPIApp(context.Context, *AddAPIAppRequest) (*AddAPIAppResponse, error)
	// Changes application
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	// Changes the configuration of the oidc client
	UpdateOIDCAppConfig(context.Context, *UpdateOIDCAppConfigRequest) (*UpdateOIDCAppConfigResponse, error)
	// Changes the configuration of the api application
	UpdateAPIAppConfig(context.Context, *UpdateAPIAppConfigRequest) (*UpdateAPIAppConfigResponse, error)
	// Set the state to deactivated
	// Its not possible to request tokens for deactivated apps
	// Returns an error if already deactivated
	DeactivateApp(context.Context, *DeactivateAppRequest) (*DeactivateAppResponse, error)
	// Set the state to active
	// Returns an error if not deactivated
	ReactivateApp(context.Context, *ReactivateAppRequest) (*ReactivateAppResponse, error)
	// Removed the application
	RemoveApp(context.Context, *RemoveAppRequest) (*RemoveAppResponse, error)
	// Generates a new client secret for the oidc client, make sure to save the response
	RegenerateOIDCClientSecret(context.Context, *RegenerateOIDCClientSecretRequest) (*RegenerateOIDCClientSecretResponse, error)
	// Generates a new client secret for the api application, make sure to save the response
	RegenerateAPIClientSecret(context.Context, *RegenerateAPIClientSecretRequest) (*RegenerateAPIClientSecretResponse, error)
	// Returns an application key
	GetAppKey(context.Context, *GetAppKeyRequest) (*GetAppKeyResponse, error)
	// Returns all application keys matching the result
	// Limit should always be set, there is a default limit set by the service
	ListAppKeys(context.Context, *ListAppKeysRequest) (*ListAppKeysResponse, error)
	// Creates a new app key
	// Will return key details in result, make sure to save it
	AddAppKey(context.Context, *AddAppKeyRequest) (*AddAppKeyResponse, error)
	// Removes an app key
	RemoveAppKey(context.Context, *RemoveAppKeyRequest) (*RemoveAppKeyResponse, error)
	// Returns a project grant (ProjectGrant = Grant another organisation for my project)
	GetProjectGrantByID(context.Context, *GetProjectGrantByIDRequest) (*GetProjectGrantByIDResponse, error)
	// Returns all project grants matching the query, (ProjectGrant = Grant another organisation for my project)
	// Limit should always be set, there is a default limit set by the service
	ListProjectGrants(context.Context, *ListProjectGrantsRequest) (*ListProjectGrantsResponse, error)
	// Add a new project grant (ProjectGrant = Grant another organisation for my project)
	// Project Grant will be listed in granted project of the other organisation
	AddProjectGrant(context.Context, *AddProjectGrantRequest) (*AddProjectGrantResponse, error)
	// Change project grant (ProjectGrant = Grant another organisation for my project)
	// Project Grant will be listed in granted project of the other organisation
	UpdateProjectGrant(context.Context, *UpdateProjectGrantRequest) (*UpdateProjectGrantResponse, error)
	// Set state of project grant to deactivated (ProjectGrant = Grant another organisation for my project)
	// Returns error if project not active
	DeactivateProjectGrant(context.Context, *DeactivateProjectGrantRequest) (*DeactivateProjectGrantResponse, error)
	// Set state of project grant to active (ProjectGrant = Grant another organisation for my project)
	// Returns error if project not deactivated
	ReactivateProjectGrant(context.Context, *ReactivateProjectGrantRequest) (*ReactivateProjectGrantResponse, error)
	// Removes project grant and all user grants for this project grant
	RemoveProjectGrant(context.Context, *RemoveProjectGrantRequest) (*RemoveProjectGrantResponse, error)
	// Returns all ZITADEL roles which are for project grant managers
	ListProjectGrantMemberRoles(context.Context, *ListProjectGrantMemberRolesRequest) (*ListProjectGrantMemberRolesResponse, error)
	// Returns all ZITADEL managers of this project grant
	// Limit should always be set, there is a default limit set by the service
	ListProjectGrantMembers(context.Context, *ListProjectGrantMembersRequest) (*ListProjectGrantMembersResponse, error)
	// Adds a new project grant manager, which is allowed to administrate in ZITADEL
	AddProjectGrantMember(context.Context, *AddProjectGrantMemberRequest) (*AddProjectGrantMemberResponse, error)
	// Changes project grant manager, which is allowed to administrate in ZITADEL
	UpdateProjectGrantMember(context.Context, *UpdateProjectGrantMemberRequest) (*UpdateProjectGrantMemberResponse, error)
	// Removed project grant manager
	RemoveProjectGrantMember(context.Context, *RemoveProjectGrantMemberRequest) (*RemoveProjectGrantMemberResponse, error)
	// Returns a user grant (authorization of a user for a project)
	GetUserGrantByID(context.Context, *GetUserGrantByIDRequest) (*GetUserGrantByIDResponse, error)
	// Returns al user grant matching the query (authorizations of user for projects)
	// Limit should always be set, there is a default limit set by the service
	ListUserGrants(context.Context, *ListUserGrantRequest) (*ListUserGrantResponse, error)
	// Creates a new user grant (authorization of a user for a project with specified roles)
	AddUserGrant(context.Context, *AddUserGrantRequest) (*AddUserGrantResponse, error)
	// Changes a user grant (authorization of a user for a project with specified roles)
	UpdateUserGrant(context.Context, *UpdateUserGrantRequest) (*UpdateUserGrantResponse, error)
	// Sets the state of a user grant to deactivated
	// User will not be able to use the granted project anymore
	// Returns an error if user grant is already deactivated
	DeactivateUserGrant(context.Context, *DeactivateUserGrantRequest) (*DeactivateUserGrantResponse, error)
	// Sets the state of a user grant to active
	// Returns an error if user grant is not deactivated
	ReactivateUserGrant(context.Context, *ReactivateUserGrantRequest) (*ReactivateUserGrantResponse, error)
	// Removes a user grant
	RemoveUserGrant(context.Context, *RemoveUserGrantRequest) (*RemoveUserGrantResponse, error)
	// remove a list of user grants in one request
	BulkRemoveUserGrant(context.Context, *BulkRemoveUserGrantRequest) (*BulkRemoveUserGrantResponse, error)
	GetFeatures(context.Context, *GetFeaturesRequest) (*GetFeaturesResponse, error)
	// Returns the org iam policy (this policy is managed by the iam administrator)
	GetOrgIAMPolicy(context.Context, *GetOrgIAMPolicyRequest) (*GetOrgIAMPolicyResponse, error)
	// Returns the login policy of the organisation
	// With this policy the login gui can be configured
	GetLoginPolicy(context.Context, *GetLoginPolicyRequest) (*GetLoginPolicyResponse, error)
	// Returns the default login policy configured in the IAM
	GetDefaultLoginPolicy(context.Context, *GetDefaultLoginPolicyRequest) (*GetDefaultLoginPolicyResponse, error)
	// Add a custom login policy for the organisation
	// With this policy the login gui can be configured
	AddCustomLoginPolicy(context.Context, *AddCustomLoginPolicyRequest) (*AddCustomLoginPolicyResponse, error)
	// Change the custom login policy for the organisation
	// With this policy the login gui can be configured
	UpdateCustomLoginPolicy(context.Context, *UpdateCustomLoginPolicyRequest) (*UpdateCustomLoginPolicyResponse, error)
	// Removes the custom login policy of the organisation
	// The default policy of the IAM will trigger after
	ResetLoginPolicyToDefault(context.Context, *ResetLoginPolicyToDefaultRequest) (*ResetLoginPolicyToDefaultResponse, error)
	// Lists all possible identity providers configured on the organisation
	// Limit should always be set, there is a default limit set by the service
	ListLoginPolicyIDPs(context.Context, *ListLoginPolicyIDPsRequest) (*ListLoginPolicyIDPsResponse, error)
	// Add a (preconfigured) identity provider to the custom login policy
	AddIDPToLoginPolicy(context.Context, *AddIDPToLoginPolicyRequest) (*AddIDPToLoginPolicyResponse, error)
	// Remove a identity provider from the custom login policy
	RemoveIDPFromLoginPolicy(context.Context, *RemoveIDPFromLoginPolicyRequest) (*RemoveIDPFromLoginPolicyResponse, error)
	// Returns all configured second factors of the custom login policy
	ListLoginPolicySecondFactors(context.Context, *ListLoginPolicySecondFactorsRequest) (*ListLoginPolicySecondFactorsResponse, error)
	// Adds a new second factor to the custom login policy
	AddSecondFactorToLoginPolicy(context.Context, *AddSecondFactorToLoginPolicyRequest) (*AddSecondFactorToLoginPolicyResponse, error)
	// Remove a second factor from the custom login policy
	RemoveSecondFactorFromLoginPolicy(context.Context, *RemoveSecondFactorFromLoginPolicyRequest) (*RemoveSecondFactorFromLoginPolicyResponse, error)
	// Returns all configured multi factors of the custom login policy
	ListLoginPolicyMultiFactors(context.Context, *ListLoginPolicyMultiFactorsRequest) (*ListLoginPolicyMultiFactorsResponse, error)
	// Adds a new multi factor to the custom login policy
	AddMultiFactorToLoginPolicy(context.Context, *AddMultiFactorToLoginPolicyRequest) (*AddMultiFactorToLoginPolicyResponse, error)
	// Remove a multi factor from the custom login policy
	RemoveMultiFactorFromLoginPolicy(context.Context, *RemoveMultiFactorFromLoginPolicyRequest) (*RemoveMultiFactorFromLoginPolicyResponse, error)
	// Returns the password complexity policy of the organisation
	// With this policy the password strength can be configured
	GetPasswordComplexityPolicy(context.Context, *GetPasswordComplexityPolicyRequest) (*GetPasswordComplexityPolicyResponse, error)
	// Returns the default password complexity policy of the IAM
	// With this policy the password strength can be configured
	GetDefaultPasswordComplexityPolicy(context.Context, *GetDefaultPasswordComplexityPolicyRequest) (*GetDefaultPasswordComplexityPolicyResponse, error)
	// Add a custom password complexity policy for the organisation
	// With this policy the password strength can be configured
	AddCustomPasswordComplexityPolicy(context.Context, *AddCustomPasswordComplexityPolicyRequest) (*AddCustomPasswordComplexityPolicyResponse, error)
	// Update the custom password complexity policy for the organisation
	// With this policy the password strength can be configured
	UpdateCustomPasswordComplexityPolicy(context.Context, *UpdateCustomPasswordComplexityPolicyRequest) (*UpdateCustomPasswordComplexityPolicyResponse, error)
	// Removes the custom password complexity policy of the organisation
	// The default policy of the IAM will trigger after
	ResetPasswordComplexityPolicyToDefault(context.Context, *ResetPasswordComplexityPolicyToDefaultRequest) (*ResetPasswordComplexityPolicyToDefaultResponse, error)
	// The password age policy is not used at the moment
	GetPasswordAgePolicy(context.Context, *GetPasswordAgePolicyRequest) (*GetPasswordAgePolicyResponse, error)
	// The password age policy is not used at the moment
	GetDefaultPasswordAgePolicy(context.Context, *GetDefaultPasswordAgePolicyRequest) (*GetDefaultPasswordAgePolicyResponse, error)
	// The password age policy is not used at the moment
	AddCustomPasswordAgePolicy(context.Context, *AddCustomPasswordAgePolicyRequest) (*AddCustomPasswordAgePolicyResponse, error)
	// The password age policy is not used at the moment
	UpdateCustomPasswordAgePolicy(context.Context, *UpdateCustomPasswordAgePolicyRequest) (*UpdateCustomPasswordAgePolicyResponse, error)
	// The password age policy is not used at the moment
	ResetPasswordAgePolicyToDefault(context.Context, *ResetPasswordAgePolicyToDefaultRequest) (*ResetPasswordAgePolicyToDefaultResponse, error)
	// The password lockout policy is not used at the moment
	GetPasswordLockoutPolicy(context.Context, *GetPasswordLockoutPolicyRequest) (*GetPasswordLockoutPolicyResponse, error)
	// The password lockout policy is not used at the moment
	GetDefaultPasswordLockoutPolicy(context.Context, *GetDefaultPasswordLockoutPolicyRequest) (*GetDefaultPasswordLockoutPolicyResponse, error)
	// The password lockout policy is not used at the moment
	AddCustomPasswordLockoutPolicy(context.Context, *AddCustomPasswordLockoutPolicyRequest) (*AddCustomPasswordLockoutPolicyResponse, error)
	// The password lockout policy is not used at the moment
	UpdateCustomPasswordLockoutPolicy(context.Context, *UpdateCustomPasswordLockoutPolicyRequest) (*UpdateCustomPasswordLockoutPolicyResponse, error)
	// The password lockout policy is not used at the moment
	ResetPasswordLockoutPolicyToDefault(context.Context, *ResetPasswordLockoutPolicyToDefaultRequest) (*ResetPasswordLockoutPolicyToDefaultResponse, error)
	// Returns the label policy of the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	GetLabelPolicy(context.Context, *GetLabelPolicyRequest) (*GetLabelPolicyResponse, error)
	// Returns the default label policy of the IAM
	// With this policy the private labeling can be configured (colors, etc.)
	GetDefaultLabelPolicy(context.Context, *GetDefaultLabelPolicyRequest) (*GetDefaultLabelPolicyResponse, error)
	// Add a custom label policy for the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	AddCustomLabelPolicy(context.Context, *AddCustomLabelPolicyRequest) (*AddCustomLabelPolicyResponse, error)
	// Changes the custom label policy for the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	UpdateCustomLabelPolicy(context.Context, *UpdateCustomLabelPolicyRequest) (*UpdateCustomLabelPolicyResponse, error)
	// Removes the custom label policy of the organisation
	// The default policy of the IAM will trigger after
	ResetLabelPolicyToDefault(context.Context, *ResetLabelPolicyToDefaultRequest) (*ResetLabelPolicyToDefaultResponse, error)
	// Returns a identity provider configuration of the organisation
	GetOrgIDPByID(context.Context, *GetOrgIDPByIDRequest) (*GetOrgIDPByIDResponse, error)
	// Returns all identity provider configuration in the organisation, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListOrgIDPs(context.Context, *ListOrgIDPsRequest) (*ListOrgIDPsResponse, error)
	// Add a new identity provider configuration in the organisation
	// Provider must be OIDC compliant
	AddOrgOIDCIDP(context.Context, *AddOrgOIDCIDPRequest) (*AddOrgOIDCIDPResponse, error)
	// Deactivate identity provider configuration
	// Users will not be able to use this provider for login (e.g Google, Microsoft, AD, etc)
	// Returns error if already deactivated
	DeactivateOrgIDP(context.Context, *DeactivateOrgIDPRequest) (*DeactivateOrgIDPResponse, error)
	// Activate identity provider configuration
	// Returns error if not deactivated
	ReactivateOrgIDP(context.Context, *ReactivateOrgIDPRequest) (*ReactivateOrgIDPResponse, error)
	// Removes identity provider configuration
	// Will remove all linked providers of this configuration on the users
	RemoveOrgIDP(context.Context, *RemoveOrgIDPRequest) (*RemoveOrgIDPResponse, error)
	// Change identity provider configuration of the organisation
	UpdateOrgIDP(context.Context, *UpdateOrgIDPRequest) (*UpdateOrgIDPResponse, error)
	// Change OIDC identity provider configuration of the organisation
	UpdateOrgIDPOIDCConfig(context.Context, *UpdateOrgIDPOIDCConfigRequest) (*UpdateOrgIDPOIDCConfigResponse, error)
	mustEmbedUnimplementedManagementServiceServer()
}

// UnimplementedManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServiceServer struct {
}

func (UnimplementedManagementServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedManagementServiceServer) GetOIDCInformation(context.Context, *GetOIDCInformationRequest) (*GetOIDCInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOIDCInformation not implemented")
}
func (UnimplementedManagementServiceServer) GetIAM(context.Context, *GetIAMRequest) (*GetIAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIAM not implemented")
}
func (UnimplementedManagementServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedManagementServiceServer) GetUserByLoginNameGlobal(context.Context, *GetUserByLoginNameGlobalRequest) (*GetUserByLoginNameGlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByLoginNameGlobal not implemented")
}
func (UnimplementedManagementServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedManagementServiceServer) ListUserChanges(context.Context, *ListUserChangesRequest) (*ListUserChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserChanges not implemented")
}
func (UnimplementedManagementServiceServer) IsUserUnique(context.Context, *IsUserUniqueRequest) (*IsUserUniqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserUnique not implemented")
}
func (UnimplementedManagementServiceServer) AddHumanUser(context.Context, *AddHumanUserRequest) (*AddHumanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHumanUser not implemented")
}
func (UnimplementedManagementServiceServer) ImportHumanUser(context.Context, *ImportHumanUserRequest) (*ImportHumanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportHumanUser not implemented")
}
func (UnimplementedManagementServiceServer) AddMachineUser(context.Context, *AddMachineUserRequest) (*AddMachineUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachineUser not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUser not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateUser(context.Context, *ReactivateUserRequest) (*ReactivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateUser not implemented")
}
func (UnimplementedManagementServiceServer) LockUser(context.Context, *LockUserRequest) (*LockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockUser not implemented")
}
func (UnimplementedManagementServiceServer) UnlockUser(context.Context, *UnlockUserRequest) (*UnlockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockUser not implemented")
}
func (UnimplementedManagementServiceServer) RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedManagementServiceServer) UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedManagementServiceServer) GetHumanProfile(context.Context, *GetHumanProfileRequest) (*GetHumanProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHumanProfile not implemented")
}
func (UnimplementedManagementServiceServer) UpdateHumanProfile(context.Context, *UpdateHumanProfileRequest) (*UpdateHumanProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHumanProfile not implemented")
}
func (UnimplementedManagementServiceServer) GetHumanEmail(context.Context, *GetHumanEmailRequest) (*GetHumanEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHumanEmail not implemented")
}
func (UnimplementedManagementServiceServer) UpdateHumanEmail(context.Context, *UpdateHumanEmailRequest) (*UpdateHumanEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHumanEmail not implemented")
}
func (UnimplementedManagementServiceServer) ResendHumanInitialization(context.Context, *ResendHumanInitializationRequest) (*ResendHumanInitializationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendHumanInitialization not implemented")
}
func (UnimplementedManagementServiceServer) ResendHumanEmailVerification(context.Context, *ResendHumanEmailVerificationRequest) (*ResendHumanEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendHumanEmailVerification not implemented")
}
func (UnimplementedManagementServiceServer) GetHumanPhone(context.Context, *GetHumanPhoneRequest) (*GetHumanPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHumanPhone not implemented")
}
func (UnimplementedManagementServiceServer) UpdateHumanPhone(context.Context, *UpdateHumanPhoneRequest) (*UpdateHumanPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHumanPhone not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanPhone(context.Context, *RemoveHumanPhoneRequest) (*RemoveHumanPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanPhone not implemented")
}
func (UnimplementedManagementServiceServer) ResendHumanPhoneVerification(context.Context, *ResendHumanPhoneVerificationRequest) (*ResendHumanPhoneVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendHumanPhoneVerification not implemented")
}
func (UnimplementedManagementServiceServer) SetHumanInitialPassword(context.Context, *SetHumanInitialPasswordRequest) (*SetHumanInitialPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHumanInitialPassword not implemented")
}
func (UnimplementedManagementServiceServer) SendHumanResetPasswordNotification(context.Context, *SendHumanResetPasswordNotificationRequest) (*SendHumanResetPasswordNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHumanResetPasswordNotification not implemented")
}
func (UnimplementedManagementServiceServer) ListHumanAuthFactors(context.Context, *ListHumanAuthFactorsRequest) (*ListHumanAuthFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHumanAuthFactors not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanAuthFactorOTP(context.Context, *RemoveHumanAuthFactorOTPRequest) (*RemoveHumanAuthFactorOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanAuthFactorOTP not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanAuthFactorU2F(context.Context, *RemoveHumanAuthFactorU2FRequest) (*RemoveHumanAuthFactorU2FResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanAuthFactorU2F not implemented")
}
func (UnimplementedManagementServiceServer) ListHumanPasswordless(context.Context, *ListHumanPasswordlessRequest) (*ListHumanPasswordlessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHumanPasswordless not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanPasswordless(context.Context, *RemoveHumanPasswordlessRequest) (*RemoveHumanPasswordlessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanPasswordless not implemented")
}
func (UnimplementedManagementServiceServer) UpdateMachine(context.Context, *UpdateMachineRequest) (*UpdateMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachine not implemented")
}
func (UnimplementedManagementServiceServer) GetMachineKeyByIDs(context.Context, *GetMachineKeyByIDsRequest) (*GetMachineKeyByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineKeyByIDs not implemented")
}
func (UnimplementedManagementServiceServer) ListMachineKeys(context.Context, *ListMachineKeysRequest) (*ListMachineKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineKeys not implemented")
}
func (UnimplementedManagementServiceServer) AddMachineKey(context.Context, *AddMachineKeyRequest) (*AddMachineKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachineKey not implemented")
}
func (UnimplementedManagementServiceServer) RemoveMachineKey(context.Context, *RemoveMachineKeyRequest) (*RemoveMachineKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMachineKey not implemented")
}
func (UnimplementedManagementServiceServer) ListHumanLinkedIDPs(context.Context, *ListHumanLinkedIDPsRequest) (*ListHumanLinkedIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHumanLinkedIDPs not implemented")
}
func (UnimplementedManagementServiceServer) RemoveHumanLinkedIDP(context.Context, *RemoveHumanLinkedIDPRequest) (*RemoveHumanLinkedIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHumanLinkedIDP not implemented")
}
func (UnimplementedManagementServiceServer) ListUserMemberships(context.Context, *ListUserMembershipsRequest) (*ListUserMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMemberships not implemented")
}
func (UnimplementedManagementServiceServer) GetMyOrg(context.Context, *GetMyOrgRequest) (*GetMyOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyOrg not implemented")
}
func (UnimplementedManagementServiceServer) GetOrgByDomainGlobal(context.Context, *GetOrgByDomainGlobalRequest) (*GetOrgByDomainGlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByDomainGlobal not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgChanges(context.Context, *ListOrgChangesRequest) (*ListOrgChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgChanges not implemented")
}
func (UnimplementedManagementServiceServer) AddOrg(context.Context, *AddOrgRequest) (*AddOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrg not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateOrg(context.Context, *DeactivateOrgRequest) (*DeactivateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateOrg not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateOrg(context.Context, *ReactivateOrgRequest) (*ReactivateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateOrg not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgDomains(context.Context, *ListOrgDomainsRequest) (*ListOrgDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgDomains not implemented")
}
func (UnimplementedManagementServiceServer) AddOrgDomain(context.Context, *AddOrgDomainRequest) (*AddOrgDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgDomain not implemented")
}
func (UnimplementedManagementServiceServer) RemoveOrgDomain(context.Context, *RemoveOrgDomainRequest) (*RemoveOrgDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgDomain not implemented")
}
func (UnimplementedManagementServiceServer) GenerateOrgDomainValidation(context.Context, *GenerateOrgDomainValidationRequest) (*GenerateOrgDomainValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOrgDomainValidation not implemented")
}
func (UnimplementedManagementServiceServer) ValidateOrgDomain(context.Context, *ValidateOrgDomainRequest) (*ValidateOrgDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrgDomain not implemented")
}
func (UnimplementedManagementServiceServer) SetPrimaryOrgDomain(context.Context, *SetPrimaryOrgDomainRequest) (*SetPrimaryOrgDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrimaryOrgDomain not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgMemberRoles(context.Context, *ListOrgMemberRolesRequest) (*ListOrgMemberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgMemberRoles not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgMembers(context.Context, *ListOrgMembersRequest) (*ListOrgMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgMembers not implemented")
}
func (UnimplementedManagementServiceServer) AddOrgMember(context.Context, *AddOrgMemberRequest) (*AddOrgMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgMember not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOrgMember(context.Context, *UpdateOrgMemberRequest) (*UpdateOrgMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgMember not implemented")
}
func (UnimplementedManagementServiceServer) RemoveOrgMember(context.Context, *RemoveOrgMemberRequest) (*RemoveOrgMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgMember not implemented")
}
func (UnimplementedManagementServiceServer) GetProjectByID(context.Context, *GetProjectByIDRequest) (*GetProjectByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByID not implemented")
}
func (UnimplementedManagementServiceServer) GetGrantedProjectByID(context.Context, *GetGrantedProjectByIDRequest) (*GetGrantedProjectByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrantedProjectByID not implemented")
}
func (UnimplementedManagementServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedManagementServiceServer) ListGrantedProjects(context.Context, *ListGrantedProjectsRequest) (*ListGrantedProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrantedProjects not implemented")
}
func (UnimplementedManagementServiceServer) ListGrantedProjectRoles(context.Context, *ListGrantedProjectRolesRequest) (*ListGrantedProjectRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrantedProjectRoles not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectChanges(context.Context, *ListProjectChangesRequest) (*ListProjectChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectChanges not implemented")
}
func (UnimplementedManagementServiceServer) AddProject(context.Context, *AddProjectRequest) (*AddProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProject not implemented")
}
func (UnimplementedManagementServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateProject(context.Context, *DeactivateProjectRequest) (*DeactivateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateProject not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateProject(context.Context, *ReactivateProjectRequest) (*ReactivateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateProject not implemented")
}
func (UnimplementedManagementServiceServer) RemoveProject(context.Context, *RemoveProjectRequest) (*RemoveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProject not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectRoles(context.Context, *ListProjectRolesRequest) (*ListProjectRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectRoles not implemented")
}
func (UnimplementedManagementServiceServer) AddProjectRole(context.Context, *AddProjectRoleRequest) (*AddProjectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectRole not implemented")
}
func (UnimplementedManagementServiceServer) BulkAddProjectRoles(context.Context, *BulkAddProjectRolesRequest) (*BulkAddProjectRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAddProjectRoles not implemented")
}
func (UnimplementedManagementServiceServer) UpdateProjectRole(context.Context, *UpdateProjectRoleRequest) (*UpdateProjectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectRole not implemented")
}
func (UnimplementedManagementServiceServer) RemoveProjectRole(context.Context, *RemoveProjectRoleRequest) (*RemoveProjectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectRole not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectMemberRoles(context.Context, *ListProjectMemberRolesRequest) (*ListProjectMemberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectMemberRoles not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectMembers(context.Context, *ListProjectMembersRequest) (*ListProjectMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectMembers not implemented")
}
func (UnimplementedManagementServiceServer) AddProjectMember(context.Context, *AddProjectMemberRequest) (*AddProjectMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectMember not implemented")
}
func (UnimplementedManagementServiceServer) UpdateProjectMember(context.Context, *UpdateProjectMemberRequest) (*UpdateProjectMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectMember not implemented")
}
func (UnimplementedManagementServiceServer) RemoveProjectMember(context.Context, *RemoveProjectMemberRequest) (*RemoveProjectMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectMember not implemented")
}
func (UnimplementedManagementServiceServer) GetAppByID(context.Context, *GetAppByIDRequest) (*GetAppByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByID not implemented")
}
func (UnimplementedManagementServiceServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedManagementServiceServer) ListAppChanges(context.Context, *ListAppChangesRequest) (*ListAppChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppChanges not implemented")
}
func (UnimplementedManagementServiceServer) AddOIDCApp(context.Context, *AddOIDCAppRequest) (*AddOIDCAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOIDCApp not implemented")
}
func (UnimplementedManagementServiceServer) AddAPIApp(context.Context, *AddAPIAppRequest) (*AddAPIAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAPIApp not implemented")
}
func (UnimplementedManagementServiceServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOIDCAppConfig(context.Context, *UpdateOIDCAppConfigRequest) (*UpdateOIDCAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOIDCAppConfig not implemented")
}
func (UnimplementedManagementServiceServer) UpdateAPIAppConfig(context.Context, *UpdateAPIAppConfigRequest) (*UpdateAPIAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIAppConfig not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateApp(context.Context, *DeactivateAppRequest) (*DeactivateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateApp not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateApp(context.Context, *ReactivateAppRequest) (*ReactivateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateApp not implemented")
}
func (UnimplementedManagementServiceServer) RemoveApp(context.Context, *RemoveAppRequest) (*RemoveAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApp not implemented")
}
func (UnimplementedManagementServiceServer) RegenerateOIDCClientSecret(context.Context, *RegenerateOIDCClientSecretRequest) (*RegenerateOIDCClientSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateOIDCClientSecret not implemented")
}
func (UnimplementedManagementServiceServer) RegenerateAPIClientSecret(context.Context, *RegenerateAPIClientSecretRequest) (*RegenerateAPIClientSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateAPIClientSecret not implemented")
}
func (UnimplementedManagementServiceServer) GetAppKey(context.Context, *GetAppKeyRequest) (*GetAppKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppKey not implemented")
}
func (UnimplementedManagementServiceServer) ListAppKeys(context.Context, *ListAppKeysRequest) (*ListAppKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppKeys not implemented")
}
func (UnimplementedManagementServiceServer) AddAppKey(context.Context, *AddAppKeyRequest) (*AddAppKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppKey not implemented")
}
func (UnimplementedManagementServiceServer) RemoveAppKey(context.Context, *RemoveAppKeyRequest) (*RemoveAppKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppKey not implemented")
}
func (UnimplementedManagementServiceServer) GetProjectGrantByID(context.Context, *GetProjectGrantByIDRequest) (*GetProjectGrantByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectGrantByID not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectGrants(context.Context, *ListProjectGrantsRequest) (*ListProjectGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGrants not implemented")
}
func (UnimplementedManagementServiceServer) AddProjectGrant(context.Context, *AddProjectGrantRequest) (*AddProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectGrant not implemented")
}
func (UnimplementedManagementServiceServer) UpdateProjectGrant(context.Context, *UpdateProjectGrantRequest) (*UpdateProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectGrant not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateProjectGrant(context.Context, *DeactivateProjectGrantRequest) (*DeactivateProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateProjectGrant not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateProjectGrant(context.Context, *ReactivateProjectGrantRequest) (*ReactivateProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateProjectGrant not implemented")
}
func (UnimplementedManagementServiceServer) RemoveProjectGrant(context.Context, *RemoveProjectGrantRequest) (*RemoveProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectGrant not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectGrantMemberRoles(context.Context, *ListProjectGrantMemberRolesRequest) (*ListProjectGrantMemberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGrantMemberRoles not implemented")
}
func (UnimplementedManagementServiceServer) ListProjectGrantMembers(context.Context, *ListProjectGrantMembersRequest) (*ListProjectGrantMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGrantMembers not implemented")
}
func (UnimplementedManagementServiceServer) AddProjectGrantMember(context.Context, *AddProjectGrantMemberRequest) (*AddProjectGrantMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectGrantMember not implemented")
}
func (UnimplementedManagementServiceServer) UpdateProjectGrantMember(context.Context, *UpdateProjectGrantMemberRequest) (*UpdateProjectGrantMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectGrantMember not implemented")
}
func (UnimplementedManagementServiceServer) RemoveProjectGrantMember(context.Context, *RemoveProjectGrantMemberRequest) (*RemoveProjectGrantMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectGrantMember not implemented")
}
func (UnimplementedManagementServiceServer) GetUserGrantByID(context.Context, *GetUserGrantByIDRequest) (*GetUserGrantByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGrantByID not implemented")
}
func (UnimplementedManagementServiceServer) ListUserGrants(context.Context, *ListUserGrantRequest) (*ListUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGrants not implemented")
}
func (UnimplementedManagementServiceServer) AddUserGrant(context.Context, *AddUserGrantRequest) (*AddUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) UpdateUserGrant(context.Context, *UpdateUserGrantRequest) (*UpdateUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateUserGrant(context.Context, *DeactivateUserGrantRequest) (*DeactivateUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateUserGrant(context.Context, *ReactivateUserGrantRequest) (*ReactivateUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) RemoveUserGrant(context.Context, *RemoveUserGrantRequest) (*RemoveUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) BulkRemoveUserGrant(context.Context, *BulkRemoveUserGrantRequest) (*BulkRemoveUserGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkRemoveUserGrant not implemented")
}
func (UnimplementedManagementServiceServer) GetFeatures(context.Context, *GetFeaturesRequest) (*GetFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (UnimplementedManagementServiceServer) GetOrgIAMPolicy(context.Context, *GetOrgIAMPolicyRequest) (*GetOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgIAMPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetLoginPolicy(context.Context, *GetLoginPolicyRequest) (*GetLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultLoginPolicy(context.Context, *GetDefaultLoginPolicyRequest) (*GetDefaultLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomLoginPolicy(context.Context, *AddCustomLoginPolicyRequest) (*AddCustomLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomLoginPolicy(context.Context, *UpdateCustomLoginPolicyRequest) (*UpdateCustomLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetLoginPolicyToDefault(context.Context, *ResetLoginPolicyToDefaultRequest) (*ResetLoginPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetLoginPolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) ListLoginPolicyIDPs(context.Context, *ListLoginPolicyIDPsRequest) (*ListLoginPolicyIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicyIDPs not implemented")
}
func (UnimplementedManagementServiceServer) AddIDPToLoginPolicy(context.Context, *AddIDPToLoginPolicyRequest) (*AddIDPToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIDPToLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) RemoveIDPFromLoginPolicy(context.Context, *RemoveIDPFromLoginPolicyRequest) (*RemoveIDPFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIDPFromLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ListLoginPolicySecondFactors(context.Context, *ListLoginPolicySecondFactorsRequest) (*ListLoginPolicySecondFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicySecondFactors not implemented")
}
func (UnimplementedManagementServiceServer) AddSecondFactorToLoginPolicy(context.Context, *AddSecondFactorToLoginPolicyRequest) (*AddSecondFactorToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecondFactorToLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) RemoveSecondFactorFromLoginPolicy(context.Context, *RemoveSecondFactorFromLoginPolicyRequest) (*RemoveSecondFactorFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSecondFactorFromLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ListLoginPolicyMultiFactors(context.Context, *ListLoginPolicyMultiFactorsRequest) (*ListLoginPolicyMultiFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicyMultiFactors not implemented")
}
func (UnimplementedManagementServiceServer) AddMultiFactorToLoginPolicy(context.Context, *AddMultiFactorToLoginPolicyRequest) (*AddMultiFactorToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiFactorToLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) RemoveMultiFactorFromLoginPolicy(context.Context, *RemoveMultiFactorFromLoginPolicyRequest) (*RemoveMultiFactorFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMultiFactorFromLoginPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetPasswordComplexityPolicy(context.Context, *GetPasswordComplexityPolicyRequest) (*GetPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordComplexityPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultPasswordComplexityPolicy(context.Context, *GetDefaultPasswordComplexityPolicyRequest) (*GetDefaultPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordComplexityPolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomPasswordComplexityPolicy(context.Context, *AddCustomPasswordComplexityPolicyRequest) (*AddCustomPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomPasswordComplexityPolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomPasswordComplexityPolicy(context.Context, *UpdateCustomPasswordComplexityPolicyRequest) (*UpdateCustomPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomPasswordComplexityPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetPasswordComplexityPolicyToDefault(context.Context, *ResetPasswordComplexityPolicyToDefaultRequest) (*ResetPasswordComplexityPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordComplexityPolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetPasswordAgePolicy(context.Context, *GetPasswordAgePolicyRequest) (*GetPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordAgePolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultPasswordAgePolicy(context.Context, *GetDefaultPasswordAgePolicyRequest) (*GetDefaultPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordAgePolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomPasswordAgePolicy(context.Context, *AddCustomPasswordAgePolicyRequest) (*AddCustomPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomPasswordAgePolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomPasswordAgePolicy(context.Context, *UpdateCustomPasswordAgePolicyRequest) (*UpdateCustomPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomPasswordAgePolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetPasswordAgePolicyToDefault(context.Context, *ResetPasswordAgePolicyToDefaultRequest) (*ResetPasswordAgePolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordAgePolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetPasswordLockoutPolicy(context.Context, *GetPasswordLockoutPolicyRequest) (*GetPasswordLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordLockoutPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultPasswordLockoutPolicy(context.Context, *GetDefaultPasswordLockoutPolicyRequest) (*GetDefaultPasswordLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordLockoutPolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomPasswordLockoutPolicy(context.Context, *AddCustomPasswordLockoutPolicyRequest) (*AddCustomPasswordLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomPasswordLockoutPolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomPasswordLockoutPolicy(context.Context, *UpdateCustomPasswordLockoutPolicyRequest) (*UpdateCustomPasswordLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomPasswordLockoutPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetPasswordLockoutPolicyToDefault(context.Context, *ResetPasswordLockoutPolicyToDefaultRequest) (*ResetPasswordLockoutPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordLockoutPolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetLabelPolicy(context.Context, *GetLabelPolicyRequest) (*GetLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelPolicy not implemented")
}
func (UnimplementedManagementServiceServer) GetDefaultLabelPolicy(context.Context, *GetDefaultLabelPolicyRequest) (*GetDefaultLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLabelPolicy not implemented")
}
func (UnimplementedManagementServiceServer) AddCustomLabelPolicy(context.Context, *AddCustomLabelPolicyRequest) (*AddCustomLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomLabelPolicy not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomLabelPolicy(context.Context, *UpdateCustomLabelPolicyRequest) (*UpdateCustomLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomLabelPolicy not implemented")
}
func (UnimplementedManagementServiceServer) ResetLabelPolicyToDefault(context.Context, *ResetLabelPolicyToDefaultRequest) (*ResetLabelPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetLabelPolicyToDefault not implemented")
}
func (UnimplementedManagementServiceServer) GetOrgIDPByID(context.Context, *GetOrgIDPByIDRequest) (*GetOrgIDPByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgIDPByID not implemented")
}
func (UnimplementedManagementServiceServer) ListOrgIDPs(context.Context, *ListOrgIDPsRequest) (*ListOrgIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgIDPs not implemented")
}
func (UnimplementedManagementServiceServer) AddOrgOIDCIDP(context.Context, *AddOrgOIDCIDPRequest) (*AddOrgOIDCIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgOIDCIDP not implemented")
}
func (UnimplementedManagementServiceServer) DeactivateOrgIDP(context.Context, *DeactivateOrgIDPRequest) (*DeactivateOrgIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateOrgIDP not implemented")
}
func (UnimplementedManagementServiceServer) ReactivateOrgIDP(context.Context, *ReactivateOrgIDPRequest) (*ReactivateOrgIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateOrgIDP not implemented")
}
func (UnimplementedManagementServiceServer) RemoveOrgIDP(context.Context, *RemoveOrgIDPRequest) (*RemoveOrgIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgIDP not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOrgIDP(context.Context, *UpdateOrgIDPRequest) (*UpdateOrgIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgIDP not implemented")
}
func (UnimplementedManagementServiceServer) UpdateOrgIDPOIDCConfig(context.Context, *UpdateOrgIDPOIDCConfigRequest) (*UpdateOrgIDPOIDCConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgIDPOIDCConfig not implemented")
}
func (UnimplementedManagementServiceServer) mustEmbedUnimplementedManagementServiceServer() {}

// UnsafeManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServiceServer will
// result in compilation errors.
type UnsafeManagementServiceServer interface {
	mustEmbedUnimplementedManagementServiceServer()
}

func RegisterManagementServiceServer(s grpc.ServiceRegistrar, srv ManagementServiceServer) {
	s.RegisterService(&ManagementService_ServiceDesc, srv)
}

func _ManagementService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetOIDCInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOIDCInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetOIDCInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetOIDCInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetOIDCInformation(ctx, req.(*GetOIDCInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetIAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetIAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetIAM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetIAM(ctx, req.(*GetIAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUserByLoginNameGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByLoginNameGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUserByLoginNameGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetUserByLoginNameGlobal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUserByLoginNameGlobal(ctx, req.(*GetUserByLoginNameGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListUserChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListUserChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListUserChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListUserChanges(ctx, req.(*ListUserChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_IsUserUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).IsUserUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/IsUserUnique",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).IsUserUnique(ctx, req.(*IsUserUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddHumanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHumanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddHumanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddHumanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddHumanUser(ctx, req.(*AddHumanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ImportHumanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportHumanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ImportHumanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ImportHumanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ImportHumanUser(ctx, req.(*ImportHumanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddMachineUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMachineUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddMachineUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddMachineUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddMachineUser(ctx, req.(*AddMachineUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateUser(ctx, req.(*DeactivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateUser(ctx, req.(*ReactivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_LockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).LockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/LockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).LockUser(ctx, req.(*LockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UnlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UnlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UnlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UnlockUser(ctx, req.(*UnlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateUserName(ctx, req.(*UpdateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetHumanProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumanProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetHumanProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetHumanProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetHumanProfile(ctx, req.(*GetHumanProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateHumanProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHumanProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateHumanProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateHumanProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateHumanProfile(ctx, req.(*UpdateHumanProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetHumanEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumanEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetHumanEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetHumanEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetHumanEmail(ctx, req.(*GetHumanEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateHumanEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHumanEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateHumanEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateHumanEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateHumanEmail(ctx, req.(*UpdateHumanEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResendHumanInitialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendHumanInitializationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResendHumanInitialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResendHumanInitialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResendHumanInitialization(ctx, req.(*ResendHumanInitializationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResendHumanEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendHumanEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResendHumanEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResendHumanEmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResendHumanEmailVerification(ctx, req.(*ResendHumanEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetHumanPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumanPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetHumanPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetHumanPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetHumanPhone(ctx, req.(*GetHumanPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateHumanPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHumanPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateHumanPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateHumanPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateHumanPhone(ctx, req.(*UpdateHumanPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanPhone(ctx, req.(*RemoveHumanPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResendHumanPhoneVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendHumanPhoneVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResendHumanPhoneVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResendHumanPhoneVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResendHumanPhoneVerification(ctx, req.(*ResendHumanPhoneVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetHumanInitialPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHumanInitialPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetHumanInitialPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetHumanInitialPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetHumanInitialPassword(ctx, req.(*SetHumanInitialPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SendHumanResetPasswordNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendHumanResetPasswordNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SendHumanResetPasswordNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SendHumanResetPasswordNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SendHumanResetPasswordNotification(ctx, req.(*SendHumanResetPasswordNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListHumanAuthFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHumanAuthFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListHumanAuthFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListHumanAuthFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListHumanAuthFactors(ctx, req.(*ListHumanAuthFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanAuthFactorOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanAuthFactorOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorOTP(ctx, req.(*RemoveHumanAuthFactorOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanAuthFactorU2F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanAuthFactorU2FRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorU2F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorU2F",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanAuthFactorU2F(ctx, req.(*RemoveHumanAuthFactorU2FRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListHumanPasswordless_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHumanPasswordlessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListHumanPasswordless(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListHumanPasswordless",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListHumanPasswordless(ctx, req.(*ListHumanPasswordlessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanPasswordless_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanPasswordlessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanPasswordless(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanPasswordless",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanPasswordless(ctx, req.(*RemoveHumanPasswordlessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateMachine(ctx, req.(*UpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetMachineKeyByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineKeyByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetMachineKeyByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetMachineKeyByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetMachineKeyByIDs(ctx, req.(*GetMachineKeyByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListMachineKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListMachineKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListMachineKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListMachineKeys(ctx, req.(*ListMachineKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddMachineKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMachineKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddMachineKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddMachineKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddMachineKey(ctx, req.(*AddMachineKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveMachineKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMachineKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveMachineKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveMachineKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveMachineKey(ctx, req.(*RemoveMachineKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListHumanLinkedIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHumanLinkedIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListHumanLinkedIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListHumanLinkedIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListHumanLinkedIDPs(ctx, req.(*ListHumanLinkedIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveHumanLinkedIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHumanLinkedIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveHumanLinkedIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveHumanLinkedIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveHumanLinkedIDP(ctx, req.(*RemoveHumanLinkedIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListUserMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListUserMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListUserMemberships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListUserMemberships(ctx, req.(*ListUserMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetMyOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetMyOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetMyOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetMyOrg(ctx, req.(*GetMyOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetOrgByDomainGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByDomainGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetOrgByDomainGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetOrgByDomainGlobal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetOrgByDomainGlobal(ctx, req.(*GetOrgByDomainGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgChanges(ctx, req.(*ListOrgChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOrg(ctx, req.(*AddOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateOrg(ctx, req.(*DeactivateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateOrg(ctx, req.(*ReactivateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgDomains(ctx, req.(*ListOrgDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOrgDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOrgDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOrgDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOrgDomain(ctx, req.(*AddOrgDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveOrgDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveOrgDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveOrgDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveOrgDomain(ctx, req.(*RemoveOrgDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GenerateOrgDomainValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOrgDomainValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GenerateOrgDomainValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GenerateOrgDomainValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GenerateOrgDomainValidation(ctx, req.(*GenerateOrgDomainValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ValidateOrgDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOrgDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ValidateOrgDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ValidateOrgDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ValidateOrgDomain(ctx, req.(*ValidateOrgDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetPrimaryOrgDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrimaryOrgDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetPrimaryOrgDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/SetPrimaryOrgDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetPrimaryOrgDomain(ctx, req.(*SetPrimaryOrgDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgMemberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgMemberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgMemberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgMemberRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgMemberRoles(ctx, req.(*ListOrgMemberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgMembers(ctx, req.(*ListOrgMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOrgMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOrgMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOrgMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOrgMember(ctx, req.(*AddOrgMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOrgMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOrgMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateOrgMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOrgMember(ctx, req.(*UpdateOrgMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveOrgMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveOrgMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveOrgMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveOrgMember(ctx, req.(*RemoveOrgMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetProjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetProjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetProjectByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetProjectByID(ctx, req.(*GetProjectByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetGrantedProjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrantedProjectByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetGrantedProjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetGrantedProjectByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetGrantedProjectByID(ctx, req.(*GetGrantedProjectByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListGrantedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGrantedProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListGrantedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListGrantedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListGrantedProjects(ctx, req.(*ListGrantedProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListGrantedProjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGrantedProjectRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListGrantedProjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListGrantedProjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListGrantedProjectRoles(ctx, req.(*ListGrantedProjectRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectChanges(ctx, req.(*ListProjectChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddProject(ctx, req.(*AddProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateProject(ctx, req.(*DeactivateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateProject(ctx, req.(*ReactivateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveProject(ctx, req.(*RemoveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectRoles(ctx, req.(*ListProjectRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddProjectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddProjectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddProjectRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddProjectRole(ctx, req.(*AddProjectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_BulkAddProjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddProjectRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).BulkAddProjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/BulkAddProjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).BulkAddProjectRoles(ctx, req.(*BulkAddProjectRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateProjectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateProjectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateProjectRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateProjectRole(ctx, req.(*UpdateProjectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveProjectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveProjectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveProjectRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveProjectRole(ctx, req.(*RemoveProjectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectMemberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectMemberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectMemberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectMemberRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectMemberRoles(ctx, req.(*ListProjectMemberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectMembers(ctx, req.(*ListProjectMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddProjectMember(ctx, req.(*AddProjectMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateProjectMember(ctx, req.(*UpdateProjectMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveProjectMember(ctx, req.(*RemoveProjectMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetAppByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetAppByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetAppByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetAppByID(ctx, req.(*GetAppByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListAppChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListAppChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListAppChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListAppChanges(ctx, req.(*ListAppChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOIDCApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOIDCAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOIDCApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOIDCApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOIDCApp(ctx, req.(*AddOIDCAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddAPIApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAPIAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddAPIApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddAPIApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddAPIApp(ctx, req.(*AddAPIAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOIDCAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOIDCAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOIDCAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateOIDCAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOIDCAppConfig(ctx, req.(*UpdateOIDCAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateAPIAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateAPIAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateAPIAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateAPIAppConfig(ctx, req.(*UpdateAPIAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateApp(ctx, req.(*DeactivateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateApp(ctx, req.(*ReactivateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveApp(ctx, req.(*RemoveAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RegenerateOIDCClientSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateOIDCClientSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RegenerateOIDCClientSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RegenerateOIDCClientSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RegenerateOIDCClientSecret(ctx, req.(*RegenerateOIDCClientSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RegenerateAPIClientSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateAPIClientSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RegenerateAPIClientSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RegenerateAPIClientSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RegenerateAPIClientSecret(ctx, req.(*RegenerateAPIClientSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetAppKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetAppKey(ctx, req.(*GetAppKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListAppKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListAppKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListAppKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListAppKeys(ctx, req.(*ListAppKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddAppKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddAppKey(ctx, req.(*AddAppKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveAppKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveAppKey(ctx, req.(*RemoveAppKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetProjectGrantByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectGrantByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetProjectGrantByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetProjectGrantByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetProjectGrantByID(ctx, req.(*GetProjectGrantByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectGrants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectGrants(ctx, req.(*ListProjectGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddProjectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddProjectGrant(ctx, req.(*AddProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateProjectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateProjectGrant(ctx, req.(*UpdateProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateProjectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateProjectGrant(ctx, req.(*DeactivateProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateProjectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateProjectGrant(ctx, req.(*ReactivateProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveProjectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveProjectGrant(ctx, req.(*RemoveProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectGrantMemberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGrantMemberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectGrantMemberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectGrantMemberRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectGrantMemberRoles(ctx, req.(*ListProjectGrantMemberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListProjectGrantMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGrantMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListProjectGrantMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListProjectGrantMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListProjectGrantMembers(ctx, req.(*ListProjectGrantMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddProjectGrantMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectGrantMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddProjectGrantMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddProjectGrantMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddProjectGrantMember(ctx, req.(*AddProjectGrantMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateProjectGrantMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectGrantMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateProjectGrantMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateProjectGrantMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateProjectGrantMember(ctx, req.(*UpdateProjectGrantMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveProjectGrantMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectGrantMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveProjectGrantMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveProjectGrantMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveProjectGrantMember(ctx, req.(*RemoveProjectGrantMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetUserGrantByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGrantByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetUserGrantByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetUserGrantByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetUserGrantByID(ctx, req.(*GetUserGrantByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListUserGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListUserGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListUserGrants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListUserGrants(ctx, req.(*ListUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddUserGrant(ctx, req.(*AddUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateUserGrant(ctx, req.(*UpdateUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateUserGrant(ctx, req.(*DeactivateUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateUserGrant(ctx, req.(*ReactivateUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveUserGrant(ctx, req.(*RemoveUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_BulkRemoveUserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRemoveUserGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).BulkRemoveUserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/BulkRemoveUserGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).BulkRemoveUserGrant(ctx, req.(*BulkRemoveUserGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetFeatures(ctx, req.(*GetFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetOrgIAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetOrgIAMPolicy(ctx, req.(*GetOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetLoginPolicy(ctx, req.(*GetLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultLoginPolicy(ctx, req.(*GetDefaultLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomLoginPolicy(ctx, req.(*AddCustomLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomLoginPolicy(ctx, req.(*UpdateCustomLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetLoginPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetLoginPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetLoginPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetLoginPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetLoginPolicyToDefault(ctx, req.(*ResetLoginPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListLoginPolicyIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicyIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListLoginPolicyIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListLoginPolicyIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListLoginPolicyIDPs(ctx, req.(*ListLoginPolicyIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddIDPToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIDPToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddIDPToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddIDPToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddIDPToLoginPolicy(ctx, req.(*AddIDPToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveIDPFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIDPFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveIDPFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveIDPFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveIDPFromLoginPolicy(ctx, req.(*RemoveIDPFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListLoginPolicySecondFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicySecondFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListLoginPolicySecondFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListLoginPolicySecondFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListLoginPolicySecondFactors(ctx, req.(*ListLoginPolicySecondFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddSecondFactorToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecondFactorToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddSecondFactorToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddSecondFactorToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddSecondFactorToLoginPolicy(ctx, req.(*AddSecondFactorToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveSecondFactorFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSecondFactorFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveSecondFactorFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveSecondFactorFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveSecondFactorFromLoginPolicy(ctx, req.(*RemoveSecondFactorFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListLoginPolicyMultiFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicyMultiFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListLoginPolicyMultiFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListLoginPolicyMultiFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListLoginPolicyMultiFactors(ctx, req.(*ListLoginPolicyMultiFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddMultiFactorToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMultiFactorToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddMultiFactorToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddMultiFactorToLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddMultiFactorToLoginPolicy(ctx, req.(*AddMultiFactorToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveMultiFactorFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMultiFactorFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveMultiFactorFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveMultiFactorFromLoginPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveMultiFactorFromLoginPolicy(ctx, req.(*RemoveMultiFactorFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetPasswordComplexityPolicy(ctx, req.(*GetPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultPasswordComplexityPolicy(ctx, req.(*GetDefaultPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomPasswordComplexityPolicy(ctx, req.(*AddCustomPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomPasswordComplexityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomPasswordComplexityPolicy(ctx, req.(*UpdateCustomPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetPasswordComplexityPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordComplexityPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetPasswordComplexityPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetPasswordComplexityPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetPasswordComplexityPolicyToDefault(ctx, req.(*ResetPasswordComplexityPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetPasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetPasswordAgePolicy(ctx, req.(*GetPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultPasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultPasswordAgePolicy(ctx, req.(*GetDefaultPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomPasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomPasswordAgePolicy(ctx, req.(*AddCustomPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomPasswordAgePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomPasswordAgePolicy(ctx, req.(*UpdateCustomPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetPasswordAgePolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordAgePolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetPasswordAgePolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetPasswordAgePolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetPasswordAgePolicyToDefault(ctx, req.(*ResetPasswordAgePolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetPasswordLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetPasswordLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetPasswordLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetPasswordLockoutPolicy(ctx, req.(*GetPasswordLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultPasswordLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultPasswordLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultPasswordLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultPasswordLockoutPolicy(ctx, req.(*GetDefaultPasswordLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomPasswordLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomPasswordLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomPasswordLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomPasswordLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomPasswordLockoutPolicy(ctx, req.(*AddCustomPasswordLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomPasswordLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomPasswordLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomPasswordLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomPasswordLockoutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomPasswordLockoutPolicy(ctx, req.(*UpdateCustomPasswordLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetPasswordLockoutPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordLockoutPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetPasswordLockoutPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetPasswordLockoutPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetPasswordLockoutPolicyToDefault(ctx, req.(*ResetPasswordLockoutPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetLabelPolicy(ctx, req.(*GetLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDefaultLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDefaultLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetDefaultLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDefaultLabelPolicy(ctx, req.(*GetDefaultLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddCustomLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddCustomLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddCustomLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddCustomLabelPolicy(ctx, req.(*AddCustomLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateCustomLabelPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomLabelPolicy(ctx, req.(*UpdateCustomLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetLabelPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetLabelPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetLabelPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ResetLabelPolicyToDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetLabelPolicyToDefault(ctx, req.(*ResetLabelPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetOrgIDPByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgIDPByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetOrgIDPByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/GetOrgIDPByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetOrgIDPByID(ctx, req.(*GetOrgIDPByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListOrgIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListOrgIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ListOrgIDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListOrgIDPs(ctx, req.(*ListOrgIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddOrgOIDCIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgOIDCIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddOrgOIDCIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/AddOrgOIDCIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddOrgOIDCIDP(ctx, req.(*AddOrgOIDCIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeactivateOrgIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateOrgIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeactivateOrgIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/DeactivateOrgIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeactivateOrgIDP(ctx, req.(*DeactivateOrgIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReactivateOrgIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateOrgIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReactivateOrgIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/ReactivateOrgIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReactivateOrgIDP(ctx, req.(*ReactivateOrgIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveOrgIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveOrgIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/RemoveOrgIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveOrgIDP(ctx, req.(*RemoveOrgIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOrgIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOrgIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateOrgIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOrgIDP(ctx, req.(*UpdateOrgIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateOrgIDPOIDCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgIDPOIDCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateOrgIDPOIDCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zitadel.management.v1.ManagementService/UpdateOrgIDPOIDCConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateOrgIDPOIDCConfig(ctx, req.(*UpdateOrgIDPOIDCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementService_ServiceDesc is the grpc.ServiceDesc for ManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.management.v1.ManagementService",
	HandlerType: (*ManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _ManagementService_Healthz_Handler,
		},
		{
			MethodName: "GetOIDCInformation",
			Handler:    _ManagementService_GetOIDCInformation_Handler,
		},
		{
			MethodName: "GetIAM",
			Handler:    _ManagementService_GetIAM_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _ManagementService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByLoginNameGlobal",
			Handler:    _ManagementService_GetUserByLoginNameGlobal_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _ManagementService_ListUsers_Handler,
		},
		{
			MethodName: "ListUserChanges",
			Handler:    _ManagementService_ListUserChanges_Handler,
		},
		{
			MethodName: "IsUserUnique",
			Handler:    _ManagementService_IsUserUnique_Handler,
		},
		{
			MethodName: "AddHumanUser",
			Handler:    _ManagementService_AddHumanUser_Handler,
		},
		{
			MethodName: "ImportHumanUser",
			Handler:    _ManagementService_ImportHumanUser_Handler,
		},
		{
			MethodName: "AddMachineUser",
			Handler:    _ManagementService_AddMachineUser_Handler,
		},
		{
			MethodName: "DeactivateUser",
			Handler:    _ManagementService_DeactivateUser_Handler,
		},
		{
			MethodName: "ReactivateUser",
			Handler:    _ManagementService_ReactivateUser_Handler,
		},
		{
			MethodName: "LockUser",
			Handler:    _ManagementService_LockUser_Handler,
		},
		{
			MethodName: "UnlockUser",
			Handler:    _ManagementService_UnlockUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _ManagementService_RemoveUser_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _ManagementService_UpdateUserName_Handler,
		},
		{
			MethodName: "GetHumanProfile",
			Handler:    _ManagementService_GetHumanProfile_Handler,
		},
		{
			MethodName: "UpdateHumanProfile",
			Handler:    _ManagementService_UpdateHumanProfile_Handler,
		},
		{
			MethodName: "GetHumanEmail",
			Handler:    _ManagementService_GetHumanEmail_Handler,
		},
		{
			MethodName: "UpdateHumanEmail",
			Handler:    _ManagementService_UpdateHumanEmail_Handler,
		},
		{
			MethodName: "ResendHumanInitialization",
			Handler:    _ManagementService_ResendHumanInitialization_Handler,
		},
		{
			MethodName: "ResendHumanEmailVerification",
			Handler:    _ManagementService_ResendHumanEmailVerification_Handler,
		},
		{
			MethodName: "GetHumanPhone",
			Handler:    _ManagementService_GetHumanPhone_Handler,
		},
		{
			MethodName: "UpdateHumanPhone",
			Handler:    _ManagementService_UpdateHumanPhone_Handler,
		},
		{
			MethodName: "RemoveHumanPhone",
			Handler:    _ManagementService_RemoveHumanPhone_Handler,
		},
		{
			MethodName: "ResendHumanPhoneVerification",
			Handler:    _ManagementService_ResendHumanPhoneVerification_Handler,
		},
		{
			MethodName: "SetHumanInitialPassword",
			Handler:    _ManagementService_SetHumanInitialPassword_Handler,
		},
		{
			MethodName: "SendHumanResetPasswordNotification",
			Handler:    _ManagementService_SendHumanResetPasswordNotification_Handler,
		},
		{
			MethodName: "ListHumanAuthFactors",
			Handler:    _ManagementService_ListHumanAuthFactors_Handler,
		},
		{
			MethodName: "RemoveHumanAuthFactorOTP",
			Handler:    _ManagementService_RemoveHumanAuthFactorOTP_Handler,
		},
		{
			MethodName: "RemoveHumanAuthFactorU2F",
			Handler:    _ManagementService_RemoveHumanAuthFactorU2F_Handler,
		},
		{
			MethodName: "ListHumanPasswordless",
			Handler:    _ManagementService_ListHumanPasswordless_Handler,
		},
		{
			MethodName: "RemoveHumanPasswordless",
			Handler:    _ManagementService_RemoveHumanPasswordless_Handler,
		},
		{
			MethodName: "UpdateMachine",
			Handler:    _ManagementService_UpdateMachine_Handler,
		},
		{
			MethodName: "GetMachineKeyByIDs",
			Handler:    _ManagementService_GetMachineKeyByIDs_Handler,
		},
		{
			MethodName: "ListMachineKeys",
			Handler:    _ManagementService_ListMachineKeys_Handler,
		},
		{
			MethodName: "AddMachineKey",
			Handler:    _ManagementService_AddMachineKey_Handler,
		},
		{
			MethodName: "RemoveMachineKey",
			Handler:    _ManagementService_RemoveMachineKey_Handler,
		},
		{
			MethodName: "ListHumanLinkedIDPs",
			Handler:    _ManagementService_ListHumanLinkedIDPs_Handler,
		},
		{
			MethodName: "RemoveHumanLinkedIDP",
			Handler:    _ManagementService_RemoveHumanLinkedIDP_Handler,
		},
		{
			MethodName: "ListUserMemberships",
			Handler:    _ManagementService_ListUserMemberships_Handler,
		},
		{
			MethodName: "GetMyOrg",
			Handler:    _ManagementService_GetMyOrg_Handler,
		},
		{
			MethodName: "GetOrgByDomainGlobal",
			Handler:    _ManagementService_GetOrgByDomainGlobal_Handler,
		},
		{
			MethodName: "ListOrgChanges",
			Handler:    _ManagementService_ListOrgChanges_Handler,
		},
		{
			MethodName: "AddOrg",
			Handler:    _ManagementService_AddOrg_Handler,
		},
		{
			MethodName: "DeactivateOrg",
			Handler:    _ManagementService_DeactivateOrg_Handler,
		},
		{
			MethodName: "ReactivateOrg",
			Handler:    _ManagementService_ReactivateOrg_Handler,
		},
		{
			MethodName: "ListOrgDomains",
			Handler:    _ManagementService_ListOrgDomains_Handler,
		},
		{
			MethodName: "AddOrgDomain",
			Handler:    _ManagementService_AddOrgDomain_Handler,
		},
		{
			MethodName: "RemoveOrgDomain",
			Handler:    _ManagementService_RemoveOrgDomain_Handler,
		},
		{
			MethodName: "GenerateOrgDomainValidation",
			Handler:    _ManagementService_GenerateOrgDomainValidation_Handler,
		},
		{
			MethodName: "ValidateOrgDomain",
			Handler:    _ManagementService_ValidateOrgDomain_Handler,
		},
		{
			MethodName: "SetPrimaryOrgDomain",
			Handler:    _ManagementService_SetPrimaryOrgDomain_Handler,
		},
		{
			MethodName: "ListOrgMemberRoles",
			Handler:    _ManagementService_ListOrgMemberRoles_Handler,
		},
		{
			MethodName: "ListOrgMembers",
			Handler:    _ManagementService_ListOrgMembers_Handler,
		},
		{
			MethodName: "AddOrgMember",
			Handler:    _ManagementService_AddOrgMember_Handler,
		},
		{
			MethodName: "UpdateOrgMember",
			Handler:    _ManagementService_UpdateOrgMember_Handler,
		},
		{
			MethodName: "RemoveOrgMember",
			Handler:    _ManagementService_RemoveOrgMember_Handler,
		},
		{
			MethodName: "GetProjectByID",
			Handler:    _ManagementService_GetProjectByID_Handler,
		},
		{
			MethodName: "GetGrantedProjectByID",
			Handler:    _ManagementService_GetGrantedProjectByID_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ManagementService_ListProjects_Handler,
		},
		{
			MethodName: "ListGrantedProjects",
			Handler:    _ManagementService_ListGrantedProjects_Handler,
		},
		{
			MethodName: "ListGrantedProjectRoles",
			Handler:    _ManagementService_ListGrantedProjectRoles_Handler,
		},
		{
			MethodName: "ListProjectChanges",
			Handler:    _ManagementService_ListProjectChanges_Handler,
		},
		{
			MethodName: "AddProject",
			Handler:    _ManagementService_AddProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ManagementService_UpdateProject_Handler,
		},
		{
			MethodName: "DeactivateProject",
			Handler:    _ManagementService_DeactivateProject_Handler,
		},
		{
			MethodName: "ReactivateProject",
			Handler:    _ManagementService_ReactivateProject_Handler,
		},
		{
			MethodName: "RemoveProject",
			Handler:    _ManagementService_RemoveProject_Handler,
		},
		{
			MethodName: "ListProjectRoles",
			Handler:    _ManagementService_ListProjectRoles_Handler,
		},
		{
			MethodName: "AddProjectRole",
			Handler:    _ManagementService_AddProjectRole_Handler,
		},
		{
			MethodName: "BulkAddProjectRoles",
			Handler:    _ManagementService_BulkAddProjectRoles_Handler,
		},
		{
			MethodName: "UpdateProjectRole",
			Handler:    _ManagementService_UpdateProjectRole_Handler,
		},
		{
			MethodName: "RemoveProjectRole",
			Handler:    _ManagementService_RemoveProjectRole_Handler,
		},
		{
			MethodName: "ListProjectMemberRoles",
			Handler:    _ManagementService_ListProjectMemberRoles_Handler,
		},
		{
			MethodName: "ListProjectMembers",
			Handler:    _ManagementService_ListProjectMembers_Handler,
		},
		{
			MethodName: "AddProjectMember",
			Handler:    _ManagementService_AddProjectMember_Handler,
		},
		{
			MethodName: "UpdateProjectMember",
			Handler:    _ManagementService_UpdateProjectMember_Handler,
		},
		{
			MethodName: "RemoveProjectMember",
			Handler:    _ManagementService_RemoveProjectMember_Handler,
		},
		{
			MethodName: "GetAppByID",
			Handler:    _ManagementService_GetAppByID_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _ManagementService_ListApps_Handler,
		},
		{
			MethodName: "ListAppChanges",
			Handler:    _ManagementService_ListAppChanges_Handler,
		},
		{
			MethodName: "AddOIDCApp",
			Handler:    _ManagementService_AddOIDCApp_Handler,
		},
		{
			MethodName: "AddAPIApp",
			Handler:    _ManagementService_AddAPIApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _ManagementService_UpdateApp_Handler,
		},
		{
			MethodName: "UpdateOIDCAppConfig",
			Handler:    _ManagementService_UpdateOIDCAppConfig_Handler,
		},
		{
			MethodName: "UpdateAPIAppConfig",
			Handler:    _ManagementService_UpdateAPIAppConfig_Handler,
		},
		{
			MethodName: "DeactivateApp",
			Handler:    _ManagementService_DeactivateApp_Handler,
		},
		{
			MethodName: "ReactivateApp",
			Handler:    _ManagementService_ReactivateApp_Handler,
		},
		{
			MethodName: "RemoveApp",
			Handler:    _ManagementService_RemoveApp_Handler,
		},
		{
			MethodName: "RegenerateOIDCClientSecret",
			Handler:    _ManagementService_RegenerateOIDCClientSecret_Handler,
		},
		{
			MethodName: "RegenerateAPIClientSecret",
			Handler:    _ManagementService_RegenerateAPIClientSecret_Handler,
		},
		{
			MethodName: "GetAppKey",
			Handler:    _ManagementService_GetAppKey_Handler,
		},
		{
			MethodName: "ListAppKeys",
			Handler:    _ManagementService_ListAppKeys_Handler,
		},
		{
			MethodName: "AddAppKey",
			Handler:    _ManagementService_AddAppKey_Handler,
		},
		{
			MethodName: "RemoveAppKey",
			Handler:    _ManagementService_RemoveAppKey_Handler,
		},
		{
			MethodName: "GetProjectGrantByID",
			Handler:    _ManagementService_GetProjectGrantByID_Handler,
		},
		{
			MethodName: "ListProjectGrants",
			Handler:    _ManagementService_ListProjectGrants_Handler,
		},
		{
			MethodName: "AddProjectGrant",
			Handler:    _ManagementService_AddProjectGrant_Handler,
		},
		{
			MethodName: "UpdateProjectGrant",
			Handler:    _ManagementService_UpdateProjectGrant_Handler,
		},
		{
			MethodName: "DeactivateProjectGrant",
			Handler:    _ManagementService_DeactivateProjectGrant_Handler,
		},
		{
			MethodName: "ReactivateProjectGrant",
			Handler:    _ManagementService_ReactivateProjectGrant_Handler,
		},
		{
			MethodName: "RemoveProjectGrant",
			Handler:    _ManagementService_RemoveProjectGrant_Handler,
		},
		{
			MethodName: "ListProjectGrantMemberRoles",
			Handler:    _ManagementService_ListProjectGrantMemberRoles_Handler,
		},
		{
			MethodName: "ListProjectGrantMembers",
			Handler:    _ManagementService_ListProjectGrantMembers_Handler,
		},
		{
			MethodName: "AddProjectGrantMember",
			Handler:    _ManagementService_AddProjectGrantMember_Handler,
		},
		{
			MethodName: "UpdateProjectGrantMember",
			Handler:    _ManagementService_UpdateProjectGrantMember_Handler,
		},
		{
			MethodName: "RemoveProjectGrantMember",
			Handler:    _ManagementService_RemoveProjectGrantMember_Handler,
		},
		{
			MethodName: "GetUserGrantByID",
			Handler:    _ManagementService_GetUserGrantByID_Handler,
		},
		{
			MethodName: "ListUserGrants",
			Handler:    _ManagementService_ListUserGrants_Handler,
		},
		{
			MethodName: "AddUserGrant",
			Handler:    _ManagementService_AddUserGrant_Handler,
		},
		{
			MethodName: "UpdateUserGrant",
			Handler:    _ManagementService_UpdateUserGrant_Handler,
		},
		{
			MethodName: "DeactivateUserGrant",
			Handler:    _ManagementService_DeactivateUserGrant_Handler,
		},
		{
			MethodName: "ReactivateUserGrant",
			Handler:    _ManagementService_ReactivateUserGrant_Handler,
		},
		{
			MethodName: "RemoveUserGrant",
			Handler:    _ManagementService_RemoveUserGrant_Handler,
		},
		{
			MethodName: "BulkRemoveUserGrant",
			Handler:    _ManagementService_BulkRemoveUserGrant_Handler,
		},
		{
			MethodName: "GetFeatures",
			Handler:    _ManagementService_GetFeatures_Handler,
		},
		{
			MethodName: "GetOrgIAMPolicy",
			Handler:    _ManagementService_GetOrgIAMPolicy_Handler,
		},
		{
			MethodName: "GetLoginPolicy",
			Handler:    _ManagementService_GetLoginPolicy_Handler,
		},
		{
			MethodName: "GetDefaultLoginPolicy",
			Handler:    _ManagementService_GetDefaultLoginPolicy_Handler,
		},
		{
			MethodName: "AddCustomLoginPolicy",
			Handler:    _ManagementService_AddCustomLoginPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomLoginPolicy",
			Handler:    _ManagementService_UpdateCustomLoginPolicy_Handler,
		},
		{
			MethodName: "ResetLoginPolicyToDefault",
			Handler:    _ManagementService_ResetLoginPolicyToDefault_Handler,
		},
		{
			MethodName: "ListLoginPolicyIDPs",
			Handler:    _ManagementService_ListLoginPolicyIDPs_Handler,
		},
		{
			MethodName: "AddIDPToLoginPolicy",
			Handler:    _ManagementService_AddIDPToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveIDPFromLoginPolicy",
			Handler:    _ManagementService_RemoveIDPFromLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicySecondFactors",
			Handler:    _ManagementService_ListLoginPolicySecondFactors_Handler,
		},
		{
			MethodName: "AddSecondFactorToLoginPolicy",
			Handler:    _ManagementService_AddSecondFactorToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveSecondFactorFromLoginPolicy",
			Handler:    _ManagementService_RemoveSecondFactorFromLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicyMultiFactors",
			Handler:    _ManagementService_ListLoginPolicyMultiFactors_Handler,
		},
		{
			MethodName: "AddMultiFactorToLoginPolicy",
			Handler:    _ManagementService_AddMultiFactorToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveMultiFactorFromLoginPolicy",
			Handler:    _ManagementService_RemoveMultiFactorFromLoginPolicy_Handler,
		},
		{
			MethodName: "GetPasswordComplexityPolicy",
			Handler:    _ManagementService_GetPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "GetDefaultPasswordComplexityPolicy",
			Handler:    _ManagementService_GetDefaultPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "AddCustomPasswordComplexityPolicy",
			Handler:    _ManagementService_AddCustomPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomPasswordComplexityPolicy",
			Handler:    _ManagementService_UpdateCustomPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "ResetPasswordComplexityPolicyToDefault",
			Handler:    _ManagementService_ResetPasswordComplexityPolicyToDefault_Handler,
		},
		{
			MethodName: "GetPasswordAgePolicy",
			Handler:    _ManagementService_GetPasswordAgePolicy_Handler,
		},
		{
			MethodName: "GetDefaultPasswordAgePolicy",
			Handler:    _ManagementService_GetDefaultPasswordAgePolicy_Handler,
		},
		{
			MethodName: "AddCustomPasswordAgePolicy",
			Handler:    _ManagementService_AddCustomPasswordAgePolicy_Handler,
		},
		{
			MethodName: "UpdateCustomPasswordAgePolicy",
			Handler:    _ManagementService_UpdateCustomPasswordAgePolicy_Handler,
		},
		{
			MethodName: "ResetPasswordAgePolicyToDefault",
			Handler:    _ManagementService_ResetPasswordAgePolicyToDefault_Handler,
		},
		{
			MethodName: "GetPasswordLockoutPolicy",
			Handler:    _ManagementService_GetPasswordLockoutPolicy_Handler,
		},
		{
			MethodName: "GetDefaultPasswordLockoutPolicy",
			Handler:    _ManagementService_GetDefaultPasswordLockoutPolicy_Handler,
		},
		{
			MethodName: "AddCustomPasswordLockoutPolicy",
			Handler:    _ManagementService_AddCustomPasswordLockoutPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomPasswordLockoutPolicy",
			Handler:    _ManagementService_UpdateCustomPasswordLockoutPolicy_Handler,
		},
		{
			MethodName: "ResetPasswordLockoutPolicyToDefault",
			Handler:    _ManagementService_ResetPasswordLockoutPolicyToDefault_Handler,
		},
		{
			MethodName: "GetLabelPolicy",
			Handler:    _ManagementService_GetLabelPolicy_Handler,
		},
		{
			MethodName: "GetDefaultLabelPolicy",
			Handler:    _ManagementService_GetDefaultLabelPolicy_Handler,
		},
		{
			MethodName: "AddCustomLabelPolicy",
			Handler:    _ManagementService_AddCustomLabelPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomLabelPolicy",
			Handler:    _ManagementService_UpdateCustomLabelPolicy_Handler,
		},
		{
			MethodName: "ResetLabelPolicyToDefault",
			Handler:    _ManagementService_ResetLabelPolicyToDefault_Handler,
		},
		{
			MethodName: "GetOrgIDPByID",
			Handler:    _ManagementService_GetOrgIDPByID_Handler,
		},
		{
			MethodName: "ListOrgIDPs",
			Handler:    _ManagementService_ListOrgIDPs_Handler,
		},
		{
			MethodName: "AddOrgOIDCIDP",
			Handler:    _ManagementService_AddOrgOIDCIDP_Handler,
		},
		{
			MethodName: "DeactivateOrgIDP",
			Handler:    _ManagementService_DeactivateOrgIDP_Handler,
		},
		{
			MethodName: "ReactivateOrgIDP",
			Handler:    _ManagementService_ReactivateOrgIDP_Handler,
		},
		{
			MethodName: "RemoveOrgIDP",
			Handler:    _ManagementService_RemoveOrgIDP_Handler,
		},
		{
			MethodName: "UpdateOrgIDP",
			Handler:    _ManagementService_UpdateOrgIDP_Handler,
		},
		{
			MethodName: "UpdateOrgIDPOIDCConfig",
			Handler:    _ManagementService_UpdateOrgIDPOIDCConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/management.proto",
}
